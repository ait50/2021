WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.580
纯文本很好 但仍然是

00:00:02.580 --> 00:00:07.410
含有变形和修饰的人类语言

00:00:07.410 --> 00:00:10.650
接下来 我们将尝试降低它的复杂度

00:00:10.650 --> 00:00:12.316
在英语语言中

00:00:12.316 --> 00:00:17.325
所有句子第一个词的首字母一般是大写

00:00:17.324 --> 00:00:22.480
有时全部字母大写 用于表示强调和区分风格

00:00:22.480 --> 00:00:24.120
这对人类读者而言非常方便

00:00:24.120 --> 00:00:27.839
但从机器学习算法的角度来说

00:00:27.839 --> 00:00:31.019
区分 Car，car 和 CAR 没有意义

00:00:31.019 --> 00:00:34.769
它们都是一个意思

00:00:34.770 --> 00:00:39.825
因此我们一般会把文本中的所有字母统一转换成大写/小写

00:00:39.825 --> 00:00:45.844
一般是小写 这样每个词都能用唯一的词条 (token) 表示

00:00:45.844 --> 00:00:47.765
这是文本样本

00:00:47.765 --> 00:00:50.439
是电影《机器的复兴》的一段影评

00:00:50.439 --> 00:00:56.234
这部电影是关于智能机器人与人类作斗争 来争取权利的故事

00:00:56.234 --> 00:00:59.380
我们现在就是这样对待机器人的

00:00:59.380 --> 00:01:04.195
总之 如果将影评存储在名为 text 的变量中

00:01:04.194 --> 00:01:09.334
将其转换成小写 只需在 Python 中调用 lower 方法即可

00:01:09.334 --> 00:01:12.399
这是转换之后的样子

00:01:12.400 --> 00:01:15.100
请注意所有更改后的字母

00:01:15.099 --> 00:01:17.500
其它语言可能有 也可能没有对应的大小写

00:01:17.500 --> 00:01:23.170
但是根据你的 NLP 任务的不同 类似原理可能也适用

00:01:23.170 --> 00:01:27.129
你可能想清除文本中的句号 问号 感叹号等

00:01:27.129 --> 00:01:30.099
特殊字符 仅保留

00:01:30.099 --> 00:01:33.669
字母表中的字母和数字

00:01:33.670 --> 00:01:36.489
在底层细节不太重要的

00:01:36.489 --> 00:01:39.339
文档分类和聚类等应用中

00:01:39.340 --> 00:01:41.170
将所有文本文档作为一个整体

00:01:41.170 --> 00:01:45.724
这个方法特别有效

00:01:45.724 --> 00:01:48.534
这里可以使用正则表达式

00:01:48.534 --> 00:01:52.375
匹配那些不是大小写 A 至 Z 的字母

00:01:53.650 --> 00:01:55.480
或者数字 0 到 9 的范围之外的所有字符

00:01:55.480 --> 00:01:58.505
并用空格代替

00:01:58.504 --> 00:02:02.500
这个方法无需指定所有标点符号

00:02:02.500 --> 00:02:05.694
但是也可以采用其它正则表达式

00:02:05.694 --> 00:02:08.875
进行大小写转换和标点删除

00:02:08.875 --> 00:02:12.280
是两个最常见的文本标准化步骤

00:02:12.280 --> 00:02:15.490
是否需要 以及在哪个阶段使用这两个步骤

00:02:15.490 --> 00:02:19.080
取决于你的最终目标和管道的设计

