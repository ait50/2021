WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.044
Text data, especially from online sources,

00:00:03.044 --> 00:00:05.250
is almost never clean.

00:00:05.250 --> 00:00:08.509
Let's look at the Udacity course catalog as an example.

00:00:08.509 --> 00:00:13.125
Say you want to extract the title and description of each course or Nanodegree.

00:00:13.125 --> 00:00:14.835
Sounds simple, right?

00:00:14.835 --> 00:00:17.375
Let's jump into Python and give it a shot.

00:00:17.375 --> 00:00:21.865
You can follow along by downloading and launching the text processing notebook.

00:00:21.864 --> 00:00:29.719
We can fetch the web page like any other online resource using the requests library.

00:00:29.719 --> 00:00:33.420
It looks like we got back the entire HTML source.

00:00:33.420 --> 00:00:36.500
This is what the browser needs to render the web page.

00:00:36.500 --> 00:00:39.719
But most of this is useless for our purposes.

00:00:39.719 --> 00:00:44.929
We need a way to extract all the plain text as visible on the website.

00:00:44.929 --> 00:00:47.884
How about using regular expressions?

00:00:47.884 --> 00:00:49.534
Let's define a pattern to match

00:00:49.534 --> 00:00:54.464
all HTML tags and remove them by replacing with a blank string.

00:00:54.465 --> 00:00:56.915
Okay, that did something.

00:00:56.914 --> 00:01:01.269
We can see that the page title has been extracted successfully,

00:01:01.270 --> 00:01:06.859
but there is a lot of JavaScript and a number of other items that we don't need.

00:01:06.859 --> 00:01:11.269
In fact, this regular expression somehow didn't match some tags.

00:01:11.269 --> 00:01:13.754
Maybe they were nested inside other tags.

00:01:13.754 --> 00:01:17.069
Maybe we need to account for tags spread across lines.

00:01:17.069 --> 00:01:21.019
Anyway, this doesn't seem like the best approach for this job.

00:01:21.019 --> 00:01:24.250
What we really need is a way to parse the HTML,

00:01:24.250 --> 00:01:25.715
just like a web browser,

00:01:25.715 --> 00:01:28.079
and pull out the relevant elements.

00:01:28.079 --> 00:01:30.590
Introducing BeautifulSoup.

00:01:30.590 --> 00:01:33.900
It's a nice Python library meant to do exactly that.

00:01:33.900 --> 00:01:37.550
You just pass in the raw web page text which in this case

00:01:37.549 --> 00:01:41.269
contains HTML to create a soup object,

00:01:41.269 --> 00:01:43.564
and then you can extract the plain text,

00:01:43.564 --> 00:01:49.099
leaving behind any HTML tags using a symbol called to the get-text method.

00:01:49.099 --> 00:01:50.974
This takes care of nested tags,

00:01:50.974 --> 00:01:53.044
tags that are broken across lines,

00:01:53.045 --> 00:01:58.185
and a multitude of other edge cases that make HTML parsing a pain.

00:01:58.185 --> 00:02:02.120
It also forgives some small errors in HTML just like browsers,

00:02:02.120 --> 00:02:05.765
making it more robust. Let's see.

00:02:05.765 --> 00:02:10.960
That's better.

00:02:10.960 --> 00:02:13.090
I don't see any HTML tags,

00:02:13.090 --> 00:02:17.990
but there are still a bunch of JavaScript and a lot of spaces.

00:02:17.990 --> 00:02:23.620
What else can we do? Let's take a look at how the HTML source is structured.

00:02:23.620 --> 00:02:28.325
The easiest way to do this is to right click on an element of your choice,

00:02:28.324 --> 00:02:30.129
here, this course title,

00:02:30.129 --> 00:02:34.159
and choose Inspect or View Page Source.

00:02:34.159 --> 00:02:37.840
Now look at where the title is placed and what is

00:02:37.840 --> 00:02:43.125
the most distinct way of finding it in the HTML documentary.

00:02:43.125 --> 00:02:47.745
Here, we have a parent div with a class of course summary card.

00:02:47.745 --> 00:02:50.950
That sounds promising. Let's use it.

00:02:50.949 --> 00:02:54.354
BeautifulSoup is actually very powerful.

00:02:54.354 --> 00:02:59.034
It enables you to walk the tree or dorm in many different ways.

00:02:59.034 --> 00:03:04.889
Here we are asking the library to find all divs with a class of course summary card.

00:03:04.889 --> 00:03:09.534
The result returned is a list of all such divs in the document.

00:03:09.534 --> 00:03:13.375
Let's store this in a variable and look at one of the divs.

00:03:13.375 --> 00:03:16.460
Okay. Scrolling through this,

00:03:16.460 --> 00:03:23.710
I see that the title is stored in this a-tag which is contained in this H3 tag.

00:03:23.710 --> 00:03:26.409
How do we extract this title?

00:03:26.409 --> 00:03:29.539
One way to get to it is using a CSS selector.

00:03:29.539 --> 00:03:36.209
And now we can fetch the plain text content just like we did before.

00:03:36.210 --> 00:03:38.135
Great. One last thing.

00:03:38.134 --> 00:03:43.379
Let's strip out the extra whitespace from both ends. There you go.

00:03:43.379 --> 00:03:47.189
Now, let's look back at the HTML to see how we

00:03:47.189 --> 00:03:51.300
can grab the description text. There it is.

00:03:51.300 --> 00:03:56.805
It's a div with an attribute called data-course-short-summary,

00:03:56.805 --> 00:04:00.939
but no value or any other attribute.

00:04:00.939 --> 00:04:04.699
Again, there is a way to select such tags using CSS.

00:04:04.699 --> 00:04:07.629
Specify the tag name, here, div,

00:04:07.629 --> 00:04:12.944
followed by the attribute name in square brackets. Looks good.

00:04:12.944 --> 00:04:15.944
Let's extract the text and clean it up.

00:04:15.944 --> 00:04:20.849
All right. We can now repeat this over all course summaries.

00:04:20.850 --> 00:04:24.500
To do this, we can use a simple for loop.

00:04:24.500 --> 00:04:26.944
Looks spot on to me.

00:04:26.944 --> 00:04:30.444
Let's store this data so we can use it later.

00:04:30.444 --> 00:04:35.079
Here, we are simply keeping the data in a list called courses.

00:04:35.079 --> 00:04:38.784
What we did just now is called scraping a web page.

00:04:38.785 --> 00:04:41.050
Although it sounds a little violent,

00:04:41.050 --> 00:04:42.550
trust me, it's not.

00:04:42.550 --> 00:04:45.340
In fact, scraping is very common.

00:04:45.339 --> 00:04:48.069
Google News is a prime example.

00:04:48.069 --> 00:04:54.634
It pulls out the title and first sentence or two from news articles and displays them.

00:04:54.634 --> 00:04:57.279
Google probably uses a combination of rules and

00:04:57.279 --> 00:05:00.069
machine learning to identify what portion of

00:05:00.069 --> 00:05:02.349
the HTML contains the title and

00:05:02.350 --> 00:05:06.245
the beginning of the article text that it can use as a preview.

00:05:06.245 --> 00:05:08.035
It works great most of the time,

00:05:08.035 --> 00:05:10.450
but sometimes, it does fail.

00:05:10.449 --> 00:05:13.870
Here, for this article on quantum entanglement,

00:05:13.870 --> 00:05:17.920
the preview doesn't seem to match the title at all.

00:05:17.920 --> 00:05:22.090
It looks more like a caption for this image.

00:05:22.089 --> 00:05:26.769
What likely happened is that the caption was the first piece of text on

00:05:26.769 --> 00:05:32.979
the web page and Google's algorithm picked that up as if it was part of the main article.

00:05:32.980 --> 00:05:36.220
This just goes to show how seemingly routine tasks and

00:05:36.220 --> 00:05:40.145
text processing are still not solved all the way.

00:05:40.144 --> 00:05:43.969
Okay, let's look back at what we just achieved.

00:05:43.970 --> 00:05:46.875
We started by fetching a single web page,

00:05:46.875 --> 00:05:48.910
the Udacity course catalog.

00:05:48.910 --> 00:05:53.040
Then we tried a couple of methods to remove HTML tags.

00:05:53.040 --> 00:05:57.672
We finally settled on using BeautifulSoup to parse the entire HTML source,

00:05:57.672 --> 00:05:59.515
find all course summaries,

00:05:59.514 --> 00:06:03.189
and extract the title and description for each course.

00:06:03.189 --> 00:06:05.605
And then we saved them all in a list.

00:06:05.605 --> 00:06:08.302
Depending on what you're planning to do next,

00:06:08.302 --> 00:06:11.199
you may continue to treat these chunks as part of

00:06:11.199 --> 00:06:15.819
a single document or consider each to be a separate document.

00:06:15.819 --> 00:06:17.067
The latter is useful,

00:06:17.067 --> 00:06:20.529
for instance, if you want to group related courses.

00:06:20.529 --> 00:06:24.000
The problem then reduces to document clustering.

