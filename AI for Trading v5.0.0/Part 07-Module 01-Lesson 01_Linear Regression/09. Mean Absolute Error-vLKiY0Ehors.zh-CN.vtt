WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.310
在上节视频中 我们学习了如何

00:00:02.310 --> 00:00:05.990
通过沿着负梯度方向移动来降低误差函数

00:00:05.990 --> 00:00:09.970
在这节视频中 我们将要学习这些误差函数的公式

00:00:09.970 --> 00:00:14.095
线性回归最常见的两种误差函数为平均绝对误差

00:00:14.095 --> 00:00:15.684
和均方误差

00:00:15.884 --> 00:00:18.015
首先 我们来学习平均绝对误差

00:00:18.015 --> 00:00:19.978
这是我们的点和直线

00:00:20.178 --> 00:00:22.709
这个点坐标为 (x,y)

00:00:22.710 --> 00:00:25.370
这条直线称为 y-hat 代表预测值

00:00:25.370 --> 00:00:27.609
所以我们对这个点的预测应该是

00:00:27.809 --> 00:00:30.149
直线上的一点 这个点的横坐标为 x

00:00:30.149 --> 00:00:32.478
这个点的坐标为 (x, y-hat)

00:00:32.478 --> 00:00:37.783
也就是说点到直线的垂直距离为 y 减去 y-hat

00:00:37.783 --> 00:00:40.399
这就是我们所说的误差

00:00:40.399 --> 00:00:42.618
注意这不是点到直线的实际距离

00:00:42.618 --> 00:00:44.988
因为这只是垂线段

00:00:44.990 --> 00:00:47.060
但是点到直线的垂直距离

00:00:47.060 --> 00:00:50.770
表示这个点到预测之间的距离

00:00:50.770 --> 00:00:53.210
目前我们的误差总值是

00:00:53.210 --> 00:00:56.015
我们数据集里这些距离的总和

00:00:56.015 --> 00:00:58.185
有时我们这样使用 作为误差

00:00:58.185 --> 00:01:01.219
但是在这个例子中 我们使用平均绝对误差

00:01:01.219 --> 00:01:04.319
即所有误差的总和除以 M

00:01:04.319 --> 00:01:06.349
M 为我们数据集中的点数

00:01:06.349 --> 00:01:09.128
利用总和或平均数不会改变我们的算法

00:01:09.328 --> 00:01:11.529
因为我们只是用常数 M 缩小了误差

00:01:11.530 --> 00:01:13.989
注意这里表示

00:01:13.989 --> 00:01:16.899
我们在 y-yhat 两边用了绝对值符号

00:01:16.900 --> 00:01:19.060
原因在于当点位于直线上方时

00:01:19.060 --> 00:01:20.680
距离为 y - y-hat

00:01:20.680 --> 00:01:23.974
但是当点位于下方时 距离为 y-hat - y

00:01:24.174 --> 00:01:26.378
我们希望误差为正数

00:01:26.578 --> 00:01:29.898
否则负数误差会抵消正数误差

00:01:29.900 --> 00:01:33.685
因此我们使用绝对值 |y - y-hat|

00:01:33.685 --> 00:01:38.890
所以我们的平均绝对误差是所有绝对误差的平均值

00:01:38.890 --> 00:01:42.759
即这些绝对值的总和除以点数 M

00:01:42.959 --> 00:01:47.448
我们在图形上绘制这些误差

00:01:47.450 --> 00:01:49.700
显然 正如我们前面提到的

00:01:49.700 --> 00:01:54.254
图表有多个维度 但是这只是图表的二维简化图

00:01:54.254 --> 00:01:56.959
在这个图中我们利用梯度下降法进行下降

00:01:56.959 --> 00:01:59.158
会得到越来越好的直线

00:01:59.358 --> 00:02:04.358
直到我们得到匹配最小平均绝对值的最佳直线

