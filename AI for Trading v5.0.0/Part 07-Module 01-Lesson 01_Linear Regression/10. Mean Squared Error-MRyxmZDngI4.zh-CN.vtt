WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.839
在这节视频中 我们将要学习均方误差

00:00:02.839 --> 00:00:05.868
均方误差与绝对平方误差非常相似

00:00:05.870 --> 00:00:08.820
再来看下 这是我们的点和预测

00:00:08.820 --> 00:00:11.070
但是现在不是利用距离

00:00:11.070 --> 00:00:13.099
我们实际上要在旁边的线段 绘制一个正方形

00:00:13.099 --> 00:00:16.643
所以这个区域为 (y - y-hat) 的平方

00:00:16.643 --> 00:00:18.428
注意下这里没有负数

00:00:18.428 --> 00:00:20.788
所以我们不需要担心绝对值

00:00:20.789 --> 00:00:24.879
并且均方误差表示所有平方的平均数

00:00:24.879 --> 00:00:28.068
所以我们有个额外因子二分之一 便于后续使用

00:00:28.268 --> 00:00:31.104
所以这个误差是所有 (y - y-hat) 平方总和

00:00:31.105 --> 00:00:33.905
平均数的二分之一

00:00:33.905 --> 00:00:37.030
所以我们得到总和 称为完全平方误差

00:00:37.030 --> 00:00:40.615
而我们得到的平均数 不会在算法中有所区别

00:00:40.615 --> 00:00:43.719
注意一下 无论点位于直线的上方或下方

00:00:43.719 --> 00:00:46.658
平方总是为非负数

00:00:46.658 --> 00:00:50.363
因为任何实数的平方均为非负数

00:00:50.365 --> 00:00:52.685
这里的二分之一便于后续使用

00:00:52.685 --> 00:00:55.208
因为随后我们会用到这个误差的导数

00:00:55.408 --> 00:00:57.899
另外 我们用这个误差乘以任何常数

00:00:57.899 --> 00:01:00.588
收敛过程中并未改变

00:01:00.590 --> 00:01:03.215
所以这个二分之一不会有任何影响

00:01:03.215 --> 00:01:05.855
所以这是误差的图示

00:01:05.855 --> 00:01:08.150
这里我们有一些点和一条直线

00:01:08.150 --> 00:01:12.245
误差为所有平方区域的平均数

00:01:12.245 --> 00:01:14.030
这是误差的图表

00:01:14.030 --> 00:01:15.989
当我们想下山

00:01:15.989 --> 00:01:18.149
我们到达误差尽可能小的地方

00:01:18.150 --> 00:01:23.150
同样也适用于平方区域平均数的最小化

