WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.080
So here's another trick that will help us move a point closer to a line,

00:00:04.080 --> 00:00:08.280
and it's very similar to the absolute trick but it has a little bit of extra gravy.

00:00:08.279 --> 00:00:09.739
It's based on this premise.

00:00:09.740 --> 00:00:12.210
If we have a point that is close to a line,

00:00:12.210 --> 00:00:16.109
then this distance is small and we want to move the line very little.

00:00:16.109 --> 00:00:18.329
But if the point is far from the line,

00:00:18.329 --> 00:00:20.879
then want to move the line a lot more.

00:00:20.879 --> 00:00:23.129
The absolute trick that we learned previously does

00:00:23.129 --> 00:00:25.214
not have this property because if we remember

00:00:25.214 --> 00:00:31.109
the absolute trick adds alpha to the y-intercept w_2 and p times alpha to the slope w_1.

00:00:31.109 --> 00:00:34.380
This has nothing to do with how far the point is from the line,

00:00:34.380 --> 00:00:37.969
since P is just a horizontal distance.

00:00:37.969 --> 00:00:41.064
So let's just add the vertical distance into this formula.

00:00:41.064 --> 00:00:44.734
Let's look at this vertical distance between the point and the line.

00:00:44.734 --> 00:00:48.630
The point over the line has coordinates say,( p,q').

00:00:48.630 --> 00:00:52.400
This distance is then q minus q' because q' is

00:00:52.399 --> 00:00:56.225
the value at the line and q is the value of the y coordinate at the point.

00:00:56.225 --> 00:00:58.035
So what we do here is very simple.

00:00:58.034 --> 00:01:01.199
We just take this q minus q' and multiply it into

00:01:01.200 --> 00:01:04.570
what we're adding to both the y-intercept and to the slope.

00:01:04.569 --> 00:01:07.709
This will again make the line go up by a bit and rotate in

00:01:07.709 --> 00:01:12.174
this direction except that now if the point is far from or close to the line,

00:01:12.174 --> 00:01:13.739
the amount the line moves will be

00:01:13.739 --> 00:01:18.044
affected and here's our new equation with a factor of q minus q'.

00:01:18.045 --> 00:01:20.230
Notice that here we get something for free.

00:01:20.230 --> 00:01:23.575
If the point is underneath the line instead of over the line,

00:01:23.575 --> 00:01:27.930
then q minus q' is actually a negative value and if this is the case then we're

00:01:27.930 --> 00:01:32.475
subtracting something from the slope thus rotating the line in this direction instead,

00:01:32.474 --> 00:01:33.849
still towards the point.

00:01:33.849 --> 00:01:36.599
So this trick also takes care of points that are under

00:01:36.599 --> 00:01:40.189
the line and we don't have to have two rules like we had on the absolute trick.

00:01:40.189 --> 00:01:42.575
We just have one same rule for both.

00:01:42.575 --> 00:01:45.094
Again, let's clarify this with an example.

00:01:45.094 --> 00:01:46.480
In this example over here,

00:01:46.480 --> 00:01:49.020
we have the point (5,15) and notice that

00:01:49.019 --> 00:01:51.569
this distance is going to be two because the line goes

00:01:51.569 --> 00:01:57.259
through the (5,13) as two times five plus three is 13.

00:01:57.260 --> 00:01:58.734
Now to change things a bit,

00:01:58.734 --> 00:02:01.299
we'll use zero point 0.01 as the learning rate.

00:02:01.299 --> 00:02:07.409
So the absolute trick would be adding 0.01 to the y-intercept and 0.05 to the slope.

00:02:07.409 --> 00:02:09.525
But now as our neutral access,

00:02:09.525 --> 00:02:14.030
we multiply the two numbers two adding to the slope and the y-intercept by two;

00:02:14.030 --> 00:02:20.569
which means we're adding 0.12 to the slope and 0.02 to the y-intercept.

00:02:20.569 --> 00:02:25.775
So the equation of our new line is y equals 2.1_x plus 3.02.

00:02:25.775 --> 00:02:29.530
Notice that that line is going to be closer to the point.

00:02:29.530 --> 00:02:32.000
So that's it. That's the square trick.

