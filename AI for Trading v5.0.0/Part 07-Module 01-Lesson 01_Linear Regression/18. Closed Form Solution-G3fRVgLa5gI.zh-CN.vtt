WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.560
有个事情很有意思：

00:00:02.560 --> 00:00:04.458
为了最小化均方误差

00:00:04.458 --> 00:00:07.229
我们实际上不需要梯度下降法或技巧

00:00:07.230 --> 00:00:11.035
我们可以在封闭的数学形式中完成 让我来展示一下

00:00:11.035 --> 00:00:12.880
这是我们的数据 (X1,Y1) 

00:00:12.880 --> 00:00:14.169
直到 (Xm,Ym) 

00:00:14.368 --> 00:00:16.489
在这个例子中 m 为 5

00:00:16.489 --> 00:00:19.903
这些正方形区域代表了我们的平方误差

00:00:19.905 --> 00:00:24.440
所以我们输入点 X1 直到 Xm 标签为 Y1 直到 Ym

00:00:24.440 --> 00:00:29.760
我们预测的形式是 Yi-hat = W1 Xi + W2

00:00:29.760 --> 00:00:34.115
W1 是直线的斜率 W2 是 y 轴截距

00:00:34.115 --> 00:00:37.219
通过这个公式得到均方误差是这样的

00:00:37.219 --> 00:00:40.560
注意这里我写的误差为函数 W1 和 W2

00:00:40.560 --> 00:00:43.500
因为给定了任何 W1 和 W2

00:00:43.500 --> 00:00:48.130
我们可以根据 W1 和 W2 计算预测和误差

00:00:48.130 --> 00:00:49.710
如果你学过微积分 你就会知道

00:00:49.710 --> 00:00:51.030
为了最小化误差

00:00:51.030 --> 00:00:52.890
我们需要根据两个输入变量 W1 和 W2 求导

00:00:52.890 --> 00:00:57.689
将两个都设为 0

00:00:57.689 --> 00:00:59.698
我们计算导数 你可以

00:00:59.700 --> 00:01:03.238
在教学笔记里看到整个运算 并且我们得到这两个公式

00:01:03.439 --> 00:01:08.709
现在我们只需要解决 W1 和 W2 为 0 的两个方程

00:01:08.709 --> 00:01:10.179
那么我们现在得到什么呢？

00:01:10.180 --> 00:01:13.500
我们得到二元方程组 含有两个未知数

00:01:13.500 --> 00:01:16.334
我们可以使用线性代数很容易地解决这个问题

00:01:16.334 --> 00:01:18.039
所以另一个问题是

00:01:18.040 --> 00:01:19.649
为什么干脆不这样就好了？

00:01:19.849 --> 00:01:22.558
为什么我们需要通过梯度下降法

00:01:22.560 --> 00:01:25.680
而不是只对含有未知数的方程组求解呢？ 

00:01:25.680 --> 00:01:26.709
这样来考虑一下

00:01:26.909 --> 00:01:30.959
如果你输入的不是只有两个维度 而是有 n 个

00:01:30.959 --> 00:01:34.283
那么就会得到含有 n 个未知数的 n 元方程组

00:01:34.483 --> 00:01:36.848
对含有 n 个未知数的 n 元方程组

00:01:36.849 --> 00:01:39.894
求解非常费力 因为如果 n 很大

00:01:39.894 --> 00:01:41.628
那么在某个点上的解

00:01:41.828 --> 00:01:44.018
我们需要转置一个 n*n 的矩阵

00:01:44.019 --> 00:01:46.128
转置大矩阵会耗费

00:01:46.328 --> 00:01:48.848
大量时间和计算能力

00:01:48.849 --> 00:01:50.573
所以这并不可行

00:01:50.575 --> 00:01:53.635
因此这就是我们使用梯度下降法的原因

00:01:53.635 --> 00:01:57.408
这种方法不能给出准确答案 但是可以让我们无限接近

00:01:57.608 --> 00:02:01.983
最佳答案 给我们较好拟合数据的解答

00:02:01.983 --> 00:02:04.358
但是如果我们具有无限的计算能力

00:02:04.358 --> 00:02:09.358
们可以解决方程组 用一个步骤解决线性回归

