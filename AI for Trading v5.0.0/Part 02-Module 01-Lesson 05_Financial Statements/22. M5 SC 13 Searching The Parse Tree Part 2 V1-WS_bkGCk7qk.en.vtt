WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.595
Hello and welcome back.

00:00:02.595 --> 00:00:06.134
In this notebook, we will see how to search

00:00:06.134 --> 00:00:11.580
the parse tree using the class attribute and regular expressions.

00:00:11.580 --> 00:00:15.660
So, let's begin by looking at the class attribute.

00:00:15.660 --> 00:00:20.339
Let's suppose we wanted to find all the tags that had

00:00:20.339 --> 00:00:25.289
the attribute class equals "h2style."

00:00:25.289 --> 00:00:27.974
Unfortunately, in this case,

00:00:27.975 --> 00:00:33.325
we can't simply parse the class attribute to the "find_all" method.

00:00:33.325 --> 00:00:41.015
The reason is that the CSS attribute class is a reserved word in Python.

00:00:41.015 --> 00:00:43.880
Therefore, using class as

00:00:43.880 --> 00:00:49.460
a keyword argument in the "find_all" method will give you a syntax error.

00:00:49.460 --> 00:00:51.679
To get around this problem,

00:00:51.679 --> 00:00:57.814
BeautifulSoup has implemented the keyword "class" with an underscore at the end.

00:00:57.814 --> 00:00:59.765
Let's see how this works.

00:00:59.765 --> 00:01:04.790
So, in order to use the "find_all" method to search

00:01:04.790 --> 00:01:09.440
for all the tags in our sample HTML file that has

00:01:09.439 --> 00:01:14.859
the attribute class equals "h2style," we can simply

00:01:14.859 --> 00:01:21.789
use the class attribute but with the underscore at the end in the "find_all" method.

00:01:21.790 --> 00:01:23.745
So, if we run this code,

00:01:23.745 --> 00:01:27.070
we can see that we get the two "h2" tags.

00:01:27.069 --> 00:01:31.179
Since these are the only two tags in our document,

00:01:31.180 --> 00:01:35.379
they have the attribute class equals "h2style."

00:01:35.379 --> 00:01:37.750
Another nice feature of

00:01:37.750 --> 00:01:43.105
the "find_all" method is that it can understand regular expressions.

00:01:43.105 --> 00:01:47.710
That means that we can pass regular expression objects from

00:01:47.709 --> 00:01:52.919
Python's RE module to the "find_all" method to search our tree.

00:01:52.920 --> 00:01:54.829
Let's see an example.

00:01:54.829 --> 00:01:59.299
Let's suppose we wanted to find all the tags in

00:01:59.299 --> 00:02:04.659
our sample HTML file whose names contain the letter I.

00:02:04.659 --> 00:02:08.939
To do this, we can use a regular expression, I.

00:02:08.939 --> 00:02:12.680
So, we can parse a raw string to

00:02:12.680 --> 00:02:18.740
the compile function of the RE module to get a regular expression object.

00:02:18.740 --> 00:02:25.445
This regular expression object can then be passed to the "find_all" method as shown here.

00:02:25.444 --> 00:02:28.655
Just for clarity, in this example,

00:02:28.655 --> 00:02:34.935
we will only be interested in printing the tag's name and not the tag's entire content.

00:02:34.935 --> 00:02:37.395
For this reason, we will use

00:02:37.395 --> 00:02:44.230
the dot name attribute of the tag object to only print the tag's name.

00:02:44.229 --> 00:02:46.334
So, if we run this code,

00:02:46.335 --> 00:02:52.219
we can see that we got all the tags whose names contain the letter I.

