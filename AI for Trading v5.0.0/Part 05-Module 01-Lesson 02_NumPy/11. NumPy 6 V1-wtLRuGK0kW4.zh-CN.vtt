WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.695
我们来看 NumPy 是怎么给数组进行算术运算的

00:00:04.695 --> 00:00:07.980
NumPy 能进行元素范畴的运算

00:00:07.980 --> 00:00:10.740
也能进行矩阵运算

00:00:10.740 --> 00:00:15.624
本视频只讲元素范畴的运算

00:00:15.624 --> 00:00:18.955
来看这两个秩为 1 的数组

00:00:18.954 --> 00:00:25.684
我们可以用算术符号或函数来完成元素范畴的基本运算

00:00:25.684 --> 00:00:29.195
这两种办法能实现的运算是一样的

00:00:29.195 --> 00:00:33.030
唯一的区别在于 如果用的是函数

00:00:33.030 --> 00:00:38.210
那你可以用关键字和方法对函数进行调整

00:00:38.210 --> 00:00:42.865
我们再来试试元素相减、相乘和相除

00:00:42.865 --> 00:00:46.065
这些操作也可以通过函数实现

00:00:46.064 --> 00:00:48.794
为了完成这些运算

00:00:48.795 --> 00:00:52.675
NumPy 有时候会用一种叫 “广播” 的机制

00:00:52.674 --> 00:00:57.149
“广播” 一词在此处指的是

00:00:57.149 --> 00:01:02.149
NumPy 对不同形状的数组进行元素算术运算的处理过程

00:01:02.149 --> 00:01:04.549
注意

00:01:04.549 --> 00:01:07.155
因为我们在做的是元素范畴的运算

00:01:07.155 --> 00:01:13.364
所以相关数组必须具备相同形状或是可广播的

00:01:13.364 --> 00:01:15.619
等下我们会具体讲这一点

00:01:15.620 --> 00:01:21.475
对秩为 2 的数组的元素进行同样的算术运算

00:01:21.474 --> 00:01:25.199
重申一遍 要进行运算

00:01:25.200 --> 00:01:31.118
相关数组必须具备相同形状或是可广播的

00:01:31.118 --> 00:01:34.665
来看这两个 2 x 2 矩阵

00:01:34.665 --> 00:01:40.055
我们可以用符号进行同样的算术运算

00:01:40.055 --> 00:01:43.620
也可以用数学函数来进行运算

00:01:43.620 --> 00:01:47.355
比如用 sqrt 求数组所有元素的平方根

00:01:47.355 --> 00:01:50.500
这是之前那个秩为 1 的数组

00:01:50.500 --> 00:01:53.799
我们可以像这样求出各元素的平方根

00:01:53.799 --> 00:01:56.549
或像这样求出各元素指数函数的值

00:01:56.549 --> 00:01:59.884
也可以求出各元素的平方

00:01:59.885 --> 00:02:04.590
NumPy 的统计函数也是一大特色

00:02:04.590 --> 00:02:07.290
如平均值 mean 等统计函数

00:02:07.290 --> 00:02:11.375
能让我们了解数组元素的统计信息

00:02:11.375 --> 00:02:13.169
我们来看些例子

00:02:13.169 --> 00:02:15.669
还是这个秩为 2 的数组

00:02:15.669 --> 00:02:18.534
我们可以像这样求出矩阵的平均值

00:02:18.534 --> 00:02:22.704
也可以像这样求出各行和各列的平均值

00:02:22.705 --> 00:02:26.170
同理 我们还可以求其它统计数据 如总和

00:02:26.169 --> 00:02:28.639
标准差

00:02:28.639 --> 00:02:31.629
中位数、最大值、最小值等

00:02:31.629 --> 00:02:35.810
最后 我们来看 NumPy 如何在不使用复杂循环的情况下

00:02:35.810 --> 00:02:40.425
增加 NumPy 数组各元素的值

00:02:40.425 --> 00:02:42.510
还是这个秩为 2 的数组

00:02:42.509 --> 00:02:45.564
我们可以像这样给每个元素加 3

00:02:45.564 --> 00:02:48.150
像这样让每个元素减 3

00:02:48.150 --> 00:02:50.010
每个元素乘以 3

00:02:50.009 --> 00:02:51.824
每个元素除以 3

00:02:51.824 --> 00:02:53.474
上述例子中

00:02:53.474 --> 00:02:56.968
NumPy 会在幕后对 X 数组广播 3

00:02:56.968 --> 00:03:01.055
使数组和 3 的形状相同

00:03:01.055 --> 00:03:06.540
因此我们只用一行代码就能给 X 的各元素加 3

00:03:06.539 --> 00:03:08.459
一定条件下

00:03:08.460 --> 00:03:12.710
NumPy 可以对不同形状的两个 NumPy 数组进行同样的操作

00:03:12.710 --> 00:03:15.915
以这个 3 x 3 数组 Y

00:03:15.914 --> 00:03:18.750
和这个 1 x 3 数组 x 为例

00:03:18.750 --> 00:03:23.069
如果让 Y 加 x

00:03:23.069 --> 00:03:26.275
那么 Y 的第一列会加 0

00:03:26.275 --> 00:03:28.145
第二列会加 1

00:03:28.145 --> 00:03:31.189
第三列会加 2

00:03:31.189 --> 00:03:36.259
与之前一样 通过将小数组广播给大数组

00:03:36.259 --> 00:03:42.039
NumPy 实现了给一个 3 x3 数组加上一个 1 x 3 数组的操作

00:03:42.039 --> 00:03:44.179
因为广播机制 所以两者形状兼容了

00:03:44.180 --> 00:03:48.469
总结起来就是 小数组

00:03:48.469 --> 00:03:50.280
比如这个 1 x 3 数组

00:03:50.280 --> 00:03:53.960
必须能扩展成与大数组兼容的形状

00:03:53.960 --> 00:03:57.155
避免广播的对象模棱两可

00:03:57.155 --> 00:04:00.409
我们可以对 3 x 1 数组进行同样的操作

00:04:00.409 --> 00:04:04.009
这会给 Y 的第一行加 0

00:04:04.009 --> 00:04:06.849
第二行加 1

00:04:06.849 --> 00:04:10.849
第三行加 2

00:04:10.849 --> 00:04:15.530
更多广播知识及规则请查阅 NumPy 的文献

