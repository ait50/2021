WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.214
Now that you know how to create a variety of NumPy arrays,

00:00:04.214 --> 00:00:09.320
let's see how NumPy allows us to effectively manipulate the data within them.

00:00:09.320 --> 00:00:11.620
NumPy arrays are mutable,

00:00:11.619 --> 00:00:16.899
meaning the elements in them can be changed after the array has been created.

00:00:16.899 --> 00:00:20.824
NumPy arrays can also be sliced in many different ways.

00:00:20.824 --> 00:00:24.844
This allows us to achieve any subset of the array we want.

00:00:24.844 --> 00:00:27.564
You'll often use slicing to separate data.

00:00:27.565 --> 00:00:31.315
For example, when dividing a dataset into training,

00:00:31.315 --> 00:00:33.765
cross validation, and testing sets.

00:00:33.765 --> 00:00:36.410
We will start by looking how the elements of

00:00:36.409 --> 00:00:41.259
a NumPy array can be accessed or modified by indexing.

00:00:41.259 --> 00:00:46.344
Let's create a rank one array that contains integers from one to five.

00:00:46.344 --> 00:00:49.129
Elements can be accessed by specifying

00:00:49.130 --> 00:00:52.740
their positions using indices inside square brackets.

00:00:52.740 --> 00:00:57.920
Positive indices are used to specify positions from the beginning of the array.

00:00:57.920 --> 00:01:01.230
Notice that to access the first element in the array,

00:01:01.229 --> 00:01:04.750
we have to use index zero not one.

00:01:04.750 --> 00:01:10.620
We can also use negative indices to specify positions from the end of the array.

00:01:10.620 --> 00:01:16.890
Notice that the same element can be accessed using both negative and positive integers.

00:01:16.890 --> 00:01:19.840
As mentioned earlier, positive indices are

00:01:19.840 --> 00:01:23.140
used to access elements from the beginning of the array,

00:01:23.140 --> 00:01:28.055
while negative indices are used to access elements from the end of the array.

00:01:28.055 --> 00:01:32.545
Now, let's see how we can modify the elements in an array.

00:01:32.545 --> 00:01:36.230
We can do this by accessing the element we want to change,

00:01:36.230 --> 00:01:39.195
and then reassigning it using the equal sign.

00:01:39.194 --> 00:01:42.319
Let's modify the array X we just created.

00:01:42.319 --> 00:01:47.614
We can change the fourth element in X from four to 20.

00:01:47.614 --> 00:01:53.369
We can also access and modify specific elements of rank two in NumPy arrays.

00:01:53.370 --> 00:01:56.090
The only difference is that we need to provide

00:01:56.090 --> 00:02:00.424
two indices separated by a comma inside the square brackets.

00:02:00.424 --> 00:02:04.899
Here's a three by three array containing the integers from one to nine.

00:02:04.900 --> 00:02:07.675
Let's access some elements in that array.

00:02:07.674 --> 00:02:09.719
Remember that zero, comma,

00:02:09.719 --> 00:02:16.169
zero refers to the element in the first row and the first column, which is one.

00:02:16.169 --> 00:02:21.024
Elements in rank two arrays can also be modified in the same way.

00:02:21.025 --> 00:02:23.469
We can change the zero, comma,

00:02:23.469 --> 00:02:28.574
zero element, in X from one to 20 like this.

00:02:28.574 --> 00:02:33.109
Now that we know how to access and modify elements in an array,

00:02:33.110 --> 00:02:37.035
let's take a look at how we can add and delete elements.

00:02:37.034 --> 00:02:40.655
We can delete elements using NumPy's delete function.

00:02:40.655 --> 00:02:43.300
This function takes in an array,

00:02:43.300 --> 00:02:45.335
list of indices to delete,

00:02:45.335 --> 00:02:47.445
and an axis to delete from.

00:02:47.444 --> 00:02:49.239
For rank one arrays,

00:02:49.240 --> 00:02:51.625
the axis keyword is not required.

00:02:51.625 --> 00:02:53.520
For rank two arrays,

00:02:53.520 --> 00:02:59.830
axis zero is used to select rows and axis one is used to select columns.

00:02:59.830 --> 00:03:01.435
Let's see some examples.

00:03:01.435 --> 00:03:03.550
Here is a rank one array,

00:03:03.550 --> 00:03:08.015
we can delete the first and last element of X like this.

00:03:08.014 --> 00:03:10.799
And here is a rank 2 array,

00:03:10.800 --> 00:03:14.760
and delete the first and last column of Y like this.

00:03:14.759 --> 00:03:19.939
We can add values to NumPy arrays using the append function.

00:03:19.939 --> 00:03:22.939
This function takes in an array,

00:03:22.939 --> 00:03:25.340
a list of elements to append,

00:03:25.340 --> 00:03:27.664
and the axis to append it on.

00:03:27.664 --> 00:03:29.724
Let's see some examples.

00:03:29.724 --> 00:03:35.104
We can append an element six to this rank one array like this.

00:03:35.104 --> 00:03:37.724
And we can append multiple elements,

00:03:37.724 --> 00:03:41.155
say seven and eight in a list like this.

00:03:41.155 --> 00:03:43.564
In a rank two array,

00:03:43.564 --> 00:03:46.734
we can append a new row containing 10,

00:03:46.735 --> 00:03:49.270
11, and 12 like this.

00:03:49.270 --> 00:03:52.400
And we can append a new column containing 10,

00:03:52.400 --> 00:03:54.490
11, 12 like this.

00:03:54.490 --> 00:03:59.150
Notice that when appending rows or columns to rank two NumPy arrays,

00:03:59.150 --> 00:04:04.765
the rows and columns must have the correct shape to match the shape of the array.

00:04:04.764 --> 00:04:08.939
Now, let's see how we can insert values into NumPy arrays.

00:04:08.939 --> 00:04:11.454
We can use the insert function for this,

00:04:11.455 --> 00:04:13.425
which takes in an array,

00:04:13.425 --> 00:04:16.439
index, elements, and axis.

00:04:16.439 --> 00:04:20.819
This inserts the given list of elements to the array right before

00:04:20.819 --> 00:04:25.654
the given index along the specified axis. Here's a rank one array.

00:04:25.654 --> 00:04:33.214
We can insert the integers three and four between these elements two and five like this.

00:04:33.214 --> 00:04:36.194
In this rank two array,

00:04:36.194 --> 00:04:41.555
we can insert a row between this first and last row like this.

00:04:41.555 --> 00:04:49.350
And insert a column full of fives between the first and second column like this.

00:04:49.350 --> 00:04:56.990
NumPy also allows us to stack NumPy arrays on top of each other or side by side.

00:04:56.990 --> 00:05:01.550
The stacking is done using either NumPy's Vstack for

00:05:01.550 --> 00:05:06.250
vertical stacking or Hstack function for horizontal stacking.

00:05:06.250 --> 00:05:09.785
It's important to note that in order to stack arrays,

00:05:09.785 --> 00:05:12.535
the shape of the arrays must match.

00:05:12.535 --> 00:05:17.675
Consider this rank one and rank two array X and Y.

00:05:17.675 --> 00:05:24.600
We can stack X on top of Y with Vstack like this.

00:05:24.600 --> 00:05:30.700
And we can stack X on the right of Y with Hstack like this.

00:05:30.699 --> 00:05:37.469
We need to reshape X to match the shape of Y before stacking it horizontally.

