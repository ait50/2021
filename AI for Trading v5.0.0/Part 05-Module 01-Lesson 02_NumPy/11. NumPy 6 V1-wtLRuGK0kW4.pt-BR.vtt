WEBVTT
Kind: captions
Language: pt-BR

00:00:00.137 --> 00:00:04.928
Vamos ver como o NumPy faz
operações aritméticas nos arrays.

00:00:04.961 --> 00:00:08.161
O NumPy permite operações
nos elementos,

00:00:08.194 --> 00:00:11.321
assim como operações
na matriz.

00:00:11.354 --> 00:00:16.033
Neste vídeo só vamos ver
as operações nos elementos.

00:00:16.234 --> 00:00:19.145
Considere
estes dois arrays nível 1.

00:00:19.481 --> 00:00:22.754
Podemos fazer operações básicas
nos elementos

00:00:22.787 --> 00:00:26.089
usando símbolos aritméticos
ou funções.

00:00:26.122 --> 00:00:29.506
As duas formas realizam
a mesma operação.

00:00:29.539 --> 00:00:33.546
A única diferença
é que, ao usar a função,

00:00:33.579 --> 00:00:38.505
você tem opções de ajuste
com palavras-chave e métodos.

00:00:38.538 --> 00:00:40.953
Vamos ver a subtração,

00:00:40.986 --> 00:00:43.346
a multiplicação
e a divisão dos elementos.

00:00:43.379 --> 00:00:46.522
Mais uma vez,
vamos usar a função.

00:00:46.555 --> 00:00:48.969
Para completar as operações,

00:00:49.002 --> 00:00:52.985
o NumPy às vezes usa algo
chamado de transmissão.

00:00:53.177 --> 00:00:56.113
A transmissão é uma palavra
usada para descrever

00:00:56.146 --> 00:00:59.954
como o NumPy manipula
operações aritméticas dos elementos

00:00:59.987 --> 00:01:02.264
com arrays
de formatos diferentes.

00:01:02.505 --> 00:01:04.257
É importante saber

00:01:04.290 --> 00:01:07.409
que, como as operações
são nos elementos,

00:01:07.442 --> 00:01:11.113
os arrays das operações
precisam ter o mesmo formato

00:01:11.146 --> 00:01:13.656
ou serem transmissíveis.

00:01:13.689 --> 00:01:15.858
Já vamos falar mais disso.

00:01:16.073 --> 00:01:19.913
Vamos fazer a mesma operação
aritmética nos elementos

00:01:19.946 --> 00:01:21.737
nos arrays nível 2.

00:01:21.770 --> 00:01:25.401
Mais uma vez,
para realizar essas operações,

00:01:25.434 --> 00:01:28.898
os arrays precisam ter
o mesmo formato

00:01:28.931 --> 00:01:31.329
ou serem transmissíveis.

00:01:31.570 --> 00:01:35.153
Aqui temos
duas matrizes 2 por 2.

00:01:35.186 --> 00:01:38.362
Vamos realizar as mesmas
operações aritméticas

00:01:38.395 --> 00:01:40.457
usando a notação de símbolo.

00:01:40.490 --> 00:01:43.457
Também podemos aplicar
funções matemáticas,

00:01:43.490 --> 00:01:44.929
como a raiz quadrada,

00:01:44.962 --> 00:01:47.801
em todos os elementos de um array
ao mesmo tempo.

00:01:47.834 --> 00:01:50.890
Aqui está o array nível 1
que usamos antes.

00:01:50.923 --> 00:01:54.098
Podemos saber a razia quadrada
de cada elemento

00:01:54.131 --> 00:01:56.849
e o exponencial de cada um.

00:01:57.042 --> 00:02:00.209
Também cada elemento
elevado a 2.

00:02:00.242 --> 00:02:04.841
Outro ótimo recurso do NumPy
são as funções de estatística.

00:02:05.049 --> 00:02:07.418
As funções de estatística,
como a média,

00:02:07.451 --> 00:02:11.673
fornecem informações estatísticas
sobre os elementos num array.

00:02:11.706 --> 00:02:13.513
Vamos ver exemplos.

00:02:13.546 --> 00:02:16.041
Aqui está o array nível 2
de novo.

00:02:16.074 --> 00:02:18.841
Podemos saber a média
da matriz,

00:02:18.874 --> 00:02:22.961
assim como as médias
de fileiras e colunas individuais.

00:02:22.994 --> 00:02:26.617
Podemos fazer o mesmo
para as estatísticas, como a soma,

00:02:26.650 --> 00:02:31.505
o desvio de padrão,
a mediana, o máximo e o mínimo.

00:02:31.906 --> 00:02:35.716
Por fim vamos ver como o NumPy
adiciona números simples

00:02:35.749 --> 00:02:38.206
a todos os elementos
de um array

00:02:38.239 --> 00:02:40.677
sem usar loops complicados.

00:02:40.710 --> 00:02:42.908
Aqui está o array nível 2
de novo.

00:02:42.941 --> 00:02:45.821
Podemos somar 3
a cada elemento

00:02:45.854 --> 00:02:48.534
e subtrair 3 de cada.

00:02:48.567 --> 00:02:50.421
Podemos multiplicar
cada um por 3

00:02:50.454 --> 00:02:52.316
e dividir cada um por 3.

00:02:52.349 --> 00:02:53.761
Nos exemplos acima,

00:02:53.794 --> 00:02:56.105
o NumPy trabalha
nos bastidores

00:02:56.138 --> 00:02:59.274
para transmitir o 3
ao longo do array X

00:02:59.307 --> 00:03:01.681
para terem o mesmo formato.

00:03:01.714 --> 00:03:05.281
Assim podemos somar 3
a cada elemento do X

00:03:05.314 --> 00:03:07.018
com uma linha de código.

00:03:07.051 --> 00:03:10.347
Sujeito a certas restrições,
o NumPy pode fazer o mesmo

00:03:10.380 --> 00:03:13.115
com dois arrays
de formatos diferentes.

00:03:13.148 --> 00:03:16.315
Considere
este array 3 por 3, Y,

00:03:16.348 --> 00:03:19.074
e este array 1 por 3, X.

00:03:19.107 --> 00:03:21.843
Se fizemos Y + X,

00:03:21.876 --> 00:03:25.610
isto soma zero
à primeira coluna no Y,

00:03:25.827 --> 00:03:28.469
um à segunda coluna no Y

00:03:28.502 --> 00:03:31.557
e dois à terceira coluna
no Y.

00:03:31.590 --> 00:03:36.085
Como antes, o NumPy é capaz
de somar um array 1 por 3

00:03:36.118 --> 00:03:38.029
a um array 3 por 3

00:03:38.062 --> 00:03:42.237
ao transmitir o array menor
ao longo o array maior,

00:03:42.270 --> 00:03:44.581
para terem formatos
compatíveis.

00:03:44.614 --> 00:03:46.821
No geral,
o NumPy pode fazer isso

00:03:46.854 --> 00:03:50.573
se o array menor,
como o array 1 por 3,

00:03:50.606 --> 00:03:54.364
pode ser expandido para se encaixar
no formato do array maior,

00:03:54.397 --> 00:03:57.533
para que a transmissão resultante
não seja ambígua.

00:03:57.566 --> 00:04:00.813
Podemos fazer o mesmo
com o array 3 por 1.

00:04:00.846 --> 00:04:04.365
Isto soma zero
à primeira fileira do Y,

00:04:04.398 --> 00:04:07.188
um à segunda fileira do Y

00:04:07.221 --> 00:04:09.988
e dois à terceira fileira
do Y.

00:04:10.021 --> 00:04:12.357
Dê uma olhada
na documentação do NumPy

00:04:12.390 --> 00:04:15.100
para mais informações
sobre a transmissão e suas regras.

