WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.350
Up to now we've seen how to make slices and

00:00:03.350 --> 00:00:07.054
select elements of an NumPy array using indices.

00:00:07.054 --> 00:00:12.059
This is useful when we know the exact indices of the elements we want to select.

00:00:12.060 --> 00:00:14.370
However, there are many situations in

00:00:14.369 --> 00:00:17.149
which we don't know the indices of the elements we want.

00:00:17.149 --> 00:00:23.099
For example; Suppose we have a 10,000 by 10,000 array of random integers

00:00:23.100 --> 00:00:29.640
ranging from one to 15,000 and we only want to select integers that are less than 20.

00:00:29.640 --> 00:00:34.200
Boolean indexing can help us in these cases by helping us select

00:00:34.200 --> 00:00:38.870
elements using logical arguments instead of explicit indices.

00:00:38.869 --> 00:00:40.744
Let's see some examples.

00:00:40.744 --> 00:00:46.239
Consider this five by five array ranging from zero to 24.

00:00:46.240 --> 00:00:51.050
We can use boolean indexing to select elements greater than 10.

00:00:51.049 --> 00:00:54.029
Like this. Instead of indices,

00:00:54.030 --> 00:00:56.384
we are using a boolean expression.

00:00:56.384 --> 00:00:59.899
Let's also get the elements that are less than or equal to seven.

00:00:59.899 --> 00:01:04.500
And now both greater than seven and less than 17.

00:01:04.500 --> 00:01:08.269
We can use boolean indexing to assign the elements that are

00:01:08.269 --> 00:01:12.524
between 10 and 17 to the value of negative one.

00:01:12.525 --> 00:01:15.075
In addition to Boolean indexing,

00:01:15.075 --> 00:01:18.575
NumPy also allows for set operations.

00:01:18.575 --> 00:01:22.130
This is useful when comparing two NumPy arrays.

00:01:22.129 --> 00:01:24.814
For example, to find common elements.

00:01:24.814 --> 00:01:28.114
Consider these two rank one arrays.

00:01:28.114 --> 00:01:33.109
We can create arrays for the intersection, difference, and union.

00:01:33.109 --> 00:01:37.090
Like this. We can also sort NumPy arrays.

00:01:37.090 --> 00:01:42.975
Let's use NumPy sort function to sort rank one and rank two arrays in different ways.

00:01:42.974 --> 00:01:45.405
Like with other functions we saw before,

00:01:45.405 --> 00:01:48.555
the sort function can also be used as a method.

00:01:48.555 --> 00:01:53.550
However, there's a big difference on how the data is stored in memory in this case.

00:01:53.549 --> 00:01:56.099
When sort is used as a function,

00:01:56.099 --> 00:01:59.059
it sorts the NumPy array out of place,

00:01:59.060 --> 00:02:02.189
meaning they don't change the original array.

00:02:02.189 --> 00:02:04.890
However, when you use sort as a method,

00:02:04.890 --> 00:02:06.989
the array is sorted in place,

00:02:06.989 --> 00:02:10.049
meaning the original array is changed.

00:02:10.050 --> 00:02:12.870
Let's create an unsorted rank one array.

00:02:12.870 --> 00:02:16.240
We can sort x using sort as a function.

00:02:16.240 --> 00:02:20.980
This will sort x out of place and leave the original array as is.

00:02:20.979 --> 00:02:25.750
As you can see Numpy.sort did sort the x array,

00:02:25.750 --> 00:02:28.759
but x itself did not change.

00:02:28.759 --> 00:02:32.465
Notice that this sorts the array and leaves repeating values.

00:02:32.465 --> 00:02:35.590
If you want to sort only the unique elements in x,

00:02:35.590 --> 00:02:38.620
you can combine it with a unique function like this.

00:02:38.620 --> 00:02:45.254
Now, let's see how we can sort arrays in place by using sort as a method. Here's x again.

00:02:45.254 --> 00:02:47.144
If we sort x like this,

00:02:47.145 --> 00:02:50.975
we will see that this affects the original x and sorts it.

00:02:50.974 --> 00:02:53.074
When sorting rank two arrays,

00:02:53.074 --> 00:02:57.754
we need to tell the sort function whether we are sorting by rows or by columns.

00:02:57.754 --> 00:03:01.064
This is done by using the keyword axis.

00:03:01.064 --> 00:03:03.939
Here is an unsorted rank two array.

00:03:03.939 --> 00:03:07.050
We can sort x by rows like this,

00:03:07.050 --> 00:03:14.130
which you can see here or we can sort X by columns like this, which you can see up here.

