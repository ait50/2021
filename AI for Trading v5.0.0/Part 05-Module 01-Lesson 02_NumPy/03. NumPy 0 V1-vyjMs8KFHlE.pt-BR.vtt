WEBVTT
Kind: captions
Language: pt-BR

00:00:00.067 --> 00:00:03.133
NumPy é o termo usado
para Python numérico.

00:00:03.167 --> 00:00:04.833
É uma biblioteca
desenvolvida

00:00:04.867 --> 00:00:07.100
para computação científica
eficiente.

00:00:07.867 --> 00:00:11.000
Foi construída em cima
da linguagem de programação C,

00:00:11.033 --> 00:00:13.900
que trabalha em um nível
mais baixo do nosso computador.

00:00:14.333 --> 00:00:16.200
Para entender
o que isso significa

00:00:16.233 --> 00:00:18.167
para a velocidade
do nosso código,

00:00:18.200 --> 00:00:20.333
acesse o link
nas notas do instrutor.

00:00:20.733 --> 00:00:24.633
No núcleo do NumPy está
o objeto array N-dimensional.

00:00:24.667 --> 00:00:27.800
Esse é apenas
um array multidimensional

00:00:27.833 --> 00:00:31.467
que contém um grupo de elementos
com o mesmo tipo de dados.

00:00:32.100 --> 00:00:36.200
Ou seja, é como uma grade
que pode tomar vários formatos

00:00:36.233 --> 00:00:40.967
e que força todos os elementos
dessa grade a ter o mesmo tipo,

00:00:41.000 --> 00:00:45.000
sejam eles strings, floats,
booleanos ou outra coisa.

00:00:45.700 --> 00:00:47.733
Ao tornar os arrays
capazes de armazenar

00:00:47.767 --> 00:00:49.867
só um tipo de dados por vez

00:00:49.900 --> 00:00:52.767
ajuda o NumPy
a fazer computações rápidas

00:00:52.800 --> 00:00:55.000
com operações vetoriais.

00:00:55.033 --> 00:00:59.000
Esses arrays, dentre
outras funções úteis do NumPy,

00:00:59.033 --> 00:01:01.633
podem otimizar e simplificar
significativamente

00:01:01.667 --> 00:01:03.667
as operações de dados.

00:01:03.700 --> 00:01:06.433
Aqui está um exemplo simples
que demonstra isso.

00:01:06.767 --> 00:01:09.300
Primeiro,
vamos importar o NumPy

00:01:09.333 --> 00:01:12.700
com o nome padrão
para essa biblioteca de np.

00:01:13.100 --> 00:01:16.267
Isso gera um array
de 100 milhões de floats

00:01:16.300 --> 00:01:18.033
entre 0 e 1.

00:01:18.500 --> 00:01:20.300
Vamos comparar
quanto tempo leva

00:01:20.333 --> 00:01:22.600
para o Python simples
e para o NumPy

00:01:22.633 --> 00:01:25.333
para calcular
a média desse array.

00:01:25.800 --> 00:01:27.767
No Python padrão,
fazemos isso

00:01:27.800 --> 00:01:31.833
ao pegar a soma de X
e dividi-la pelo comprimento de X.

00:01:31.867 --> 00:01:33.500
É bem simples.

00:01:33.533 --> 00:01:35.333
Com o pacote de tempo,

00:01:35.367 --> 00:01:39.067
verificamos quanto tempo leva
para executar a linha de código.

00:01:39.100 --> 00:01:42.367
Está bem. Isso levou
cerca de 9,3 segundos.

00:01:42.700 --> 00:01:46.567
Faz sentido ter demorado ao
computar 100 milhões de valores.

00:01:46.600 --> 00:01:49.467
Agora vamos ver
quanto tempo leva o NumPy.

00:01:49.867 --> 00:01:52.267
Isso foi
absurdamente mais rápido.

00:01:52.300 --> 00:01:55.700
NumPy levou
somente 0,092 segundos,

00:01:55.733 --> 00:01:59.300
enquanto o Python padrão
levou 9,31 segundos.

00:01:59.333 --> 00:02:00.567
Como você viu,

00:02:00.600 --> 00:02:03.467
NumPy pode fazer a diferença
de ordens de magnitude

00:02:03.500 --> 00:02:05.367
em tempo de computação.

00:02:05.400 --> 00:02:08.067
Imagine o quanto
isso acelera o processo

00:02:08.100 --> 00:02:12.467
para situações mais complexas
que requerem mais cálculos.

00:02:12.500 --> 00:02:16.267
Por exemplo, digamos que estamos
desenvolvendo um recurso novo

00:02:16.300 --> 00:02:18.067
ou uma coluna
em um conjunto de dados,

00:02:18.100 --> 00:02:22.367
que computamos ao multiplicar
os valores de duas colunas

00:02:22.400 --> 00:02:26.267
e dividir pelos valores
em outra coluna para cada linha.

00:02:26.300 --> 00:02:27.500
Diferente do NumPy,

00:02:27.533 --> 00:02:32.000
o Python padrão exigiria um
loop longo por todas as linhas

00:02:32.033 --> 00:02:35.300
para computar o novo valor
para cada uma das linhas.

00:02:35.333 --> 00:02:37.633
Em muitos problemas
de aprendizado de máquina,

00:02:37.667 --> 00:02:41.767
você vai acabar usando arrays
de NumPy em várias situações.

00:02:41.800 --> 00:02:44.333
Por exemplo, você pode usar
um array NumPy

00:02:44.367 --> 00:02:46.833
para armazenar a posição
dos pixels de uma imagem

00:02:46.867 --> 00:02:50.300
que será alimentada a um modelo
de classificação de imagem.

00:02:50.333 --> 00:02:51.967
Depois também aprenderemos

00:02:52.000 --> 00:02:55.033
sobre um conhecido pacote
de ciência de dados, o Pandas,

00:02:55.067 --> 00:02:58.267
que é muito útil para manipular
conjuntos de dados.

00:02:58.300 --> 00:03:00.533
Ele foi construído
em cima do NumPy,

00:03:00.567 --> 00:03:03.467
por isso faz computações
tão rápidas.

00:03:03.500 --> 00:03:06.500
Agora que você aprendeu
sobre o poder do NumPy,

00:03:06.533 --> 00:03:07.700
vamos começar.

