WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.615
上个视频里

00:00:01.615 --> 00:00:04.969
我们学习了创建 NumPy 数组的方法

00:00:04.969 --> 00:00:08.699
即用 NumPy 函数 array

00:00:08.699 --> 00:00:11.019
转换 Python 列表等已有的类数组对象 从而进行创建

00:00:11.019 --> 00:00:14.929
但 NumPy 之所以能节省大量时间 原因之一就是

00:00:14.929 --> 00:00:19.515
它能从无到有地生成特定的 NumPy 数组

00:00:19.515 --> 00:00:21.420
全程只需使用一行代码

00:00:21.420 --> 00:00:27.865
现在我们来讲几种最实用的内置 NumPy 数组生成函数

00:00:27.864 --> 00:00:33.689
我们先创建一个由 0 组成的 NumPy 数组 并指定其形状属性 shape

00:00:33.689 --> 00:00:37.479
为此 我们可以用 NumPy 的函数 zeros

00:00:37.479 --> 00:00:42.929
函数参数就是你想生成的数组形状

00:00:42.929 --> 00:00:49.439
输入元组 (3 , 4) 我们就得到了一个由 0 组成的 3 x 4 数组

00:00:49.439 --> 00:00:54.494
这个数组的数据类型默认为 64 位浮点型

00:00:54.494 --> 00:00:57.204
如果想用其它数据类型

00:00:57.204 --> 00:01:00.329
可以用关键字 dtype 进行更改

00:01:00.329 --> 00:01:05.844
同理 我们可以用这个函数来创建由 1 组成的 NumPy 数组

00:01:05.844 --> 00:01:08.760
该函数的参数也是数组形状

00:01:08.760 --> 00:01:11.585
除了 ones 和 zeros

00:01:11.584 --> 00:01:17.649
还可以用函数 full 来创建由任意常数组成的数组

00:01:17.650 --> 00:01:19.850
函数需要两个参数

00:01:19.849 --> 00:01:23.859
一个是数组的形状 一个是你想填充的常数

00:01:23.859 --> 00:01:27.629
函数 full 创建的数组

00:01:27.629 --> 00:01:31.364
其数据类型默认与你输入的常数值一样

00:01:31.364 --> 00:01:35.814
由于这里用整数 5 作为输入常数

00:01:35.814 --> 00:01:40.409
所以生成的数组 dtype 为 64 位整数

00:01:40.409 --> 00:01:44.144
使用关键词 dtype 可以指定其它类型

00:01:44.144 --> 00:01:49.209
线性代数有一种基础数组叫单位矩阵

00:01:49.209 --> 00:01:52.994
矩阵这个术语

00:01:52.995 --> 00:01:56.665
其实指的就是横纵排列的二维数组

00:01:56.665 --> 00:01:58.760
单位矩阵

00:01:58.760 --> 00:02:03.465
其实就是一个方形的矩阵 其主对角线上的值都为 1

00:02:03.465 --> 00:02:05.730
其它位置的值则都为 0

00:02:05.730 --> 00:02:09.550
我们可以用 NumPy 的函数 eye 来创建该矩阵

00:02:09.550 --> 00:02:13.035
由于单位矩阵都是方形的

00:02:13.034 --> 00:02:16.490
所以只接受一个单精度整数参数

00:02:16.490 --> 00:02:20.850
输入 5 我们就得到了一个 5 x 5 的单位矩阵

00:02:20.849 --> 00:02:23.500
其从左上到右下的主对角线

00:02:23.500 --> 00:02:27.145
都填着 0

00:02:27.145 --> 00:02:32.610
我们还可以用 NumPy 的函数 diag 来生成对角矩阵

00:02:32.610 --> 00:02:36.530
这个函数的参数是一个数列

00:02:36.530 --> 00:02:40.534
用于填充方形矩阵的主对角线

00:02:40.534 --> 00:02:43.064
其余位置的值则为 0

00:02:43.064 --> 00:02:49.650
NumPy 还有其它实用函数 可生成位于特定数值范围的数组

00:02:49.650 --> 00:02:52.305
其中一个函数叫 arange

00:02:52.305 --> 00:02:58.415
用于创建位于给定区间的等差数组

00:02:58.414 --> 00:03:02.759
函数有三个参数 起始值、终止值和步长

00:03:02.759 --> 00:03:06.924
我们可以只指定一个参数

00:03:06.925 --> 00:03:09.150
也可以指定两个或三个参数

00:03:09.150 --> 00:03:11.080
我们逐个来讲

00:03:11.080 --> 00:03:13.895
只指定一个整数时

00:03:13.895 --> 00:03:17.120
函数 arange 会把这个整数看作终止参数

00:03:17.120 --> 00:03:22.405
生成一个范围在 0 和该整数减 1 之间的数组

00:03:22.405 --> 00:03:25.155
因为终止值不会包括在内

00:03:25.155 --> 00:03:27.314
所以范围需要减一

00:03:27.314 --> 00:03:34.280
比如 arange (10) 会生成一个范围在 0 到 10 - 1 之间的数组 也即范围在 0 到
9 之间的数组

00:03:34.280 --> 00:03:36.814
指定两个参数时

00:03:36.814 --> 00:03:40.175
arange 会用第一个参数作为起始值

00:03:40.175 --> 00:03:43.025
第二个参数作为终止值

00:03:43.025 --> 00:03:45.150
起始值包括在范围之内

00:03:45.150 --> 00:03:47.585
终止值则不包括在内

00:03:47.585 --> 00:03:53.110
所以 arange (4 , 10) 生成的数组范围在 4 到 9 之间

00:03:53.110 --> 00:03:55.420
指定三个参数时

00:03:55.419 --> 00:04:00.929
函数 arange 会生成一个数组 其范围在第一个整数与第二个整数减 1 的差之间

00:04:00.930 --> 00:04:03.260
其值与值的间隔则为第三个参数的值

00:04:03.259 --> 00:04:05.959
这第三个参数就是步长了

00:04:05.960 --> 00:04:09.875
即数组中任意两个相邻值的差

00:04:09.875 --> 00:04:14.949
如果像之前一样 在 arange 里只指定一个或两个参数

00:04:14.949 --> 00:04:17.444
步长会默认为 1

00:04:17.444 --> 00:04:22.969
虽然 NumPy 的函数 arange 允许非整数步长 比如 0.3

00:04:22.970 --> 00:04:28.775
但因为浮点数精度有限 所以输出往往不等差

00:04:28.774 --> 00:04:32.279
因此 如果想用非整数步长

00:04:32.279 --> 00:04:37.004
最好用别的 NumPy 函数 即 linspace

00:04:37.004 --> 00:04:41.189
该函数也有三个输入参数 起始值、终止值和 n

00:04:41.189 --> 00:04:48.454
函数会返回 n 个范围在起始值和终止值之间的等差数字

00:04:48.454 --> 00:04:51.734
其中起始值和终止值都包括在范围内

00:04:51.735 --> 00:04:57.720
与 arange 不同 linspace 需要至少两个参数 即起始值和终止值

00:04:57.720 --> 00:05:00.054
如果没有指定 n

00:05:00.053 --> 00:05:01.854
那 n 就默认为 50

00:05:01.855 --> 00:05:03.650
我们来看些例子

00:05:03.649 --> 00:05:09.789
这是个秩为 1 的数组 共有 10 个等差数值 范围在 0 到 25 之间

00:05:09.790 --> 00:05:15.665
注意 起始值和终止值都包含在数组中

00:05:15.665 --> 00:05:19.120
但如果你不想区间包含终止值

00:05:19.120 --> 00:05:22.704
就跟函数 arange 一样

00:05:22.704 --> 00:05:26.819
那你可以像这样设关键字 endpoint 为 False

00:05:26.819 --> 00:05:32.019
正如你所见 由于我们排除了终止值 25

00:05:32.019 --> 00:05:35.165
所以在给定区间中 10 个数值为了等差

00:05:35.165 --> 00:05:38.850
自动做出了调整

00:05:38.850 --> 00:05:45.605
到目前为止 我们只是用函数 arange 和 linspace 来创建秩为 1 的数组

00:05:45.605 --> 00:05:50.145
但这两个函数也可以创建秩为 2 且形状任意的数组

00:05:50.144 --> 00:05:54.854
我们只需将这两个函数与 NumPy 函数 reshape 结合使用即可

00:05:54.855 --> 00:05:59.340
函数 reshape 能将任意 NumPy 数组转换为特定的形状

00:05:59.339 --> 00:06:03.219
注意 这里指定的新形状

00:06:03.220 --> 00:06:07.195
应与数组的元素数目兼容

00:06:07.194 --> 00:06:10.745
比如 你可以把具备 20 个元素且秩为 1 的数组转换为

00:06:10.745 --> 00:06:15.060
秩为 2 的 4 x 5 数组

00:06:15.060 --> 00:06:18.444
或秩为 2 的 10 x 2 数组

00:06:18.444 --> 00:06:23.014
因为这两个秩为 2 的数组仍然有 20 个元素

00:06:23.014 --> 00:06:28.294
但你不能把数组的形状改成 5 x 5

00:06:28.295 --> 00:06:32.270
因为秩为 2 的 5 x 5 数组有 25 个元素

00:06:32.269 --> 00:06:36.384
比原始 NumPy 数组的元素数目多

00:06:36.384 --> 00:06:42.634
NumPy 有一个优点是 有些函数还能当方法用

00:06:42.634 --> 00:06:46.259
因而我们可以在一行代码里

00:06:46.259 --> 00:06:47.935
接连使用不同的函数

00:06:47.935 --> 00:06:50.810
NumPy 的数组方法与

00:06:50.810 --> 00:06:55.110
其属性类似 使用时也要用 “ . ”

00:06:55.110 --> 00:07:01.455
我们来看怎么用一行代码取得这个例子的效果

00:07:01.454 --> 00:07:03.664
这效果是一样的

00:07:03.665 --> 00:07:06.625
注意 在将 reshape 当方法用时

00:07:06.625 --> 00:07:10.204
我们不需要把数组当参数输入进去

00:07:10.204 --> 00:07:17.714
同理 我们可以用函数 linspace 和方法 reshape 来创建秩为 2 的数组

00:07:17.714 --> 00:07:23.589
最后 我们要创建一些包含随机数的 NumPy 数组

00:07:23.589 --> 00:07:25.694
在机器学习中

00:07:25.694 --> 00:07:28.165
经常有需要创建随机矩阵的时候

00:07:28.165 --> 00:07:31.980
比如初始化神经网络的权重

00:07:31.980 --> 00:07:34.030
NumPy 提供了许多随机函数

00:07:34.029 --> 00:07:38.564
供我们创建任意形状的随机 NumPy 数组

00:07:38.564 --> 00:07:44.079
我们先用 NumPy 函数 random 生成一个给定形状的随机浮点数数组

00:07:44.079 --> 00:07:47.245
其范围在 0 和 1 之间

00:07:47.245 --> 00:07:49.235
其中 0 包含在范围内

00:07:49.235 --> 00:07:51.314
1 则不包含在内

00:07:51.314 --> 00:07:55.064
这个函数 random 以及接下来要介绍的其它函数

00:07:55.064 --> 00:07:58.240
都包含在 NumPy 的 random 模块中

00:07:58.240 --> 00:08:02.430
所以我们要输入 np.random 来访问该模块

00:08:02.430 --> 00:08:06.655
再输入 .random 来访问模块里的函数

00:08:06.654 --> 00:08:09.884
我们还能用 NumPy 创建

00:08:09.884 --> 00:08:13.764
位于特定区间内的随机整数 NumPy 数组

00:08:13.764 --> 00:08:17.464
为此 我们可以用函数 randint

00:08:17.464 --> 00:08:20.924
该函数接受三个参数 下限 (闭区间)

00:08:20.925 --> 00:08:23.400
上限 (开区间)

00:08:23.399 --> 00:08:25.794
以及形状

00:08:25.795 --> 00:08:29.605
有时候 你要创建的 NumPy 数组

00:08:29.605 --> 00:08:33.960
其随机数得具备特定的统计属性

00:08:33.960 --> 00:08:39.825
比如 数组随机数的平均值应为 0

00:08:39.825 --> 00:08:42.900
NumPy 允许你创建

00:08:42.899 --> 00:08:46.350
从各种概率分布取值的随机数组

00:08:46.350 --> 00:08:50.379
比如 函数 np.random.normal

00:08:50.379 --> 00:08:53.279
在创建给定形状的数组时

00:08:53.279 --> 00:08:56.814
会从具有给定平均值和标准差的正态分布中

00:08:56.815 --> 00:08:59.750
随机取值

00:08:59.750 --> 00:09:03.690
这样就创建了一个 1000 x 1000 的随机浮点数数组

00:09:03.690 --> 00:09:08.420
其数值取自平均值为 0

00:09:08.419 --> 00:09:11.659
标准差为 0.1 的正态分布

00:09:11.659 --> 00:09:17.844
正如我们所见 数组随机数的平均值非常接近 0

00:09:17.845 --> 00:09:22.504
标准差也非常接近 0.1

00:09:22.504 --> 00:09:28.509
下面的最大值和最小值也相当对称 加起来很接近平均值 0

00:09:28.509 --> 00:09:32.730
而且正整数和负整数的数目也差不多

