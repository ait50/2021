WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.019
通常来讲 要创建 NumPy 数组有两种办法

00:00:04.019 --> 00:00:08.239
第一种 用 NumPy 的数组函数

00:00:08.240 --> 00:00:12.955
借助 Python 常规列表等类数组对象进行创建

00:00:12.955 --> 00:00:15.875
第二种 使用各种 NumPy 内置函数

00:00:15.875 --> 00:00:20.820
快速生成特定类型的数组

00:00:20.820 --> 00:00:24.480
本节先讲第一种办法

00:00:24.480 --> 00:00:28.490
导入 NumPy 创建第一个数组

00:00:28.489 --> 00:00:32.924
这是个一维整数数组

00:00:32.924 --> 00:00:34.774
注意 为了授课方便

00:00:34.774 --> 00:00:39.280
课程会用简单的小数组作为例子

00:00:39.280 --> 00:00:44.710
我们先创建一维 NumPy 数组 也就是 1D 数组

00:00:44.710 --> 00:00:47.064
把刚才创建的数组

00:00:47.064 --> 00:00:48.479
及其类型输出出来

00:00:48.479 --> 00:00:54.359
可以看到类型是 numpy.ndarray 也就是 n 维数组

00:00:54.359 --> 00:00:57.649
NumPy 的数组有些很实用的属性

00:00:57.649 --> 00:01:00.929
为我们提供了一些很直观的信息

00:01:00.929 --> 00:01:03.740
比如这个属性 dtype

00:01:03.740 --> 00:01:07.825
dtype 会返回数组元素的数据类型

00:01:07.825 --> 00:01:13.689
注意 dtype 和数组本身的数据类型不同

00:01:13.689 --> 00:01:17.564
dtype 告诉我们的是

00:01:17.564 --> 00:01:21.670
元素 x 在 ndarray 中存放的是有符号的 64 位整数

00:01:21.670 --> 00:01:27.365
可以处理的数据类型比 Python 多 是NumPy 的另一个优势

00:01:27.364 --> 00:01:32.858
想了解 NumPy 支持的所有数据类型 请查看相关文献

00:01:32.858 --> 00:01:35.479
形状 shape 是 NumPy 的另一实用属性

00:01:35.480 --> 00:01:40.385
该属性会返回一个由 n 个正整数组成的元组

00:01:40.385 --> 00:01:45.795
说明数组每个维度的大小 其中 n 为数组的维数

00:01:45.795 --> 00:01:48.109
x 只有一个维度

00:01:48.109 --> 00:01:53.344
所以 shape 返回了一个整数 指明数组的长度为 5

00:01:53.344 --> 00:01:56.334
如果数组是二维的

00:01:56.334 --> 00:02:00.719
那属性 shape 会返回一个由两个值组成的元组

00:02:00.719 --> 00:02:05.250
一个值指行数 另一个指列数

00:02:05.250 --> 00:02:10.349
我们来用嵌套的 Python 列表 创建一个二维数组 看看具体是怎么样的

00:02:10.349 --> 00:02:13.079
这个数组由整数组成

00:02:13.080 --> 00:02:16.395
我们还要输出一个属性 size

00:02:16.395 --> 00:02:19.135
观察 shape 返回的元组

00:02:19.134 --> 00:02:23.554
由于其中有两个元素 所以 Y 有两个维度

00:02:23.555 --> 00:02:28.629
一个是第一维度的大小 也就是行数 为 4

00:02:28.629 --> 00:02:32.655
另一个是第二维度的大小

00:02:32.655 --> 00:02:35.254
也就是列数 为 3

00:02:35.254 --> 00:02:40.875
属性 size 则告诉我们 Y 总共有 12 个元素

00:02:40.875 --> 00:02:44.985
我们先来讲些重要的术语

00:02:44.985 --> 00:02:51.190
通常 我们说 n 维数组有 n 秩

00:02:51.189 --> 00:02:54.849
所以我们称刚才创建的一维数组有 1 个秩

00:02:54.849 --> 00:03:02.079
称刚才创建的二维数组有 2 个秩

00:03:02.080 --> 00:03:03.710
接下来

00:03:03.710 --> 00:03:07.960
我们要创建一个秩为 1 的字符串数组

00:03:07.960 --> 00:03:11.224
输出上述属性

00:03:11.224 --> 00:03:15.639
数组对象本身的类型没有变化

00:03:15.639 --> 00:03:17.594
仍然是 NumPy 数组

00:03:17.594 --> 00:03:20.984
但数组的 dtype 则不同了

00:03:20.985 --> 00:03:25.765
这里元素以 unicode 字符串的形式存储着 该字符串由五个字符组成

00:03:25.764 --> 00:03:28.474
注意 创建数组时

00:03:28.474 --> 00:03:31.310
NumPy 会自动

00:03:31.310 --> 00:03:35.400
根据数组创建元素的类型来给 dtype 赋值

00:03:35.400 --> 00:03:38.694
但如果我们用列表创建一个

00:03:38.694 --> 00:03:42.824
同时包含整数和字符串的 NumPy 数组呢？

00:03:42.824 --> 00:03:47.424
我们会发现 虽然 Python 列表有多种数据类型

00:03:47.425 --> 00:03:54.575
函数 array 创建出来的 NumPy 数组会让元素保持相同的数据类型

00:03:54.574 --> 00:03:57.354
也即由 21 个字符组成的 unicode 字符串

00:03:57.354 --> 00:03:59.959
记住 与 Python 列表不同

00:03:59.960 --> 00:04:03.920
NumPy 数组元素的数据类型必须一致

00:04:03.919 --> 00:04:08.500
到目前为止 我们只用了整数和字符串元素

00:04:08.500 --> 00:04:14.485
我们再来看一个混合数据类型的例子 这次用整数和浮点数

00:04:14.485 --> 00:04:18.620
当我们输入一个既有整数也有浮点数的列表时

00:04:18.620 --> 00:04:20.910
NumPy 将所有元素的 dtype

00:04:20.910 --> 00:04:23.160
设为 64 位浮点型

00:04:23.160 --> 00:04:25.720
这就叫向上转型

00:04:25.720 --> 00:04:30.285
由于 NumPy 数组中的所有元素必须具备相同类型

00:04:30.285 --> 00:04:33.790
所以 NumPy 会将数组里的整数向上转型为浮点数

00:04:33.790 --> 00:04:38.740
以免影响数值计算的准确性

00:04:38.740 --> 00:04:41.400
你还可以用 NumPy 指定

00:04:41.399 --> 00:04:45.764
数组元素的 dtype

00:04:45.764 --> 00:04:50.699
只需在函数 array 里用关键字 dtype 即可

00:04:50.699 --> 00:04:53.995
你可以看到 这里 NumPy 生成了一个整数数组

00:04:53.995 --> 00:04:57.800
而我们输入的列表数据是浮点型的

00:04:57.800 --> 00:05:00.530
指定 NumPy 数组元素的数据类型

00:05:00.529 --> 00:05:05.359
能避免不小心

00:05:05.360 --> 00:05:09.045
选到错误的数据类型

00:05:09.045 --> 00:05:13.379
如果比起计算准确性 你更想节省内存 那你也可以指定数据类型

00:05:13.379 --> 00:05:15.439
创建好 NumPy 数组

00:05:15.439 --> 00:05:21.279
你可能想将其保存到文档中 以便稍后读取或导入其它程序里

00:05:21.279 --> 00:05:26.484
要将数组保存到文档中以备后用 可用 NumPy 提供的一种方法

00:05:26.485 --> 00:05:30.545
我们可以像这样把 x 存储到当前目录下

00:05:30.545 --> 00:05:35.420
这样就可以把数组存储到文档 my_array.npy 中了

00:05:35.420 --> 00:05:43.080
稍后你可以用函数 load 将文档加载到变量里 就像这样

