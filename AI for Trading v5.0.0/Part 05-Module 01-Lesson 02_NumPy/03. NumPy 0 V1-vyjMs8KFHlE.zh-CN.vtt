WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.589
NumPY 是 Numerical Python 的缩写

00:00:03.589 --> 00:00:07.549
其实就是一个库 用于高效的科学计算

00:00:07.549 --> 00:00:10.884
其底层代码是 C 编程语言

00:00:10.884 --> 00:00:13.919
该语言为计算机的底层代码

00:00:13.919 --> 00:00:17.969
想知道这对提高代码速度有何意义

00:00:17.969 --> 00:00:20.384
请查看讲师注释里的链接

00:00:20.385 --> 00:00:22.170
NumPy 的核心

00:00:22.170 --> 00:00:24.740
是 N 维数组对象

00:00:24.739 --> 00:00:28.139
该对象本质是一个多维数列

00:00:28.140 --> 00:00:31.855
由一组具备相同数据类型的元素组成

00:00:31.855 --> 00:00:35.170
换句话说 这个数列有点像一个网格

00:00:35.170 --> 00:00:40.725
网格可以有多种形状 会使其内的所有元素保持相同的类型

00:00:40.725 --> 00:00:43.304
无论是字符串、浮点数

00:00:43.304 --> 00:00:45.405
布尔值等 都是如此

00:00:45.405 --> 00:00:49.719
这种让数组一次只能容纳一种数据类型的特性

00:00:49.719 --> 00:00:54.695
允许 NumPy 可以进行向量运算 因而 NumPy 的计算速度很快

00:00:54.695 --> 00:00:58.719
这些数组加上许多实用的 NumPy 函数

00:00:58.719 --> 00:01:03.509
大幅优化并简化了数据操作

00:01:03.509 --> 00:01:06.640
举个简单的例子

00:01:06.640 --> 00:01:12.765
首先 用标准缩写 np 导入 NumPy

00:01:12.765 --> 00:01:18.204
这会生成一个数组 数组由 1 亿个在 0 和 1 之间的浮点数组成

00:01:18.204 --> 00:01:21.340
我们来比较 Python

00:01:21.340 --> 00:01:25.359
和 NumPy 计算该数组平均数的耗时

00:01:25.359 --> 00:01:28.799
用 Python 求平均数

00:01:28.799 --> 00:01:33.349
我们可以先求 x 的总和 然后将其除以 x 的长度 很简单吧

00:01:33.349 --> 00:01:35.319
使用包 time

00:01:35.319 --> 00:01:39.034
我们可以查看这段代码的运行时长

00:01:39.034 --> 00:01:42.420
大概是 9.3 秒

00:01:42.420 --> 00:01:46.335
毕竟有 1 亿个值 这么久也不奇怪

00:01:46.334 --> 00:01:49.534
现在来看 NumPy 需要多久

00:01:49.534 --> 00:01:52.140
简直快得不可思议

00:01:52.140 --> 00:01:55.795
NumPy 只花了 0.092 秒

00:01:55.795 --> 00:01:58.960
而纯 Python 花了 9.31 秒

00:01:58.959 --> 00:02:05.119
正如你所见 NumPy 在计算速度上有着数量级的优势

00:02:05.120 --> 00:02:08.420
想象一下

00:02:08.419 --> 00:02:12.604
如果遇到更复杂的情况 需要更大的计算量 NumPy 能提高多少效率啊

00:02:12.604 --> 00:02:17.929
假设我们要在数据集里求一个新特征 也就是要新建一列

00:02:17.930 --> 00:02:21.400
你需要计算两列的乘积

00:02:21.400 --> 00:02:26.105
再将乘积除以另一列每行的值

00:02:26.104 --> 00:02:29.199
不像 NumPy

00:02:29.199 --> 00:02:31.310
纯 Python 需要用一个非常长的循环

00:02:31.310 --> 00:02:35.310
才能遍历所有行 计算出每一行的新值

00:02:35.310 --> 00:02:37.490
很多机器学习问题

00:02:37.490 --> 00:02:41.710
有很多场合都要使用 NumPy 数组

00:02:41.710 --> 00:02:44.750
比如 你可能会用 NumPy 数组

00:02:44.750 --> 00:02:50.025
来存放某个图像的像素值 以便将其传递给图像分类模型

00:02:50.025 --> 00:02:54.155
稍后我们还会介绍一个常用的数据科学包 Pandas

00:02:54.155 --> 00:02:58.134
这个包很擅长处理数据集

00:02:58.134 --> 00:03:00.364
实际上 Pandas 的底层用了 NumPy

00:03:00.365 --> 00:03:03.295
这是它计算速度那么快的秘诀

00:03:03.294 --> 00:03:08.000
既然你已经初步了解 NumPy 的威力了 让我们正式开始吧

