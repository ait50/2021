WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.214
现在你已经知道要怎么创建不同的 NumPy 数组了

00:00:04.214 --> 00:00:09.320
我们来看怎么用 NumPy 高效处理数据

00:00:09.320 --> 00:00:11.620
NumPy 数组是可变的

00:00:11.619 --> 00:00:16.899
也就是说 数组创建完毕后 其中的元素还可以更改

00:00:16.899 --> 00:00:20.824
NumPy 的数组还有多种切片方式

00:00:20.824 --> 00:00:24.844
方便我们获取任意数组子集

00:00:24.844 --> 00:00:27.564
切片常用于分离数据

00:00:27.565 --> 00:00:31.315
比如把数据集分割成训练集

00:00:31.315 --> 00:00:33.765
交叉验证集和测试集

00:00:33.765 --> 00:00:36.410
我们先来看

00:00:36.409 --> 00:00:41.259
怎么用索引访问或修改 NumPy 数组的元素

00:00:41.259 --> 00:00:46.344
首先 创建一个秩为 1 的数组 该数组包含 1 到 5 五个整数

00:00:46.344 --> 00:00:49.129
要访问元素

00:00:49.130 --> 00:00:52.740
我们可以在方括号里填写索引 从而指定其位置

00:00:52.740 --> 00:00:57.920
正索引指定的位置是从数组开头开始数起的

00:00:57.920 --> 00:01:01.230
注意 访问数组的第一个元素

00:01:01.229 --> 00:01:04.750
要用的索引是 0 而不是 1

00:01:04.750 --> 00:01:10.620
我们也可以用负索引来指定从数组末端往回数的位置

00:01:10.620 --> 00:01:16.890
注意 同一个元素既可以用正整数访问 也可以用负整数访问

00:01:16.890 --> 00:01:19.840
重申一遍 正索引

00:01:19.840 --> 00:01:23.140
用于访问从数组开头数起的元素

00:01:23.140 --> 00:01:28.055
而负索引用于访问从数组末端往回数起的元素

00:01:28.055 --> 00:01:32.545
现在 我们来看怎么修改数组里的元素

00:01:32.545 --> 00:01:36.230
要实现该操作 我们得访问要修改的元素

00:01:36.230 --> 00:01:39.195
然后用等号为其重新赋值

00:01:39.194 --> 00:01:42.319
现在来修改我们刚创建的数组 x

00:01:42.319 --> 00:01:47.614
我们可以把 x 的第四个元素从 4 改为 20

00:01:47.614 --> 00:01:53.369
我们也可以访问并修改秩为 2 的 NumPy 数组的特定元素

00:01:53.370 --> 00:01:56.090
唯一的区别在于

00:01:56.090 --> 00:02:00.424
我们需要在方括号内提供两个索引 索引之间以逗号隔开

00:02:00.424 --> 00:02:04.899
这是个 3 x 3 整数矩阵 其元素为 1 到 9

00:02:04.900 --> 00:02:07.675
我们来访问数组的一些元素

00:02:07.674 --> 00:02:09.719
记住 [0 , 0]

00:02:09.719 --> 00:02:16.169
指的是第一列第一行的元素 也就是 1

00:02:16.169 --> 00:02:21.024
要修改秩为 2 的数组的元素 方法也是一样的

00:02:21.025 --> 00:02:23.469
我们可以把 x 里 [0 , 0] 上的元素

00:02:23.469 --> 00:02:28.574
像这样从 1 改为 20

00:02:28.574 --> 00:02:33.109
知道了如何访问和修改数组里的元素

00:02:33.110 --> 00:02:37.035
现在我们来看怎么添加和删除元素

00:02:37.034 --> 00:02:40.655
要删除元素 我们可以用 NumPy 的函数 delete

00:02:40.655 --> 00:02:43.300
该函数接受的参数有一个数组

00:02:43.300 --> 00:02:45.335
要删除的索引列表

00:02:45.335 --> 00:02:47.445
以及要删除的轴

00:02:47.444 --> 00:02:49.239
秩为 1 的数组

00:02:49.240 --> 00:02:51.625
不需要输入轴的关键字 axis

00:02:51.625 --> 00:02:53.520
秩为 2 的数组

00:02:53.520 --> 00:02:59.830
设 axis 为 0 则选中行 设 axis 为 1 则选中列

00:02:59.830 --> 00:03:01.435
我们来看一些例子

00:03:01.435 --> 00:03:03.550
这是个秩为 1 的数组

00:03:03.550 --> 00:03:08.015
像这样就可以删除 x 的第一个和最后一个元素了

00:03:08.014 --> 00:03:10.799
这是个秩为 2 的数组

00:03:10.800 --> 00:03:14.760
像这样就可以删除 Y 的第一列和最后一列了

00:03:14.759 --> 00:03:19.939
我们可以用函数 append 来给 NumPy 数组追加值

00:03:19.939 --> 00:03:22.939
该函数接受的参数有一个数组

00:03:22.939 --> 00:03:25.340
要追加的元素列表

00:03:25.340 --> 00:03:27.664
以及要追加元素的轴

00:03:27.664 --> 00:03:29.724
我们来看一些例子

00:03:29.724 --> 00:03:35.104
我们可以像这样给秩为 1 的数组追加元素 6

00:03:35.104 --> 00:03:37.724
我们也可以追加多个元素

00:03:37.724 --> 00:03:41.155
比如像这样 输入由 7 和 8 组成的列表

00:03:41.155 --> 00:03:43.564
对于秩为 2 的数组

00:03:43.564 --> 00:03:46.734
我们可以追加一个由

00:03:46.735 --> 00:03:49.270
10、11、12 组成的新行 就像这样

00:03:49.270 --> 00:03:52.400
也可以追加一个由

00:03:52.400 --> 00:03:54.490
10、11、12 组成的新列 像这样

00:03:54.490 --> 00:03:59.150
注意 在给秩为 2 的 NumPy 数组追加行或列时

00:03:59.150 --> 00:04:04.765
新行或新列的形状必须和数组形状相符

00:04:04.764 --> 00:04:08.939
现在我们来看怎么将值插入 NumPy 数组中

00:04:08.939 --> 00:04:11.454
我们可以用函数 insert

00:04:11.455 --> 00:04:13.425
该函数的参数有 一个数组

00:04:13.425 --> 00:04:16.439
索引、元素和轴

00:04:16.439 --> 00:04:20.819
要插入的元素会出现在

00:04:20.819 --> 00:04:25.654
给定索引之前、给定轴之上 这是个秩为 1 的数组

00:04:25.654 --> 00:04:33.214
我们可以像这样把 3 和 4 插到 2 和 5 这两个元素之间

00:04:33.214 --> 00:04:36.194
对于这个秩为 2 的数组

00:04:36.194 --> 00:04:41.555
我们可以像这样在第一行和最后一行之间插入一行

00:04:41.555 --> 00:04:49.350
或者在第一列和第二列之间插入一个元素都为 5 的列 像这样

00:04:49.350 --> 00:04:56.990
NumPy 还能堆叠 NumPy 数组 堆叠可以是垂直的 也可以是水平的

00:04:56.990 --> 00:05:01.550
用 NumPy 的函数 vstack 可以进行垂直堆叠

00:05:01.550 --> 00:05:06.250
用 hstack 可以进行水平堆叠

00:05:06.250 --> 00:05:09.785
注意 数组堆叠时

00:05:09.785 --> 00:05:12.535
形状必须匹配

00:05:12.535 --> 00:05:17.675
我们来看这个秩为 1 的数组 x 和秩为 2 的数组 Y

00:05:17.675 --> 00:05:24.600
我们可以像这样用 vstack 把 x 堆叠在 Y 上

00:05:24.600 --> 00:05:30.700
也可以像这样用 hstack 把 x 堆叠到 Y 的右边

00:05:30.699 --> 00:05:37.469
但是在水平堆叠之前 我们要调整 x 的形状 使其与 Y 的形状相匹配

