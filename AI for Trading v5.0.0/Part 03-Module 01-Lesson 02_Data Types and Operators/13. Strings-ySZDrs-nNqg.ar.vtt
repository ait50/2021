WEBVTT
Kind: captions
Language: ar

00:00:04.271 --> 00:00:08.775
كثيراً ما تنطوي البرمجة على ما هو
أكثر من مجرد أرقام وعمليات حسابية.

00:00:08.876 --> 00:00:12.513
قد تكون هناك حالات
تحتاج فيها إلى التعامل مع النصوص.

00:00:12.613 --> 00:00:16.817
للتعامل مع النصوص في Python
ستحتاج إلى استخدام string،

00:00:16.917 --> 00:00:20.721
وهي سلسة مرتبة لا تقبل التغيير من الحروف.

00:00:20.821 --> 00:00:24.291
سأحدثك أكثر
عن كونها مرتّبة لا تقبل التغيير لاحقاً.

00:00:24.391 --> 00:00:27.261
يمكنك إنشاء سلسلة "string"
باستخدام علامات التنصيص.

00:00:27.361 --> 00:00:30.697
علامات التنصيص الفردية أو المزدوجة
كلتاهما تفيان بالغرض بالقدر نفسه،

00:00:30.797 --> 00:00:34.301
إلا أن هناك
بعض الحالات الاستثنائية التي سنتناولها.

00:00:34.401 --> 00:00:41.475
في كل واحدة من هذه الحالات، طبعتُ السلسلة
"hello" وحصلتُ على النتيجة "hello".

00:00:41.575 --> 00:00:46.880
يمكننا إسناد سلسلة إلى متغيّر بالطريقة
ذاتها التي فعلنا بها ذلك مع الأرقام.

00:00:46.980 --> 00:00:53.220
يمكن للسلاسل أن تضم أي رمز،
حتى المسافات وعلامات الترقيم والأرقام.

00:00:53.320 --> 00:00:58.759
لكن ماذا نفعل إذا أردنا
كتابة علامة تنصيص داخل السلسلة؟

00:00:58.859 --> 00:01:01.995
بما أننا نستخدم علامات التنصيص
لتعريف السلاسل،

00:01:02.095 --> 00:01:04.398
فهذا يشكل مشكلة صغيرة.

00:01:04.498 --> 00:01:08.302
هنا، لا يعمل الكود بالطريقة التي نريد.

00:01:08.402 --> 00:01:12.472
تتيح Python حلّين لهذه المشكلة.

00:01:12.573 --> 00:01:19.112
الأولى هي وضع النص داخل علامات تنصيص
منفردة بدلاً من المزدوجة، هكذا.

00:01:19.213 --> 00:01:23.750
يمكنك استخدام أي النوعين
من علامات التنصيص لتعريف السلسلة،

00:01:23.851 --> 00:01:30.724
لكن أحياناً ستحتاج إلى تعريف سلسلة تشتمل
على علامات التنصيص الفردية والمزدوجة معاً.

00:01:30.824 --> 00:01:33.126
ماذا عسانا نفعل آنذاك؟ في تلك الحالة،

00:01:33.227 --> 00:01:36.930
يمكنك استخدام الشرطة المائلة للخلف
لإلغاء عمل علامة التنصيص.

00:01:37.030 --> 00:01:40.934
السلسلة هنا محدّدة
باستخدام علامات التنصيص الفردية.

00:01:41.034 --> 00:01:45.739
يسبق علامة التنصيص الفردية
التي داخل السلسلة النصية شرطة مائلة للخلف

00:01:45.839 --> 00:01:49.343
حتى تعرف Python
أنه يجب اعتبارها جزء من السلسلة

00:01:49.443 --> 00:01:53.080
بدلاً من علامة تنصيص التي تنهي السلسلة.

00:01:53.180 --> 00:01:55.516
بعد تعريف سلاسلنا،

00:01:55.616 --> 00:02:00.287
فإن هناك بعض العمليات المستخدمة
في التعامل مع النوعين int و float

00:02:00.387 --> 00:02:03.357
والتي يمكننا استخدامها أيضاً
في التعامل مع نوع السلسلة string.

00:02:03.457 --> 00:02:07.728
مثلاً، يمكننا استخدام
علامة الجمع "+" لدمج السلاسل،

00:02:07.828 --> 00:02:11.532
ويمكننا استخدام
إشارة الضرب "*" لتكرار السلسلة.

00:02:11.632 --> 00:02:14.568
دعونا نطلع على مثال على كل منهما.

00:02:14.668 --> 00:02:18.405
هنا يحوي المتغيّرين كلمتين.

00:02:18.505 --> 00:02:24.878
يمكننا استخدام إشارة الزائد "+" لدمج
السلسلتين في سلسلة جديدة وطباعة النتيجة.

00:02:24.978 --> 00:02:28.815
وهذا مختلف اختلافاً جوهرياً
عن الجمع أو الإضافة الرقمية.

00:02:28.916 --> 00:02:32.920
لكن لاحظ أن الاسمين متقاربان جداً،

00:02:33.020 --> 00:02:34.988
فلم يتم ترك مسافة بينهما.

00:02:35.088 --> 00:02:38.959
تتعامل لغة Python
بحرفية تامة عند التعامل مع السلاسل.

00:02:39.059 --> 00:02:43.030
علينا أن نضيف المسافات
وعلامات الترقيم بشكل صريح

00:02:43.130 --> 00:02:45.899
إذا أردنا لما نكتبه أن يبدو منطقياً.

00:02:45.999 --> 00:02:49.469
حصلنا هذه المرة على سلسلة نصية منطقية،

00:02:49.570 --> 00:02:53.874
حيث دمجنا الكلمتين
وجعلنا بينهما مسافة فاصلة.

00:02:53.974 --> 00:02:57.544
قلتُ سابقاً أن المسافات الفاصلة لا تؤثر

00:02:57.644 --> 00:03:01.849
بين الأقواس في التعليمات البرمجية
مثل أوامر print.

00:03:01.949 --> 00:03:05.986
أما هنا ونحن نتعامل مع السلاسل،
نرى أن المسافات تؤثر فعلاً

00:03:06.086 --> 00:03:09.156
فيما بين علامات التنصيص.

00:03:09.256 --> 00:03:12.893
لنجرّب عملية رياضية أخرى.

00:03:12.993 --> 00:03:16.730
يتضح أن بإمكاننا
استخدام إشارة الضرب كذلك.

00:03:16.830 --> 00:03:20.467
فيه تكرر السلسلة بعدد مرات العدد المضروب.

00:03:20.567 --> 00:03:22.870
وهو هنا خمس مرات.

00:03:22.970 --> 00:03:27.541
رغم أن الجمع والضرب لهما تطبيقات مختلفة
عند استخدامهما مع السلاسل،

00:03:27.641 --> 00:03:30.644
إلا أن الطرح والقسمة لا يمكن استخدامهما.

00:03:30.744 --> 00:03:37.251
هنا نتلقى رسالة خطأ مفاده أن string هو نوع
بيانات غير مدعوم من قبل عامل تشغيل القسمة.

00:03:37.351 --> 00:03:40.287
من الدوال المفيدة المضمنة في Python

00:03:40.387 --> 00:03:44.691
دالة len، وهي تخبرنا بطول السلسلة.

00:03:44.791 --> 00:03:48.128
وأعني بذلك عدد الأحرف داخل السلسلة.

00:03:48.228 --> 00:03:51.899
len شبيهة بـ print
من حيث أنها دالة مضمنة في Python

00:03:51.999 --> 00:03:56.837
تتلقى قيمة داخل قوسين لتقوم بتنفيذ إجراء.

00:03:56.937 --> 00:04:03.510
تختلف len عن print من حيث
أنها تُرجع قيمة يمكن تخزينها في متغيّر.

00:04:03.610 --> 00:04:08.148
في هذا المثال، تُنتج دالة len الرقم 7،

00:04:08.248 --> 00:04:11.685
والذي يتم تخزينه في المتغير
udacity_length.

00:04:11.785 --> 00:04:16.557
كلمة "مضمنة" تعني فحسب
أن Python توفر هذه الدوال لنا.

00:04:16.657 --> 00:04:19.793
فيما بعد سنتعلم كيف نُعرف دوالنا الخاصة.

