WEBVTT
Kind: captions
Language: zh-CN

00:00:01.690 --> 00:00:07.060
Python 提供了另一个实用容器 叫做元组

00:00:07.059 --> 00:00:11.304
元组用于存储相关的信息

00:00:11.304 --> 00:00:17.911
它是 Python 中不可变的有序数据结构

00:00:17.911 --> 00:00:22.379
这个示例包含纬度和经度

00:00:22.379 --> 00:00:24.744
元组和列表相似

00:00:24.745 --> 00:00:26.929
它们都存储有序的对象集合

00:00:26.929 --> 00:00:30.170
可以通过索引访问这些对象

00:00:30.170 --> 00:00:34.340
例如位置 0 和位置 1

00:00:34.340 --> 00:00:38.405
但是和列表不同的是 元组不可变

00:00:38.405 --> 00:00:43.524
你无法向元组中添加项目或从中移除项目 也无法对其直接排序

00:00:43.524 --> 00:00:47.894
如果元组很像列表 但是具有更少的功能 为何还要使用元组？

00:00:47.895 --> 00:00:51.450
当你有两个或多个紧密相关的值 它们始终会一起使用时

00:00:51.450 --> 00:00:55.170
元组就很有用

00:00:55.170 --> 00:00:58.010
例如纬度和经度坐标

00:00:58.009 --> 00:01:03.869
元组还可以用来以紧凑的方式为多个变量赋值

00:01:03.869 --> 00:01:06.950
注意 与之前的示例不同

00:01:06.950 --> 00:01:10.835
赋值给元组 dimensions 的值没有用括号括起来

00:01:10.834 --> 00:01:14.144
在创建元组时 括号是可选的

00:01:14.144 --> 00:01:19.024
如果括号并没有使代码更清晰 程序员经常会忽略括号

00:01:19.025 --> 00:01:20.663
在第二行

00:01:20.662 --> 00:01:24.619
我们用元组 dimensions 的内容为三个变量赋了值

00:01:24.620 --> 00:01:27.650
这叫做元组解包

00:01:27.650 --> 00:01:30.920
你可以通过元组解包将元组中的信息赋值给多个变量

00:01:30.920 --> 00:01:36.140
而不用逐个访问这些信息

00:01:36.140 --> 00:01:38.885
并创建多个赋值语句

00:01:38.885 --> 00:01:43.570
在此示例中 如果我们不需要直接使用 dimensions

00:01:43.569 --> 00:01:46.209
可以将这两行代码简写为一行

00:01:46.209 --> 00:01:50.000
一次性为三个变量赋值

