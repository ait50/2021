WEBVTT
Kind: captions
Language: pt-BR

00:00:00.734 --> 00:00:03.000
Tipos de Dados e Operadores.
Operadores Aritméticos.

00:00:03.067 --> 00:00:04.267
No último vídeo,

00:00:04.300 --> 00:00:08.667
você viu essa linha do Python
que calcula a soma de 3 e 5.

00:00:09.367 --> 00:00:13.033
O sinal "+" e essa linha
são um operador aritmético.

00:00:13.534 --> 00:00:16.000
O Python tem vários
operadores aritméticos,

00:00:16.300 --> 00:00:19.434
a maioria dos quais segue
as regras usuais da matemática.

00:00:20.267 --> 00:00:22.067
Vamos ver os quatro primeiros.

00:00:22.634 --> 00:00:25.400
No Python, adição e a subtração

00:00:25.434 --> 00:00:29.367
são realizadas com os símbolos
habituais, "+" e "-".

00:00:30.200 --> 00:00:32.501
A multiplicação usa um asterisco

00:00:33.133 --> 00:00:35.501
e a divisão usa uma barra.

00:00:36.000 --> 00:00:40.501
Aqui podemos ver que a multiplicação
ocorre antes da adição.

00:00:41.033 --> 00:00:45.601
Isso ocorre porque o Python segue
a Ordem de Operações Matemáticas,

00:00:46.067 --> 00:00:48.701
que você pode relembrar
nas notas abaixo.

00:00:49.601 --> 00:00:51.667
Se você quiser
que a adição venha primeiro,

00:00:51.734 --> 00:00:54.434
pode colocar essa parte
entre parênteses.

00:00:55.634 --> 00:00:57.200
Tirando essas operações,

00:00:57.367 --> 00:01:00.334
aqui temos o operador
para exponenciação.

00:01:00.601 --> 00:01:05.167
Pode elevar um número à potência
de outro com dois asteriscos.

00:01:05.935 --> 00:01:07.067
Por exemplo,

00:01:07.267 --> 00:01:11.767
essa linha exibe três elevado
à potência de dois, que é nove.

00:01:12.767 --> 00:01:15.601
Há outro operador
que às vezes é confundido

00:01:15.634 --> 00:01:18.667
com o operador de exponenciação:
o acento circunflexo.

00:01:19.234 --> 00:01:24.434
Ele executa uma operação complexa
chamada lógica binária.

00:01:24.634 --> 00:01:26.567
É um operador aritmético

00:01:26.634 --> 00:01:29.534
que não segue as regras usuais
da matemática.

00:01:30.434 --> 00:01:34.167
A lógica binária não é algo
necessário para este curso,

00:01:34.267 --> 00:01:35.767
mas,
se você estiver interessado,

00:01:35.801 --> 00:01:38.667
há informações sobre isso
nas notas abaixo.

00:01:39.634 --> 00:01:43.300
Tudo o que precisa lembrar é que,
se você executar a exponenciação,

00:01:43.334 --> 00:01:46.467
você usa dois asteriscos,
não o acento circunflexo,

00:01:46.501 --> 00:01:49.667
ou você produzirá resultados
muito confusos.

00:01:50.767 --> 00:01:53.601
Outro operador útil
é o sinal de porcentagem,

00:01:53.734 --> 00:01:56.133
que executa
a operação do módulo.

00:01:56.501 --> 00:02:01.033
Ele retorna o restante após dividir
o primeiro número pelo segundo.

00:02:02.033 --> 00:02:03.167
Neste exemplo,

00:02:03.400 --> 00:02:07.467
nove dividido por dois
é quatro com o restante um.

00:02:08.067 --> 00:02:12.267
Então essa linha exibiria um,
pois o módulo fornece o restante.

00:02:13.000 --> 00:02:15.534
Você também pode encontrar
o uso para a divisão total

00:02:15.701 --> 00:02:17.767
indicado por duas barras.

00:02:18.501 --> 00:02:23.501
Ele divide um inteiro por outro,
mas, em vez de dar a resposta exata,

00:02:23.534 --> 00:02:26.601
ele arredonda a resposta
para um número inteiro.

00:02:27.267 --> 00:02:32.234
7 dividido por 2 é 3,5,
que é arredondado para 3.

00:02:32.767 --> 00:02:36.300
Observe que ele arredondará
mesmo se a resposta for negativa.

00:02:36.567 --> 00:02:41.334
Neste caso, -3,5
foi arredondado para -4.

00:02:42.167 --> 00:02:45.367
Há outras categorias de operadores
que aprenderemos em breve,

00:02:45.534 --> 00:02:49.000
mas esses são todos
os operadores aritméticos do Python.

