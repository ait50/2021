WEBVTT
Kind: captions
Language: zh-CN

00:00:03.620 --> 00:00:10.259
集合是简单的数据结构 它们具有一个主要用途 即收集唯一元素

00:00:10.259 --> 00:00:12.115
下一种数据结构是字典

00:00:12.115 --> 00:00:14.429
字典更加灵活

00:00:14.429 --> 00:00:16.829
列表和集合

00:00:16.829 --> 00:00:18.924
存储的是单个对象

00:00:18.925 --> 00:00:23.710
而字典不同 字典存储的是元素对 即键和值

00:00:23.710 --> 00:00:27.089
在此示例中 我们定义了一个字典

00:00:27.089 --> 00:00:31.899
键是元素名称 值是相应的原子序数

00:00:31.899 --> 00:00:37.250
我们可以使用方括号将键括起来 查找字典中的值

00:00:37.250 --> 00:00:41.534
还可以使用方括号将新值插入字典中

00:00:41.534 --> 00:00:46.308
在此示例中 我们添加了 lithium 并将值设为 3

00:00:46.308 --> 00:00:49.390
字典的键和列表索引相似

00:00:49.390 --> 00:00:54.270
我们可以将键放入方括号里 从数据结构中选择元素

00:00:54.270 --> 00:01:00.359
和列表不同的是 字典的键可以是任何不可变类型 而不仅仅是整数

00:01:00.359 --> 00:01:03.975
elements 字典使用字符串作为键

00:01:03.975 --> 00:01:09.599
但是 每个键并非必须具有相同的类型

00:01:09.599 --> 00:01:13.179
我们可以像检查某个值是否在列表或集合中一样

00:01:13.180 --> 00:01:17.365
使用 in 关键字检查某个值是否在字典中

00:01:17.364 --> 00:01:21.519
我们可以在查找键之前 使用 in 验证该键是否在字典中

00:01:21.519 --> 00:01:26.259
有可能该键不在字典中

00:01:26.260 --> 00:01:29.245
Mithril 并不属于 elements 字典

00:01:29.245 --> 00:01:31.773
因此输出了 false

00:01:31.772 --> 00:01:36.489
字典有一个也很实用的相关方法 叫做 get()

00:01:36.489 --> 00:01:40.329
get() 会在字典中查询值 但是和方括号不同的是

00:01:40.329 --> 00:01:45.834
如果没有找到要找的键 get() 返回 none 或你所选的默认值

00:01:45.834 --> 00:01:48.359
我们的字典中没有 dilithium

00:01:48.359 --> 00:01:50.859
因此返回并输出了 None

00:01:50.859 --> 00:01:54.018
如果你觉得有时候查询会失败

00:01:54.018 --> 00:01:55.570
get() 可能比普通的方括号查询更好

00:01:55.569 --> 00:02:00.609
因为错误会使程序崩溃 这不是好事

00:02:00.609 --> 00:02:03.459
你可以使用 is 运算符检查键是否返回了 None

00:02:03.459 --> 00:02:09.079
或者使用 is not 检查相反的情况

00:02:09.080 --> 00:02:11.680
这些运算符称为恒等运算符

00:02:11.680 --> 00:02:16.000
你将在接下来的练习中详细了解恒等运算符

00:02:16.000 --> 00:02:21.740
以及它们与这些等于和不等于运算符有何区别

