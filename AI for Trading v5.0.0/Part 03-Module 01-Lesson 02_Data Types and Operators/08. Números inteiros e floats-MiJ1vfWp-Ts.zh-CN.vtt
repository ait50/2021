WEBVTT
Kind: captions
Language: zh-CN

00:00:01.260 --> 00:00:08.019
到目前为止 我们一直处理的数字都是整数或整型

00:00:08.019 --> 00:00:13.390
但是 你可能注意到了其他类型的数字也存在于 Python 中

00:00:13.390 --> 00:00:21.804
这里 用一个整数除以另一个整数的结果是非整数 0.75

00:00:21.804 --> 00:00:24.714
在 Python 及一般的计算机语言中

00:00:24.714 --> 00:00:27.550
我们将此类数字表示为浮点型

00:00:27.550 --> 00:00:30.385
它是浮点数字的简称

00:00:30.385 --> 00:00:33.295
浮点型是使用小数点

00:00:33.295 --> 00:00:37.460
来表示分数值的实数

00:00:37.460 --> 00:00:41.174
即使一个整数能够除尽另一个整数

00:00:41.174 --> 00:00:43.429
结果也是浮点型

00:00:43.429 --> 00:00:47.850
整型和浮点型实际上是两种数据类型

00:00:47.850 --> 00:00:52.215
在 Python 中 你遇到的每个对象都是一个类型

00:00:52.215 --> 00:00:55.740
对象类型定义了哪些运算符和函数

00:00:55.740 --> 00:00:59.460
适合该对象以及计算原理

00:00:59.460 --> 00:01:05.445
你可以使用内置函数 type() 直接检查任何对象的类型

00:01:05.444 --> 00:01:09.209
从这里可以看出 在 Python 中

00:01:09.209 --> 00:01:14.222
没有小数和有小数的数字类型不一样

00:01:14.222 --> 00:01:15.390
要使用整型

00:01:15.390 --> 00:01:18.269
只需提供没有小数点的整数

00:01:18.269 --> 00:01:20.280
这是一个整型

00:01:20.280 --> 00:01:23.805
要使用浮点型 则包含小数点

00:01:23.805 --> 00:01:27.135
如果数字本身是整数

00:01:27.135 --> 00:01:32.070
没关系 你甚至不需要在小数点后提供任何数字

00:01:32.069 --> 00:01:34.679
这两个都是浮点型

00:01:34.680 --> 00:01:40.620
涉及整型和浮点型的运算始终生成浮点型数字

00:01:40.620 --> 00:01:46.170
有时候 你可能需要手动地将一种数字类型转换为另一种类型

00:01:46.170 --> 00:01:52.129
为此 你可以使用 int 和 float 构建这些类型的新对象

00:01:52.129 --> 00:01:54.844
当我们将浮点型转换为整型时

00:01:54.844 --> 00:01:57.664
小数点后的部分会被截断

00:01:57.665 --> 00:02:01.085
也就是不进行四舍五入

00:02:01.084 --> 00:02:05.299
49.7 被截成 49

00:02:05.299 --> 00:02:10.115
16 除以 4 后得出的 4.0 被截成 4

00:02:10.115 --> 00:02:16.820
从整型转换为浮点型时 会在数字后面添加小数点和 0

00:02:16.819 --> 00:02:20.996
我们见到了 Python 的两大主要数字类型

00:02:20.997 --> 00:02:25.405
整数和浮点数 它们有什么作用？

00:02:25.405 --> 00:02:28.930
很多时候 你可能需要数条目的数量

00:02:28.930 --> 00:02:32.830
或需要计算结果是整数

00:02:32.830 --> 00:02:38.425
例如 假设你想数一下晚宴上来了多少人

00:02:38.425 --> 00:02:42.203
不能将人数统计成 0.47 人

00:02:42.203 --> 00:02:44.050
因此使用整数

00:02:44.050 --> 00:02:47.935
如果你要处理的数字不一定是整数

00:02:47.935 --> 00:02:50.140
则需要使用浮点型

00:02:50.139 --> 00:02:53.289
例如 假设你为晚宴做了 5 个派

00:02:53.289 --> 00:02:57.162
你想要记录剩下多少派

00:02:57.163 --> 00:03:00.355
人们通常会吃 1/6

00:03:00.354 --> 00:03:02.304
拿走一片后

00:03:02.305 --> 00:03:05.075
剩下 4.83 片

00:03:05.075 --> 00:03:06.682
因此使用浮点型

00:03:06.682 --> 00:03:11.769
浮点数字是应该要表示的数字的近似值

00:03:11.770 --> 00:03:16.344
有必要这样 因为浮点型可以表示的数字范围很广

00:03:16.344 --> 00:03:19.585
因此 为了在计算机内存中存下数字

00:03:19.585 --> 00:03:22.965
Python 必须使用近似值

00:03:22.965 --> 00:03:26.395
这种近似方法有时候会产生意外的结果

00:03:26.395 --> 00:03:34.373
因为 0.1 的浮点值或近似值比 0.1 稍微大些

00:03:34.372 --> 00:03:38.254
当我们将好几个这种数字相加

00:03:38.254 --> 00:03:42.995
会发现数学上正确的答案与 Python 创建的结果有差别

00:03:42.995 --> 00:03:46.520
在大多数情况下 这种小小的差别影响不大

00:03:46.520 --> 00:03:50.189
但是必须知道存在这种差别

00:03:50.189 --> 00:03:53.620
你可以在讲师注释中了解更多信息

