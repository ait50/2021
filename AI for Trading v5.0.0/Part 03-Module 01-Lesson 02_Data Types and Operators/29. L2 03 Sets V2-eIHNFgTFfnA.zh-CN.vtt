WEBVTT
Kind: captions
Language: zh-CN

00:00:02.730 --> 00:00:06.519
假设你有一个搜索引擎

00:00:06.519 --> 00:00:09.820
你对用户进行了问卷调查 看看他们都来自何处

00:00:09.820 --> 00:00:15.925
你收集了 785 份答案并按国家/地区将他们整合成列表

00:00:15.925 --> 00:00:19.210
实际上世界上没有 785 个国家/地区

00:00:19.210 --> 00:00:22.568
表明该国家/地区列表中有重复项

00:00:22.568 --> 00:00:26.875
对列表进行切片 查看前几个元素后就发现了这一点

00:00:26.875 --> 00:00:30.070
有必要删掉重复项

00:00:30.070 --> 00:00:33.759
生成一个所有用户所来自的国家/地区列表

00:00:33.759 --> 00:00:37.034
Python 中的集合正好具有这一功能

00:00:37.034 --> 00:00:41.884
集合是包含唯一元素并且顺序不定的容器

00:00:41.884 --> 00:00:45.320
我们可以像这样用列表创建一个集合

00:00:45.320 --> 00:00:47.630
集合会删掉重复项

00:00:47.630 --> 00:00:50.270
print() 函数会输出唯一值

00:00:50.270 --> 00:00:53.596
其中有 196 个国家/地区

00:00:53.595 --> 00:00:57.379
和列表一样 集合也支持 in 运算符

00:00:57.380 --> 00:00:59.855
“India”位于该集合中

00:00:59.854 --> 00:01:02.517
你可以向集合中添加元素

00:01:02.518 --> 00:01:05.674
但是不能像列表那样使用 append() 方法

00:01:05.674 --> 00:01:08.450
集合具有 add() 方法

00:01:08.450 --> 00:01:10.670
我们在这行添加了“Italy”

00:01:10.670 --> 00:01:14.250
和列表一样 集合也有 pop() 方法

00:01:14.250 --> 00:01:16.635
当你从集合中取出元素时

00:01:16.635 --> 00:01:18.704
会随机地删除一个元素

00:01:18.704 --> 00:01:21.554
注意和列表不同 集合是无序的

00:01:21.555 --> 00:01:24.980
因此没有最后一个元素

00:01:24.980 --> 00:01:30.435
可以对集合执行的其他操作包括可以对数学集合执行的运算

00:01:30.435 --> 00:01:33.540
我们可以轻松地对集合执行 union() intersection() 

00:01:33.540 --> 00:01:36.525
和 difference() 等方法

00:01:36.525 --> 00:01:40.780
并且与其他容器相比 执行起来快多了

