WEBVTT
Kind: captions
Language: zh-CN

00:00:01.790 --> 00:00:06.120
到目前为止 我们已经见过两种类型的 Python 数据

00:00:06.120 --> 00:00:09.539
即整型和浮点型

00:00:09.539 --> 00:00:16.044
并且使用了加法和取幂等算术运算符来处理这些值

00:00:16.045 --> 00:00:22.206
另一种类型是布尔型 表示值 true 和 false

00:00:22.205 --> 00:00:26.085
bool 是 boolean 的缩写

00:00:26.085 --> 00:00:29.060
布尔代数是一种代数分支

00:00:29.059 --> 00:00:32.475
专门用于处理值为 true 或 false 的变量

00:00:32.475 --> 00:00:37.685
布尔代数得名于发明者 George Bool

00:00:37.685 --> 00:00:42.880
布尔逻辑是所有数字设备的基础 几乎存在于每行计算机代码中

00:00:42.880 --> 00:00:45.969
并且改变了我们生活的方方面面

00:00:45.969 --> 00:00:50.854
你可以在下面的讲师注释中了解更多信息

00:00:50.854 --> 00:00:54.269
我们可以像这样赋布尔值

00:00:54.270 --> 00:00:57.055
但是本身并不太实用

00:00:57.054 --> 00:01:00.659
我们可以使用小于或大于等比较运算符

00:01:00.659 --> 00:01:04.674
来比较值并生成布尔型结果

00:01:04.674 --> 00:01:08.905
这里 42 不大于 43

00:01:08.905 --> 00:01:12.974
因此输出结果后得出布尔值 false

00:01:12.974 --> 00:01:18.629
这是 Python 中的比较运算符完整列表

00:01:18.629 --> 00:01:22.530
小于 大于 小于或等于

00:01:22.530 --> 00:01:24.825
大于或等于

00:01:24.825 --> 00:01:27.659
等于 不等于

00:01:27.659 --> 00:01:31.109
注意 相等用两个等号表示

00:01:31.109 --> 00:01:36.420
不等于用感叹号

00:01:36.420 --> 00:01:40.439
这和 Excel 或 SQL 有所不同

00:01:40.439 --> 00:01:42.879
除了比较运算符之外

00:01:42.879 --> 00:01:46.349
在处理布尔值时 这些逻辑运算符非常有用

00:01:46.349 --> 00:01:50.099
and 检查两侧是否都为 true

00:01:50.099 --> 00:01:58.185
or 检查是否至少一侧为 true not 会颠倒布尔类型

00:01:58.185 --> 00:02:03.650
这个示例会检查年龄是否在青少年年龄范围内

00:02:03.650 --> 00:02:09.629
你可以想象下 将 14 放在这两个位置

00:02:09.629 --> 00:02:11.500
如果两侧都为 true

00:02:11.500 --> 00:02:15.539
则为变量 is_teen 赋值 true

00:02:15.539 --> 00:02:23.044
换句话说 如果此人超过 12 岁 不到 20 岁 则是青少年

00:02:23.044 --> 00:02:28.189
这是 not 运算 将同一语句的布尔类型颠倒了

