WEBVTT
Kind: captions
Language: ar

00:00:01.935 --> 00:00:04.071
في الفيديو السابق،

00:00:04.171 --> 00:00:08.976
رأيتَ هذا السطر من لغة Python
والذي يحسب حاصل جمع 3 و5.

00:00:09.076 --> 00:00:13.180
علامة زائد "+" في هذا السطر
هي عامل تشغيل حسابي.

00:00:13.280 --> 00:00:16.149
هناك عدة عوامل تشغيل حسابية في Python

00:00:16.250 --> 00:00:19.453
وتتبع معظمها القوانين الرياضية المعتادة.

00:00:19.553 --> 00:00:22.155
لنستعرض الأربعة الأولى.

00:00:22.256 --> 00:00:29.696
في Python تتم عمليتا الجمع والطرح باستخدام
الرمزين المعتادين، زائد " + " وناقص " - ".

00:00:29.796 --> 00:00:32.799
تستخدم عملية الضرب رمز النجمة " * "

00:00:32.900 --> 00:00:35.769
وتستخدم القسمة
رمز الشرطة المائلة للأمام " / ".

00:00:35.869 --> 00:00:40.874
هنا يمكنك أن ترى أن عملية الضرب
تحصل قبل عملية الجمع.

00:00:40.974 --> 00:00:45.879
هذا يحدث لأن Python
تتبع الترتيب الرياضي للعمليات

00:00:45.979 --> 00:00:49.049
والذي يمكنك مراجعته في الملاحظات أدناه.

00:00:49.149 --> 00:00:51.552
إذا أردت أن تكون الأولوية لعملية الجمع،

00:00:51.652 --> 00:00:54.221
يمكنك وضع هذا الجزء بين قوسين.

00:00:54.321 --> 00:00:57.291
بعد عوامل التشغيل الأربعة تلك،

00:00:57.391 --> 00:01:00.427
هذا هو عامل تشغيل الرفع إلى الأس.

00:01:00.527 --> 00:01:05.599
يمكنك رفع رقم ما
إلى أس رقم آخر باستخدام نجمتين.

00:01:05.699 --> 00:01:12.039
مثلاً، يطبع هذا السطر نتيجة
رفع 3 إلى الأس 2 وتساوي 9.

00:01:12.139 --> 00:01:18.879
هناك عامل تشغيل آخر قد يخلط البعض
بينه وبين علامة الأس: علامة الإقحام.

00:01:18.979 --> 00:01:22.316
هذا العامل ينفذ عملية
ليست معروفة بالقدر نفسه

00:01:22.416 --> 00:01:24.651
وتسمى عملية "أو حصرية" على مستوى البت
Bitwise XOR.

00:01:24.751 --> 00:01:29.990
هذا عامل تشغيل حسابي
لا يتبع القوانين الرياضية المعتادة.

00:01:30.090 --> 00:01:34.428
عوامل التشغيل على مستوى البت ليست شيئاً
تحتاج إلى معرفته لأغراض هذه الدورة

00:01:34.528 --> 00:01:38.465
لكن إذا كنت مهتماً فهناك
معلومات عنها في الملاحظات أدناه.

00:01:38.565 --> 00:01:43.270
كل ما عليك تذكره
هو أنك إذا نفذت عملية الرفع إلى الأس،

00:01:43.370 --> 00:01:46.507
عليك استخدام علامتيّ نجمة " ** "
وليس علامة إقحام " ^ "

00:01:46.607 --> 00:01:50.177
وإلا فإنك ستحصل بطريق الخطأ
على نتائج مربكة للغاية.

00:01:50.277 --> 00:01:56.216
ثمة عامل تشغيل آخر مفيد،
وهو العلامة المئوية، وهو يحسب باقي القسمة.

00:01:56.316 --> 00:02:01.555
فهو يُرجع باقي قسمة الرقم الأول على الثاني.

00:02:01.655 --> 00:02:07.928
في هذا المثال،
9 تقسيم 2 تساوي 4 والباقي 1.

00:02:08.028 --> 00:02:12.132
أي أن هذا السطر سيطبع الرقم 1،
لأن هذا العامل يعطينا باقي القسمة.

00:02:12.232 --> 00:02:15.636
ومن عوامل التشغيل المفيدة أيضاً
قسمة الأعداد الصحيحة،

00:02:15.736 --> 00:02:18.272
والتي يُرمز لها بشرطتين مائلتين للأمام.

00:02:18.372 --> 00:02:23.644
وهي تقسم عدداً صحيحاً على عدد صحيح آخر
لكن بدلاً من إعطائنا الناتج الدقيق،

00:02:23.744 --> 00:02:26.880
فإنها تخفض الناتج إلى أقرب عدد صحيح.

00:02:26.980 --> 00:02:32.519
7 تقسيم 2 تساوي 3،5
والتي يتم تقريبها للأسفل إلى 3.

00:02:32.619 --> 00:02:36.356
لاحظ أن هذا العامل يقوم بالتقريب
حتى لو كان الناتج سالباً.

00:02:36.456 --> 00:02:41.728
في هذه الحالة،
تم تقريب سالب 3،5 إلى سالب 4.

00:02:41.828 --> 00:02:45.599
هناك فئات أخرى من عوامل التشغيل
والتي سنستعرضها قريباً،

00:02:45.699 --> 00:02:49.570
لكن هذه هي
جميع عوامل التشغيل الحسابية في Python.

