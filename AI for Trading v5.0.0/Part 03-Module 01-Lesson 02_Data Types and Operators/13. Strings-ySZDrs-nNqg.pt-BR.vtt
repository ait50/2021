WEBVTT
Kind: captions
Language: pt-BR

00:00:04.167 --> 00:00:08.667
Geralmente a programação vai além
dos números e da aritmética.

00:00:08.701 --> 00:00:12.868
Haverá situações nas quais
precisaremos utilizar texto.

00:00:12.934 --> 00:00:14.834
Para fazer isso no Python,

00:00:14.868 --> 00:00:17.133
precisaremos utilizar
uma string,

00:00:17.200 --> 00:00:20.901
que é uma série ordenada imutável
de caracteres.

00:00:20.968 --> 00:00:24.033
Falaremos mais
sobre a ordem imutável depois.

00:00:24.634 --> 00:00:27.400
Podemos criar uma string
utilizando aspas.

00:00:27.467 --> 00:00:30.868
Simples ou duplas
funcionam da mesma forma,

00:00:30.901 --> 00:00:34.801
embora existam casos específicos
que falaremos depois.

00:00:34.834 --> 00:00:38.601
Nos dois casos,
eu imprimi a string "hello"

00:00:38.634 --> 00:00:41.467
e recebi o "hello"
como resultado.

00:00:41.534 --> 00:00:46.767
Uma variável pode ser uma string,
assim como fizemos com os números.

00:00:46.834 --> 00:00:49.300
As strings podem incluir
qualquer caractere,

00:00:49.334 --> 00:00:53.601
até mesmo espaços,
pontuações e números.

00:00:53.667 --> 00:00:59.000
Porém, o que fazemos
para exibir as aspas na string?

00:00:59.033 --> 00:01:02.033
Como utilizamos aspas
para definir as strings,

00:01:02.100 --> 00:01:04.634
isso traz
um pequeno problema.

00:01:04.701 --> 00:01:08.567
Aqui o código não funcionou
como queríamos.

00:01:08.601 --> 00:01:12.334
O Python oferece duas soluções
para este problema.

00:01:12.367 --> 00:01:16.200
A primeira é colocar a string
entre aspas simples

00:01:16.267 --> 00:01:19.467
em vez de aspas duplas,
desta forma.

00:01:19.534 --> 00:01:21.701
Podemos utilizar
os dois tipos de aspas

00:01:21.734 --> 00:01:23.300
para definir strings,

00:01:23.934 --> 00:01:26.801
mas às vezes precisamos
definir uma string

00:01:26.868 --> 00:01:30.601
que inclua tanto as aspas duplas
quanto as simples.

00:01:30.634 --> 00:01:32.200
E aí?

00:01:32.234 --> 00:01:34.634
Nesse caso, podemos utilizar
a barra invertida

00:01:34.667 --> 00:01:36.901
para citações de escape.

00:01:36.968 --> 00:01:40.601
Aqui a string está delimitada
por aspas simples.

00:01:41.267 --> 00:01:43.634
As aspas simples
dentro da string

00:01:43.667 --> 00:01:45.601
vêm depois
da barra invertida,

00:01:45.634 --> 00:01:48.534
assim o Python saberá
que ela deve ser interpretada

00:01:48.567 --> 00:01:50.200
como parte da string,

00:01:50.267 --> 00:01:53.200
não como as aspas
que finalizam a string.

00:01:53.234 --> 00:01:55.534
Após definir as strings,

00:01:55.567 --> 00:02:00.200
existem algumas operações
de inteiros e decimais

00:02:00.267 --> 00:02:03.367
que também podemos utilizar
nos strings.

00:02:03.400 --> 00:02:07.934
Por exemplo, podemos utilizar
o sinal de adição para unir strings

00:02:08.000 --> 00:02:11.801
e as multiplicações,
para repetir strings.

00:02:11.834 --> 00:02:14.901
Vejamos um exemplo
de cada um.

00:02:14.934 --> 00:02:18.434
Aqui, as variáveis
possuem duas palavras.

00:02:18.467 --> 00:02:22.767
Podemos utilizar o sinal de adição
para concatenar duas strings

00:02:22.834 --> 00:02:24.834
e imprimir o resultado.

00:02:24.868 --> 00:02:28.767
Isso é fundamentalmente
diferente da adição numérica.

00:02:28.834 --> 00:02:32.901
Porém, perceba que os nomes
apareceram grudados,

00:02:32.968 --> 00:02:35.300
está faltando um espaço.

00:02:35.367 --> 00:02:38.934
O Python é literal
ao trabalhar com strings.

00:02:39.000 --> 00:02:42.901
Precisamos incluir os espaços
e as pontuações

00:02:42.934 --> 00:02:46.200
se quisermos que o texto
faça sentido.

00:02:46.234 --> 00:02:49.501
Agora temos uma string
que faz sentido.

00:02:49.534 --> 00:02:53.801
As duas palavras foram unidas
com um espaço entre elas.

00:02:53.834 --> 00:02:58.834
Antes eu disse que o espaço vazio
não importava entre parênteses

00:02:58.868 --> 00:03:01.701
em pedaços de código
como nas instruções print,

00:03:01.767 --> 00:03:06.033
mas, nas strings,
o espaço faz a diferença

00:03:06.100 --> 00:03:08.934
quando está entre aspas.

00:03:09.000 --> 00:03:12.601
Vamos ver
outra operação matemática.

00:03:12.634 --> 00:03:16.400
Também podemos utilizar
a multiplicação.

00:03:16.467 --> 00:03:20.234
Ela repete a string
de acordo com a multiplicação.

00:03:20.300 --> 00:03:22.868
Aqui cinco vezes.

00:03:22.901 --> 00:03:25.033
Embora a adição
e a multiplicação

00:03:25.100 --> 00:03:27.434
exercem função nas strings,

00:03:27.501 --> 00:03:30.501
a subtração e a divisão não.

00:03:30.534 --> 00:03:33.067
Aqui obtemos um erro
dizendo que uma string

00:03:33.133 --> 00:03:37.133
não suporta
operações de divisão.

00:03:37.167 --> 00:03:40.167
Uma função útil
que existe no Python

00:03:40.200 --> 00:03:44.334
é a "len", que informa
o comprimento da string,

00:03:44.367 --> 00:03:47.667
o número de caracteres
de uma string.

00:03:48.300 --> 00:03:51.868
A "len" é como "PRINT",
ou seja, é uma função built-in

00:03:51.901 --> 00:03:54.701
que pega um valor
em parênteses

00:03:54.734 --> 00:03:56.801
para realizar uma ação.

00:03:56.834 --> 00:03:58.968
"Ien" é diferente da print,

00:03:59.000 --> 00:04:00.667
pois retorna um valor

00:04:00.734 --> 00:04:03.601
que pode ser armazenado
em uma variável.

00:04:03.667 --> 00:04:08.000
Neste exemplo, a função "len"
fornece o número sete,

00:04:08.067 --> 00:04:11.901
que é armazenado
na variável "udacity_length".

00:04:11.934 --> 00:04:16.234
Built-in significa que o Python
oferece a função.

00:04:16.267 --> 00:04:19.267
Mais tarde veremos
como definir nossas funções.

