WEBVTT
Kind: captions
Language: ar

00:00:01.268 --> 00:00:07.908
حتى الآن، معظم الأرقام
التي كنا نتعامل معها كانت أعداد صحيحة.

00:00:08.008 --> 00:00:13.280
لكن لعلك لاحظت وجود أنواع أخرى
من الأعداد في Python.

00:00:13.380 --> 00:00:21.688
هنا، تقسيم عدد صحيح على عدد صحيح آخر
يُنتج عدداً ليس صحيحاً، وهو 0،75.

00:00:21.788 --> 00:00:24.625
في لغة Python والحوسبة عموماً،

00:00:24.725 --> 00:00:27.461
نُمثل مثل هذا الرقم بالنوع الحُر float،

00:00:27.561 --> 00:00:30.297
وهو اختصار لـ"floating point number"
وتعني عدد ذو فاصلة عشرية متحركة.

00:00:30.397 --> 00:00:34.401
العدد الحُر هو عدد حقيقي يستخدم فاصلة عشرية

00:00:34.501 --> 00:00:37.371
للسماح بتمثيل الأرقام ذات القيم الكسرية.

00:00:37.471 --> 00:00:41.074
حتى لو أن عدداً صحيحاً
يقسم عدداً صحيحاً آخر من دون باق،

00:00:41.175 --> 00:00:43.343
سيكون الناتج عدداً حراً "float".

00:00:43.443 --> 00:00:47.748
int و float
هما في الواقع نوعان من أنواع البيانات.

00:00:47.848 --> 00:00:52.119
في Python، كل كائن تصادفه سيكون له نوع.

00:00:52.219 --> 00:00:59.359
نوع الكائن يحدد عوامل التشغيل والدوال
التي يمكنها التفاعل معه وكيف تتفاعل معه.

00:00:59.459 --> 00:01:05.399
يمكنك التحقق من نوع أي كائن مباشرة
باستخدام الدالة المضمنة type.

00:01:05.499 --> 00:01:10.137
هنا، يمكنك أن ترى أن نوع العدد
عندما يحتوي على فاصلة عشرية

00:01:10.237 --> 00:01:14.174
يختلف في Python
عن نوعه إذا كان من دون فاصلة عشرية.

00:01:14.274 --> 00:01:15.342
لخلق كائن من النوع int،

00:01:15.442 --> 00:01:18.245
اكتب عدداً صحيحاً من دون فاصلة عشرية فحسب.

00:01:18.345 --> 00:01:20.247
هذا عدد من نوع int.

00:01:20.347 --> 00:01:23.784
لجعل الكائن من نوع float، ضع فاصلة عشرية.

00:01:23.884 --> 00:01:27.087
إذا كان العدد نفسه عدداً صحيحاً،

00:01:27.187 --> 00:01:32.025
فلا بأس، إذ لست مضطراً
إلى إضافة شيء بعد الفاصلة العشرية.

00:01:32.125 --> 00:01:34.661
هذان كلاهما عددان من النوع float.

00:01:34.761 --> 00:01:40.601
أي عملية حسابية تشتمل على عدد صحيح int
وعدد حر float ينتج عنها float دائماً.

00:01:40.701 --> 00:01:46.139
أحياناً، قد تحتاج
إلى تحويل نوع عددي إلى آخر يدوياً.

00:01:46.240 --> 00:01:52.112
ويمكنك فعل ذلك بإنشاء كائنات جديدة
من تلك الأنواع باستخدام int و float.

00:01:52.212 --> 00:01:54.815
عندما نحول كائن float إلى int

00:01:54.915 --> 00:01:58.852
يتم بتر الجزء الذي يتبع الفاصلة
العشرية من العدد،

00:01:58.952 --> 00:02:01.121
ما يعني عدم حدوث أي تقريب.

00:02:01.221 --> 00:02:04.791
فيتم قص 49،7 لتصبح 49.

00:02:04.892 --> 00:02:10.163
و4،0 التي تم حسابها
من تقسيم 16 على 4 تُقص لتصبح 4.

00:02:10.264 --> 00:02:16.837
التحويل من عدد صحيح int إلى عدد حر float
سيزيد صفراً عشرياً إلى آخر العدد.

00:02:16.937 --> 00:02:21.041
وهكذا اطلعنا على النوعين العدديين
الرئيسيين في Python:

00:02:21.141 --> 00:02:25.445
الأعداد الصحيحة والأعداد ذات الفاصلة
العشرية المتحركة. ما استخداماتهما؟

00:02:25.546 --> 00:02:28.649
هناك حالات كثيرة
قد تحتاج فيها إلى عدّ بنود أو مفردات

00:02:28.749 --> 00:02:32.853
أو تحتاج إلى التيقّن من أن نتيجة
عملية حسابية ما ستكون عدداً صحيحاً.

00:02:32.953 --> 00:02:38.458
مثلاً، لنفترض أنك تريد
عدّ الأشخاص الذين حضروا حفل عشائك.

00:02:38.559 --> 00:02:41.895
لا يمكنك أن تعد 0،47 شخص،

00:02:41.995 --> 00:02:44.097
لذا يجب أن تستخدم عدداً صحيحاً.

00:02:44.198 --> 00:02:47.968
إذا لم يكن الرقم الذي تتعامل معه
عدداً صحيحاً بالضرورة،

00:02:48.068 --> 00:02:50.170
فالعدد الحُر float هو ضالتك.

00:02:50.270 --> 00:02:54.308
مثلاً، لنفترض أنك صنعت 5 فطائر لحفل العشاء

00:02:54.408 --> 00:02:57.211
وتريد أن تتابع كمية الفطائر المتبقية.

00:02:57.311 --> 00:03:00.447
عادة ما يأخذ الناس سدس الفطيرة.

00:03:00.547 --> 00:03:02.416
عندما يأخذ أحدهم شريحة،

00:03:02.516 --> 00:03:05.185
تكون الكمية قد نقصت لتصبح 4،83 فطيرة،

00:03:05.285 --> 00:03:06.787
وعليه تستخدم النوع float.

00:03:06.887 --> 00:03:11.859
أعداد الفاصلة العشرية المتحركة هي
قيم تقريبية للأرقام التي يفترض أن تمثلها.

00:03:11.959 --> 00:03:16.430
هذا ضروري لأن الأعداد الحرة
يمكنها تمثيل نطاق شاسع من الأرقام.

00:03:16.530 --> 00:03:19.700
لذا، حتى تستوعب ذاكرة الحاسوب الأرقام،

00:03:19.800 --> 00:03:23.070
يجب أن تستخدم Python قيماً تقريبية.

00:03:23.170 --> 00:03:26.507
قد ينتج عن هذه المقايضة أحياناً
نتائج مفاجئة.

00:03:26.607 --> 00:03:30.878
لأن القيمة الحرة أو الرقم التقريبي
المحفوظ في Python للرقم 0،1

00:03:30.978 --> 00:03:34.481
هو فعلياً أعلى من 0،1 بقليل،

00:03:34.581 --> 00:03:38.352
فإننا عندما نضيف بضعة منها
إلى بعضها البعض سنلاحظ الفرق

00:03:38.452 --> 00:03:43.090
بين الإجابة الصحيحة رياضياً
والإجابة التي تستحدثها لغة Python.

00:03:43.190 --> 00:03:47.694
إن هذه الفروق الصغيرة
في غالبية الظروف والاستخدامات غير مهمة

00:03:47.794 --> 00:03:50.297
لكن من المهم أن نعرف أنها موجودة.

00:03:50.397 --> 00:03:53.834
يمكنك قراءة المزيد
عن ذلك في ملاحظات المدرب.

