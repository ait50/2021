WEBVTT
Kind: captions
Language: zh-CN

00:00:00.540 --> 00:00:06.669
到目前为止 我们已经讨论了 Python 中的四种数据类型

00:00:06.669 --> 00:00:10.015
整型 浮点型 布尔型和字符串

00:00:10.015 --> 00:00:12.669
在上个视频中我提到

00:00:12.669 --> 00:00:18.740
你可以使用内置函数 type() 直接查看任何对象的类型

00:00:18.739 --> 00:00:24.554
通过 type() 我们可以发现同一数字可以表示成不同的类型

00:00:24.554 --> 00:00:27.509
每种类型都有自己的一组行为

00:00:27.510 --> 00:00:29.775
顺便提一下

00:00:29.774 --> 00:00:34.789
这里 我们对另一个函数 type() 的输出调用函数 print()

00:00:34.789 --> 00:00:39.670
我们使用括号来定义函数的运行顺序

00:00:39.670 --> 00:00:43.450
需要先评估一组括号里的函数

00:00:43.450 --> 00:00:48.435
然后再作为另一个函数的输入

00:00:48.435 --> 00:00:54.079
这里 首先运行 type 函数 然后输出它的结果

00:00:54.079 --> 00:00:57.229
不同的类型具有不同的属性

00:00:57.229 --> 00:00:59.824
在设计计算机程序时

00:00:59.825 --> 00:01:05.075
你需要根据如何使用数据来为属性选择一种类型

00:01:05.075 --> 00:01:09.719
例如 如果你想在句子中使用某个数字

00:01:09.719 --> 00:01:13.525
则最简单的方法是将该数字设为字符串

00:01:13.525 --> 00:01:16.185
如果你想表示 true 或 false 值

00:01:16.185 --> 00:01:20.850
则用布尔型（而不是字符串）会简单很多

00:01:20.849 --> 00:01:22.384
为何更简单呢？

00:01:22.385 --> 00:01:26.960
每种数据类型都有专门的函数

00:01:26.959 --> 00:01:28.804
很快你将学习这些函数

00:01:28.805 --> 00:01:34.205
有时候 你无法控制所接收的数据的类型

00:01:34.204 --> 00:01:36.429
虽然依然需要使用它

00:01:36.430 --> 00:01:38.230
好消息是 你可以使用旧对象创建新的对象

00:01:38.230 --> 00:01:42.560
并在创建过程中更改类型

00:01:42.560 --> 00:01:46.135
我们在整型和浮点型视频中讲过这方面的知识

00:01:46.135 --> 00:01:53.219
例如 这里我们用浮点型创建了一个整型 并赋值给变量 count

00:01:53.219 --> 00:01:56.329
这里 我们使用 house_number 创建了一个字符串

00:01:56.329 --> 00:02:00.944
并用它来构建一个更大的 address 字符串

00:02:00.944 --> 00:02:03.084
首先是 house_number

00:02:03.084 --> 00:02:06.274
然后是 street_name 和 town_name

00:02:06.275 --> 00:02:09.344
可以看出 house_number 目前是整型

00:02:09.344 --> 00:02:12.359
我们可以像这样将其更改为字符串

00:02:12.360 --> 00:02:16.560
并使用加号创建完整的地址

00:02:16.560 --> 00:02:20.099
还可以像这样使用字符串构建数字

00:02:20.099 --> 00:02:23.564
我们以字符串 35 开始

00:02:23.564 --> 00:02:25.789
但是通过将其放入 float() 函数中

00:02:25.789 --> 00:02:28.009
可以看出现在类型发生了变化

