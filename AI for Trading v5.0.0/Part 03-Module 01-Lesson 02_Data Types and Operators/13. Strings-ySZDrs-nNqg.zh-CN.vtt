WEBVTT
Kind: captions
Language: zh-CN

00:00:03.290 --> 00:00:08.879
编程经常涉及的不仅仅是数字和算术

00:00:08.880 --> 00:00:12.615
有时候还需要处理文本

00:00:12.615 --> 00:00:14.935
要在 Python 中处理文本

00:00:14.935 --> 00:00:16.920
你需要使用字符串

00:00:16.920 --> 00:00:20.835
字符串是一系列不可改变的有序字符

00:00:20.835 --> 00:00:24.375
稍后我们会深入讲解不可改变和有序是什么意思

00:00:24.375 --> 00:00:27.359
你可以使用引号来创建字符串

00:00:27.359 --> 00:00:30.794
单引号和双引号都可以

00:00:30.795 --> 00:00:34.410
但是有一些极端情况 我们稍后会讲解

00:00:34.409 --> 00:00:41.564
在这两种情况下 我都输出了字符串“hello”并获得输出结果“hello”

00:00:41.564 --> 00:00:46.974
我们可以像对待数字一样将变量设为一个字符串

00:00:46.975 --> 00:00:49.225
字符串可以包含任何字符

00:00:49.225 --> 00:00:53.320
甚至包括空格 标点和数字

00:00:53.320 --> 00:00:58.859
但是 如果我们希望在字符串中包含引号 该怎么办？

00:00:58.859 --> 00:01:02.034
因为我们使用引号来定义字符串

00:01:02.034 --> 00:01:04.435
因此就存在一个小小的问题

00:01:04.435 --> 00:01:08.325
这段代码并不能像我们希望的那样运行

00:01:08.325 --> 00:01:12.510
Python 提供了两种解决方案

00:01:12.510 --> 00:01:19.140
第一种是将字符串放在单引号里 而不是双引号里 就像这样

00:01:19.140 --> 00:01:23.768
你可以使用任何一种引号来定义字符串

00:01:23.768 --> 00:01:30.750
但有时候你需要定义同时包含单引号和双引号的字符串

00:01:30.750 --> 00:01:33.165
这时候该怎么办？在这种情况下

00:01:33.165 --> 00:01:36.535
可以使用反斜杠来转义引号

00:01:36.534 --> 00:01:40.959
此处 字符串用单引号限定

00:01:40.959 --> 00:01:46.919
字符串中的单引号前面有个反斜杠

00:01:46.920 --> 00:01:49.375
这样 Python 便知道应该将其当做字符串的一部分

00:01:49.375 --> 00:01:53.123
而不是表示字符串结束的引号

00:01:53.123 --> 00:01:55.550
定义好字符串后

00:01:55.549 --> 00:01:58.519
我们可以对字符串应用

00:01:58.519 --> 00:02:03.319
整型和浮点型数据用到的运算符

00:02:03.319 --> 00:02:07.684
例如 我们可以使用加号将字符串放到一起

00:02:07.685 --> 00:02:11.509
并使用乘法来重复字符串

00:02:11.509 --> 00:02:14.544
我们来分别看一个示例

00:02:14.544 --> 00:02:18.359
此处 我们的变量存储了两个单词

00:02:18.360 --> 00:02:24.955
我们可以使用加号将这两个字符串连到一起并输出结果

00:02:24.955 --> 00:02:28.794
这与数字相加完全不同

00:02:28.794 --> 00:02:32.870
注意两个名称连到一起了

00:02:32.870 --> 00:02:34.939
但是缺少空格

00:02:34.939 --> 00:02:38.930
Python 在处理字符串时 完全遵守字面意思

00:02:38.930 --> 00:02:41.900
如果我们希望所写的内容有意义

00:02:41.900 --> 00:02:45.875
则需要明确包含空格和标点

00:02:45.875 --> 00:02:49.444
这次 我们获得了有意义的字符串

00:02:49.444 --> 00:02:53.969
将两个单词放到一起 并在中间加个空格

00:02:53.969 --> 00:02:57.520
注意 之前我提到 在括号里 例如在 print 语句里

00:02:57.520 --> 00:03:01.936
空格并不重要

00:03:01.936 --> 00:03:09.069
这里 对于字符串 可以看出引号中间的空格的确重要

00:03:09.069 --> 00:03:12.794
我们再试试另一个数学运算

00:03:12.794 --> 00:03:16.639
实际上我们也可以使用乘法运算符

00:03:16.639 --> 00:03:20.375
它会按照乘数重复字符串

00:03:20.375 --> 00:03:22.780
这里重复了五次

00:03:22.780 --> 00:03:27.439
虽然对于字符串来说 加法和乘法具有不同的应用

00:03:27.439 --> 00:03:30.530
但是减法和除法则没有

00:03:30.530 --> 00:03:37.157
这里 系统提示对于除法运算符来说 字符串是不受支持的类型

00:03:37.157 --> 00:03:40.189
Python 中有一个实用的内置函数

00:03:40.189 --> 00:03:44.579
叫做 len 它可以告诉我们字符串的长度

00:03:44.580 --> 00:03:48.025
表示字符串中的字符数量

00:03:48.025 --> 00:03:52.159
len 就像 print 它是一个内置函数

00:03:52.159 --> 00:03:56.750
在括号中获得一个值 并执行操作

00:03:56.750 --> 00:04:03.335
len 与 print 的区别是它可以返回一个存储在变量中的值

00:04:03.335 --> 00:04:07.985
在此示例中 函数 len 输出数字 7

00:04:07.985 --> 00:04:11.535
然后将 7 存储在 Udacity_length 变量中

00:04:11.534 --> 00:04:16.404
内置是指 Python 直接为我们提供了这些函数

00:04:16.404 --> 00:04:19.519
稍后 我们将了解如何定义我们自己的函数

