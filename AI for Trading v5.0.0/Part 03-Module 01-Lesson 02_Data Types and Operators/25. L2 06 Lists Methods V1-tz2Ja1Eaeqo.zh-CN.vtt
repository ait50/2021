WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.250
之前 当我们创建一个存储不可变对象的变量时

00:00:05.250 --> 00:00:09.029
该不可变对象的值保存到了内存中

00:00:09.029 --> 00:00:15.570
在此示例中 我们创建一个变量 name 值为 Jim 并将其赋值给另一个变量 Student

00:00:15.570 --> 00:00:19.170
值 Jim 赋值给了 Student

00:00:19.170 --> 00:00:22.605
因此 当我们对 name 重新赋值 将其更新为 Tim 后

00:00:22.605 --> 00:00:26.980
这一变化没有体现到 Student 的值中

00:00:26.980 --> 00:00:30.420
列表与字符串不同 因为它们可变

00:00:30.420 --> 00:00:36.465
在此示例中 我们创建一个列表 scores 并将同一列表赋值给变量 grades

00:00:36.465 --> 00:00:39.660
“B”, “C”, “A”, “D”, “B”, “A”

00:00:39.659 --> 00:00:42.329
有六个字母

00:00:42.329 --> 00:00:48.750
当我们更改 scores 列表 使第四个分数从 D 变成 B

00:00:48.750 --> 00:00:52.335
会同时影响到 scores 和 grades

00:00:52.335 --> 00:00:55.469
scores 和 grades 都是同一列表的变量名称

00:00:55.469 --> 00:01:01.784
两个名称都可以用来访问和更改该列表

00:01:01.784 --> 00:01:04.200
包含可变对象和不可变对象的变量

00:01:04.200 --> 00:01:10.409
行为非常不同 有时候会出现令人意外的结果

00:01:10.409 --> 00:01:14.640
多多尝试 使用 print() 函数并尽量仔细检查你的代码

00:01:14.640 --> 00:01:19.500
确保程序正确地记录了数据

00:01:19.500 --> 00:01:22.022
在探索列表时

00:01:22.022 --> 00:01:25.140
可以熟悉一些实用的函数

00:01:25.140 --> 00:01:28.954
len() 返回的是列表中的元素数量

00:01:28.954 --> 00:01:32.500
max() 返回的是列表中的最大元素

00:01:32.500 --> 00:01:38.545
最大元素的判断依据是列表中的对象类型

00:01:38.545 --> 00:01:43.135
数字列表的最大元素是最大数字

00:01:43.135 --> 00:01:46.960
字符串列表的最大元素是

00:01:46.959 --> 00:01:51.280
按照字母顺序排序时 列表中排在最后一位的元素

00:01:51.280 --> 00:01:54.939
对于此列表来说 是 Reticulated Python

00:01:54.939 --> 00:01:57.414
R 是按字母顺序排序后最大的字母

00:01:57.415 --> 00:02:00.220
换句话说

00:02:00.219 --> 00:02:02.469
R 大于 B A B 和 A

00:02:02.469 --> 00:02:06.209
原理是 max() 函数

00:02:06.209 --> 00:02:09.989
按照大于比较运算符进行定义

00:02:09.990 --> 00:02:14.640
大于比较运算符适合很多非数字类型

00:02:14.639 --> 00:02:18.104
如果你要处理的对象可以使用这个运算符进行比较

00:02:18.104 --> 00:02:21.179
那么你可以对该对象列表使用 max() 函数

00:02:21.180 --> 00:02:25.050
对于字符串来说 标准比较方式是按照字母顺序

00:02:25.050 --> 00:02:29.895
因此该列表的最大元素是按字母顺序排序后排在最后一位的元素

00:02:29.895 --> 00:02:35.460
虽然你可以创建包含多种类型的列表 例如这个示例

00:02:35.460 --> 00:02:39.060
其中包含整数和文本 但是如果列表包含不同的不可比较类型的元素

00:02:39.060 --> 00:02:42.960
则 max() 函数无法定义

00:02:42.960 --> 00:02:47.310
在此示例中 可以看出这种混合数据类型使该函数出错了

00:02:47.310 --> 00:02:52.694
min() 是 max() 的对立形式 返回列表中的最小元素

00:02:52.694 --> 00:02:56.250
sorted() 按照从小到大的顺序返回列表副本

00:02:56.250 --> 00:03:00.509
并且不更改原始列表

00:03:00.509 --> 00:03:03.254
在此示例中 对于叫做 sizes 的列表

00:03:03.254 --> 00:03:05.174
顺序是升序

00:03:05.175 --> 00:03:08.100
你可以通过添加可选参数 reverse = true

00:03:08.099 --> 00:03:11.204
按照从大到小的顺序排序

00:03:11.205 --> 00:03:13.770
现在顺序是倒序了

