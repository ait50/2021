WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.345
Okay. So now, let's generate all subsets.

00:00:03.345 --> 00:00:06.929
One suggestion that might make it easier is to write

00:00:06.929 --> 00:00:10.230
your code outside of this function so that you can play around with it.

00:00:10.230 --> 00:00:14.070
So, for instance, let's say all our features is,

00:00:14.070 --> 00:00:17.550
let's just say it's a list of zero, one,

00:00:17.550 --> 00:00:25.935
two, and let's say we want to look through all of the features,

00:00:25.934 --> 00:00:27.945
all of the sizes.

00:00:27.945 --> 00:00:36.899
So let's say for size in range from one to all features.

00:00:38.289 --> 00:00:41.509
Let's see what the sizes are here.

00:00:41.509 --> 00:00:46.034
So you can see that we'll have the size value be one and two,

00:00:46.034 --> 00:00:48.769
but let's just also include the entire set,

00:00:48.770 --> 00:00:51.140
so that would be of size three.

00:00:51.140 --> 00:00:54.384
So let's say length of all_features plus one.

00:00:54.384 --> 00:01:00.719
So now, are sizes that we can input into the combination will be one, two, and three.

00:01:01.869 --> 00:01:11.935
So now, let's say we can call combinations passing in all_features,

00:01:11.935 --> 00:01:17.570
and asking it to generate all subsets of this particular size.

00:01:17.569 --> 00:01:20.704
So now, let's see what happens if we print this.

00:01:20.704 --> 00:01:23.049
We can see we just get the three objects.

00:01:23.049 --> 00:01:25.009
So we want to see more inside.

00:01:25.010 --> 00:01:26.660
We're going to look through them.

00:01:26.659 --> 00:01:35.640
So combo is equal to this for subset in combo: print subset.

00:01:36.230 --> 00:01:42.185
Okay, great. So now we see that by looping through all the different sizes,

00:01:42.185 --> 00:01:44.090
for size one, we have the subsets,

00:01:44.090 --> 00:01:45.650
for size two, we have these subsets,

00:01:45.650 --> 00:01:47.150
and size three, we have this.

00:01:47.150 --> 00:01:52.530
So now, let's make sure that we cast it as a set,

00:01:53.989 --> 00:01:58.905
because this is how we'll use it in the F, given as function.

00:01:58.905 --> 00:02:02.359
So now, let's save this all inside a list.

00:02:02.359 --> 00:02:10.150
So for now, let's say set L is going to be a list,

00:02:10.400 --> 00:02:14.895
and let's go sets.

00:02:14.895 --> 00:02:17.925
So, instead of printing it, I'm just going to add it.

00:02:17.925 --> 00:02:23.285
Append, sets_ l.append, the set,

00:02:23.284 --> 00:02:25.264
and let's see what it looks like.

00:02:25.264 --> 00:02:28.864
So at the end, I print out sets_l.

00:02:28.865 --> 00:02:33.683
You can see it's a list containing all the subsets,

00:02:33.683 --> 00:02:37.324
and now remember the hints that we also want to include,

00:02:37.324 --> 00:02:39.694
the set containing none.

00:02:39.694 --> 00:02:41.599
So if we want to do that,

00:02:41.599 --> 00:02:48.919
then sets_l.append, set None.

00:02:48.919 --> 00:02:53.269
Okay. So now, it includes all the subsets including the empty set.

00:02:53.270 --> 00:02:58.040
Let's go ahead and fill in this function now because it looks like it's working.

00:02:58.039 --> 00:03:04.530
Great combination. So combo is equal to combinations all_features,

00:03:04.530 --> 00:03:07.349
and choose the size.

00:03:07.349 --> 00:03:10.530
Then for subset in combo,

00:03:10.530 --> 00:03:15.884
sets_l.append, the set, subset.

00:03:15.884 --> 00:03:18.465
Okay. Also, remember the empty set.

00:03:18.465 --> 00:03:25.560
So sets_l.append, set None,

00:03:25.560 --> 00:03:27.284
then return sets list.

00:03:27.284 --> 00:03:29.314
So let's try out the function,

00:03:29.314 --> 00:03:33.930
and it gets what we expected in what we have over here.

00:03:33.930 --> 00:03:37.000
Great. Please continue with the lesson.

