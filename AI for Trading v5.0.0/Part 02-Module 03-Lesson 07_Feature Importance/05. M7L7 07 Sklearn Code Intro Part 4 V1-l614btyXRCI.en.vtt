WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.679
Okay. So let's look at features used for splitting at each node.

00:00:04.679 --> 00:00:11.649
So here, again, is documentation that I pasted from the source code that's over here.

00:00:12.109 --> 00:00:15.869
So I just copied that into the notebook.

00:00:15.869 --> 00:00:19.515
So if we were to look at it,

00:00:19.515 --> 00:00:23.490
the feature one is used to split at node zero.

00:00:23.489 --> 00:00:25.484
So at index zero,

00:00:25.484 --> 00:00:32.100
we see the number 1, that means that feature number 1 is used to split there.

00:00:32.100 --> 00:00:35.954
The feature zero is used to split on node two.

00:00:35.954 --> 00:00:39.045
So, we go to index 0, 1, 2.

00:00:39.045 --> 00:00:42.255
For node two you can see the number 0 is here,

00:00:42.255 --> 00:00:46.825
that means feature zero is used to split at node two.

00:00:46.825 --> 00:00:49.565
We also see a couple of negative two values.

00:00:49.564 --> 00:00:53.164
The negative two values indicate that these are leaf nodes,

00:00:53.164 --> 00:00:56.554
so no features are used for splitting at these nodes.

00:00:56.554 --> 00:01:00.229
Again, we can look at the visual here.

00:01:00.229 --> 00:01:02.390
So you can see that at node zero,

00:01:02.390 --> 00:01:04.090
it split on feature one,

00:01:04.090 --> 00:01:06.870
and then node 0, 1, 2,

00:01:06.870 --> 00:01:10.665
at node two it split on feature zero.

00:01:10.665 --> 00:01:12.359
For the other nodes,

00:01:12.359 --> 00:01:14.950
you can see that it doesn't split on any features,

00:01:14.950 --> 00:01:20.570
and that's why in this list you see a negative two for the leaf nodes.

00:01:20.569 --> 00:01:23.854
Next, we'll look at the number of samples in each node.

00:01:23.855 --> 00:01:28.975
So we can use either n node samples or weighted n node samples.

00:01:28.974 --> 00:01:30.594
In this case with a tree,

00:01:30.594 --> 00:01:33.004
you'll actually get the same number for these.

00:01:33.004 --> 00:01:39.229
But this is the number of observations that trickled down into that particular node.

00:01:39.230 --> 00:01:43.049
So you can see that in our sample dataset,

00:01:43.049 --> 00:01:45.810
we started out with 100 observations,

00:01:45.810 --> 00:01:48.015
100 grows in the x variable,

00:01:48.015 --> 00:01:49.844
and so at the root node,

00:01:49.844 --> 00:01:54.855
you can see that there's 100 observations.

00:01:54.855 --> 00:01:59.625
Next, for node one and node two,

00:01:59.625 --> 00:02:04.484
you can see that there's 50 observations that go here,

00:02:04.484 --> 00:02:08.129
50 observations that go here, and so forth.

00:02:08.129 --> 00:02:13.579
So weighted n node samples is the same as n node samples for decision trees.

00:02:13.580 --> 00:02:16.340
It's different for random forests where there's

00:02:16.340 --> 00:02:19.930
a subsample of datapoints that's used for each tree.

00:02:19.930 --> 00:02:23.134
So we'll just go ahead and use weighted n node samples

00:02:23.133 --> 00:02:26.794
to grab data going forward in the code below.

00:02:26.794 --> 00:02:30.259
But either one works when we're calculating the proportion of

00:02:30.259 --> 00:02:34.780
samples in a left or right child node relative to their parent node.

00:02:34.780 --> 00:02:36.430
So what I mean is that,

00:02:36.430 --> 00:02:42.185
we're going to use the weighted n node samples to help us figure out what fraction

00:02:42.185 --> 00:02:44.870
of observations trickled down from

00:02:44.870 --> 00:02:49.134
a parent node to the left child versus to the right child.

00:02:49.134 --> 00:02:52.264
So this is used to calculate proportions.

00:02:52.264 --> 00:02:57.979
Great. So continue on to the next video to learn about Gini impurity. Thanks.

