WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.149
我们的问题是

00:00:03.149 --> 00:00:05.217
如何找到一条

00:00:05.219 --> 00:00:08.980
尽可能将蓝点与红点区分开来的直线

00:00:08.980 --> 00:00:11.330
我们先来看一个简单的例子

00:00:11.330 --> 00:00:14.663
其中有三个蓝点和三个红点

00:00:14.663 --> 00:00:17.000
我们来描述一种算法

00:00:17.000 --> 00:00:19.972
得到尽可能正确区分这些点的直线

00:00:19.972 --> 00:00:21.980
计算机不知道从何处开始计算

00:00:21.980 --> 00:00:26.250
它可能随机从某个位置开始 选择一个对应的线性方程

00:00:26.250 --> 00:00:27.960
该方程定义了一条直线

00:00:27.960 --> 00:00:31.609
将整个区域分为正负两个区域 分别用蓝色和红色表示

00:00:31.609 --> 00:00:35.130
我们需要观察这条直线做的分类有多差

00:00:35.130 --> 00:00:39.399
然后到处移动它 使分类的结果越来越好

00:00:39.399 --> 00:00:40.450
现在的问题是

00:00:40.450 --> 00:00:43.310
如何判断这条直线的分类结果有多差？

00:00:43.310 --> 00:00:45.624
我们看看所有的数据点

00:00:45.624 --> 00:00:49.344
这里有四个点被正确分类

00:00:49.344 --> 00:00:56.000
即在蓝色区域的这两个蓝点和在红色区域的这两个红点

00:00:56.000 --> 00:00:58.390
这些点分类正确

00:00:58.390 --> 00:01:01.200
它们表示 “我是正确的”

00:01:01.200 --> 00:01:04.409
然后是这两个分类不正确的点

00:01:04.409 --> 00:01:09.079
也就是位于蓝色区域的红点和位于红色区域的蓝点

00:01:09.078 --> 00:01:12.048
我们想通过它们获得尽可能多的信息

00:01:12.049 --> 00:01:15.754
才能改善这条直线的分类结果

00:01:15.754 --> 00:01:18.625
这两个点可以告诉我们什么呢？

00:01:18.625 --> 00:01:20.500
这是一个分类错误的点

00:01:20.500 --> 00:01:22.560
蓝色区域的红点

00:01:22.560 --> 00:01:23.808
现在想想

00:01:23.808 --> 00:01:25.239
如果你是这个点

00:01:25.239 --> 00:01:27.609
你会告诉这条线如何移动？

00:01:27.608 --> 00:01:31.084
你会告诉它应该是靠近你 还是远离你？

00:01:31.084 --> 00:01:32.963
这就是我们的问题

00:01:32.965 --> 00:01:37.000
那些分类错误的点会希望这条直线更加靠近 还是更为远离它们？

