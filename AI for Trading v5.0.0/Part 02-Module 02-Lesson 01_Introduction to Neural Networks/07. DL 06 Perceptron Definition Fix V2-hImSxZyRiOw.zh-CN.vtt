WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.780
那么我们来复习一下

00:00:01.780 --> 00:00:05.070
我们得到所有这些学生的数据

00:00:05.070 --> 00:00:09.629
蓝点代表接受的学生 红点代表拒绝的学生

00:00:09.630 --> 00:00:15.705
我们得到的模型包含方程式 2*Test+Grades-18

00:00:15.705 --> 00:00:18.390
可以得到这个边界线

00:00:18.390 --> 00:00:22.140
其中分数为 0 和一个预测

00:00:22.140 --> 00:00:26.445
预测说明如果分数大于等于 0 则学生被接受

00:00:26.445 --> 00:00:28.839
如果分数为负 学生被拒绝

00:00:28.839 --> 00:00:31.440
所以现在我们介绍感知器的概念

00:00:31.440 --> 00:00:33.359
这是神经网络的基础

00:00:33.359 --> 00:00:36.310
是指把我们的方程式进行编码 形成小图形

00:00:36.310 --> 00:00:38.625
我们构建的方式如下

00:00:38.625 --> 00:00:42.475
这是我们的数据和分界线 我们在节点内进行拟合

00:00:42.475 --> 00:00:44.760
现在我们增加输入的小节点

00:00:44.759 --> 00:00:47.619
在这个例子中分别是测试 (Test) 和分数 (Grades)

00:00:47.619 --> 00:00:52.399
在这个例子中我们可以看到 测试为 7 分数为 6

00:00:52.399 --> 00:00:55.439
感知器要做的是把点 (7,6) 绘制在图中

00:00:55.439 --> 00:00:59.259
并检查这个点位于正区域还是负区域

00:00:59.259 --> 00:01:00.640
如果这个点位于正区域

00:01:00.640 --> 00:01:02.009
会返回 是

00:01:02.009 --> 00:01:05.784
如果位于负区域 会返回 否

00:01:05.784 --> 00:01:08.879
我们来回忆下方程式 

00:01:08.879 --> 00:01:12.689
Score = 2*Test+Grades-18

00:01:12.689 --> 00:01:15.149
我们预测包括 如果分数为正数或 0

00:01:15.150 --> 00:01:17.550
那么接受这个学生

00:01:17.549 --> 00:01:20.709
如果分数为负 就会拒绝这个学生

00:01:20.709 --> 00:01:23.849
这些权重 2、1 和 -18

00:01:23.849 --> 00:01:27.596
定义了线性方程式

00:01:27.596 --> 00:01:30.409
所以我们在图形中使用它们作为标签

00:01:30.409 --> 00:01:34.484
2 和 1 分别标记了 X1 和 X2 的边

00:01:34.484 --> 00:01:38.655
而偏置单元 -18 标记了节点

00:01:38.655 --> 00:01:40.799
我们看到含有这些标签的节点

00:01:40.799 --> 00:01:44.384
想起它们生成的线性方程式

00:01:44.385 --> 00:01:48.165
另一种抓取这个节点的方式是把偏差考虑成输入的一部分

00:01:48.165 --> 00:01:51.815
既然 W1 乘以 X1  W2 乘以 X2

00:01:51.814 --> 00:01:54.609
很容易可以想到 B 乘以 1

00:01:54.609 --> 00:01:58.983
所以我们可以标记 B 边缘为 1

00:01:58.983 --> 00:02:01.890
那么这个节点可以把输入节点的值

00:02:01.890 --> 00:02:05.760
乘以对应边缘的值

00:02:05.760 --> 00:02:07.300
然后添加它们

00:02:07.299 --> 00:02:10.240
最后检查结果是否大于等于 0

00:02:10.240 --> 00:02:14.260
如果是 那么节点返回 是 以及值 1

00:02:14.259 --> 00:02:18.924
如果不是 那么节点返回 否 以及值 0

00:02:18.925 --> 00:02:20.760
我们会在课程中同时使用两种符号记法

00:02:20.759 --> 00:02:23.474
虽然第二个更为常用

00:02:23.474 --> 00:02:24.948
在通常情况下

00:02:24.949 --> 00:02:26.690
这是节点是这样的

00:02:26.689 --> 00:02:29.789
我们在这里有节点 然后添加输入

00:02:29.789 --> 00:02:34.344
值 X1 到 Xn 和 1

00:02:34.344 --> 00:02:38.294
边缘为权重 W1 到 Wn

00:02:38.294 --> 00:02:42.179
B 对应偏置单元

00:02:42.180 --> 00:02:45.629
那么节点计算线性方程 Wx+B

00:02:45.629 --> 00:02:49.757
即对 Wixi+B 求和

00:02:49.757 --> 00:02:53.545
其中 i 为 1 到 n 

00:02:53.545 --> 00:02:57.314
然后节点检查了值是否大于等于0

00:02:57.314 --> 00:03:01.889
如果是 那么返回值 1 和是

00:03:01.889 --> 00:03:05.844
如果不是 那么返回值 0 和否

00:03:05.844 --> 00:03:07.650
注意我们使用一个隐函数

00:03:07.650 --> 00:03:10.340
又称为阶跃函数

00:03:10.340 --> 00:03:14.325
如果输入为正数或 0 阶跃函数返回 1

00:03:14.324 --> 00:03:16.919
如果输入为负 阶跃函数返回 0

00:03:16.919 --> 00:03:21.389
那么实际上 这些感知器可以看作节点的组合

00:03:21.389 --> 00:03:23.879
其中第一个节点计算线性方程式和权重上的输入

00:03:23.879 --> 00:03:28.782
第二个节点把阶跃函数应用到结果中

00:03:28.782 --> 00:03:30.704
可以用以下图形进行表示

00:03:30.705 --> 00:03:34.005
求和符号代表第一个节点的线性函数

00:03:34.004 --> 00:03:37.305
绘图表示第二个节点的阶跃函数

00:03:37.305 --> 00:03:40.110
随后我们会使用不同的阶跃函数

00:03:40.110 --> 00:03:43.385
因此这是说明节点中指明阶跃函数有效性的原因

00:03:43.384 --> 00:03:46.284
正如我们所了解的 感知器有两种表示方法

00:03:46.284 --> 00:03:50.490
左侧是把偏置单元作为一个输入节点

00:03:50.490 --> 00:03:54.370
右侧则是在节点中包含了误差

