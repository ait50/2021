WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.245
首先我们来看看数学

00:00:02.245 --> 00:00:07.020
我们要标记对应测试的横坐标 记作变量 x1

00:00:07.019 --> 00:00:11.329
对应测试的纵坐标 记作变量 x2

00:00:11.330 --> 00:00:14.250
所以这条分隔蓝点和红点的分界线

00:00:14.250 --> 00:00:17.504
可以用线性方程表示

00:00:17.504 --> 00:00:22.820
这条线可以是方程式 2x1+x2-18=0

00:00:22.820 --> 00:00:24.214
这是什么意思呢？

00:00:24.214 --> 00:00:27.629
这说明我们接受或拒绝学生的方法

00:00:27.629 --> 00:00:31.529
简单来说 把这个方程结果作为我们的分数

00:00:31.530 --> 00:00:34.685
Score = 2*Test+Grades-18

00:00:34.685 --> 00:00:36.545
每当输入学生的数据 我们就计算他们的分数

00:00:36.545 --> 00:00:38.015
如果他们的分数为正

00:00:38.015 --> 00:00:39.899
那么我们会接受这个学生

00:00:39.899 --> 00:00:42.710
如果分数为负 那么我们拒绝这个学生

00:00:42.710 --> 00:00:44.460
这叫做预测

00:00:44.460 --> 00:00:46.620
根据惯例 如果分数为 0

00:00:46.619 --> 00:00:49.484
我们也会接受学生 虽然最后这样不会产生太大影响

00:00:49.484 --> 00:00:53.210
就是这样 线性方程是我们的模型

00:00:53.210 --> 00:01:00.420
在更普遍的情况中 我们的边界线可能是以下这种方程 w1x1+w2x2+b=0

00:01:00.420 --> 00:01:04.450
我们用向量记法简化这个方程为 Wx+b=0

00:01:04.450 --> 00:01:09.835
其中 W 是向量 (w1,w2) x 是向量 (x1,x2)

00:01:09.834 --> 00:01:13.364
然后我们只需要得到两个向量的乘积

00:01:13.364 --> 00:01:15.405
我们把 x 作为输入

00:01:15.405 --> 00:01:19.000
W 作为权重 b 作为偏差

00:01:19.000 --> 00:01:20.983
现在对于一个学生的坐标 (x1,x2)

00:01:20.983 --> 00:01:26.189
我们用一个标签表示 y 这个标签是我们要预测的内容

00:01:26.189 --> 00:01:27.810
那么如果学生得到接受

00:01:27.810 --> 00:01:29.280
即为蓝点

00:01:29.280 --> 00:01:31.090
那么标签是 Y=1

00:01:31.090 --> 00:01:33.338
那么如果学生被拒绝

00:01:33.337 --> 00:01:36.809
即为红点 标签为 Y=0

00:01:36.810 --> 00:01:39.825
所以每个点以 (x1,x2) 进行表示

00:01:39.825 --> 00:01:45.810
蓝点时 Y=1 红点时 Y=0

00:01:45.810 --> 00:01:48.570
最后我们得到的预测称为 Y-hat

00:01:48.569 --> 00:01:51.919
这是算法所预测的标签结果

00:01:51.920 --> 00:01:56.614
在这个例子中如果这个算法预测到学生被接受 那么 Y-hat 为 1

00:01:56.614 --> 00:01:59.010
即点位于线段上方

00:01:59.010 --> 00:02:03.210
如果这个算法预测到学生被拒绝 那么 Y-hat 为 0

00:02:03.209 --> 00:02:05.864
即点位于线段下方

00:02:05.864 --> 00:02:11.507
在数学项中 这表示如果 wx+b 大于或等于 0 那么 Y-hat 为 1

00:02:11.508 --> 00:02:17.469
如果 wx+b 小于 0 那么 Y-hat 为 0

00:02:17.469 --> 00:02:20.099
总之 点位于线段上方 那么 Y-hat 为 1

00:02:20.099 --> 00:02:24.810
点位于线段下方  那么 Y-hat 为 0

00:02:24.810 --> 00:02:30.314
蓝点得到 Y=1 红点得到 Y=0

00:02:30.314 --> 00:02:35.609
这个算法的目的是让 Y-hat  尽量逼近 Y

00:02:35.610 --> 00:02:39.000
这样相当于恰好找到边界线

00:02:39.000 --> 00:02:43.009
让蓝点位于线段上方 红点位于线段下方

