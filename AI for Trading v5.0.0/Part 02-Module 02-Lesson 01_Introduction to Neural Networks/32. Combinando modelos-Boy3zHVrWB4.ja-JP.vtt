WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:03.464
それではこれらの非線形モデルを作成する方法を説明します

00:00:03.464 --> 00:00:06.058
これからやろうとしているのは非常に単純なトリックです

00:00:06.059 --> 00:00:12.060
次のように 2つの線形モデルを組み合わせて非線形モデルにします

00:00:12.060 --> 00:00:13.769
視覚的にはこのようになります

00:00:13.769 --> 00:00:17.518
2つのモデルから 右側のモデルが作成されました

00:00:17.518 --> 00:00:20.084
モデルに対して算術演算を行っているようなものです

00:00:20.085 --> 00:00:24.160
「この線とこの線を加算するとその曲線と等しい」と言っているかのようです

00:00:24.160 --> 00:00:26.824
これを数学的に行う方法を説明しましょう

00:00:26.824 --> 00:00:30.750
私たちが知っている線形モデルは確率空間全体です

00:00:30.750 --> 00:00:36.478
これは すべての点について その点が青である確率が提供されるということです

00:00:36.478 --> 00:00:39.179
たとえば この点は青い領域にあるため

00:00:39.179 --> 00:00:43.890
青である確率は0.7です

00:00:43.890 --> 00:00:47.250
2番目の確率空間にある同じ点も青の領域にあるため

00:00:47.250 --> 00:00:52.170
青である確率は0.8です

00:00:52.170 --> 00:00:53.353
問題は これら2つを

00:00:53.353 --> 00:00:55.890
どのように組み合わせるかです

00:00:55.890 --> 00:01:00.225
2つの数字を組み合わせる最も簡単な方法は それらを加算することです

00:01:00.225 --> 00:01:05.409
つまり0.8+0.7=1.5です

00:01:05.409 --> 00:01:09.890
しかしこれは1よりも大きいため もはや確率ではなさそうです

00:01:09.890 --> 00:01:15.915
確率は0～1の範囲内である必要があります それではどうすればよいか?

00:01:15.915 --> 00:01:20.980
1より大きいこの数値を0～1の範囲の数値に変えるにはどうすればよいでしょうか?

00:01:20.980 --> 00:01:24.079
以前も同じ状況に遭遇したことがあります

00:01:24.078 --> 00:01:27.744
数値を0～1の範囲内の数値に変える優れたツールがあります

00:01:27.745 --> 00:01:30.234
それはシグモイド関数です

00:01:30.233 --> 00:01:32.780
これこそがやろうとしていることです

00:01:32.780 --> 00:01:36.858
シグモイド関数を1.5に適用して値0.82を得ました

00:01:36.858 --> 00:01:40.188
これが 結果として得られる確率空間で

00:01:40.188 --> 00:01:44.568
この点が青になる確率です

00:01:44.569 --> 00:01:47.299
これで 平面内のすべての点に対して確率関数を作成できたので

00:01:47.299 --> 00:01:51.243
2つのモデルを組み合わせることができました

00:01:51.243 --> 00:01:54.093
一方の確率ともう一方の確率を計算し

00:01:54.093 --> 00:01:56.140
それらを加算してから

00:01:56.140 --> 00:01:59.334
シグモイド関数を適用します

00:01:59.334 --> 00:02:01.340
それでは この合計に重みを付けたい場合はどうでしょうか?

00:02:01.340 --> 00:02:04.370
1番上のモデルの確率を2番目の確率より優先させたい場合は

00:02:04.370 --> 00:02:07.849
どうすればよいでしょうか?

00:02:07.849 --> 00:02:11.569
結果として得られるモデルは 上部のモデルのようになり

00:02:11.568 --> 00:02:15.698
その後下部のモデルのようになります重みを追加することができます

00:02:15.699 --> 00:02:22.355
たとえば 「7×最初のモデル+2番目のモデルが必要」とすることができます

00:02:22.354 --> 00:02:24.240
実際 必要な重みを追加できます

00:02:24.241 --> 00:02:29.574
たとえば 「7×最初モデル+5×2番目のモデル」とすることができます

00:02:29.574 --> 00:02:34.335
モデルを結合するときには 最初の確率をとり それに7を掛け

00:02:34.335 --> 00:02:36.789
 次に2番目の確率をとり 5を掛けます

00:02:36.788 --> 00:02:43.293
必要に応じてバイアスを追加することもできます

00:02:43.294 --> 00:02:45.526
たとえば バイアスが-6だとすると

00:02:45.526 --> 00:02:48.020
それを方程式全体に加算します

00:02:48.020 --> 00:02:52.735
この7倍+この5倍-6

00:02:52.735 --> 00:02:54.914
つまり2.9です

00:02:54.913 --> 00:03:00.679
シグモイド関数を適用すると 0.95になります

00:03:00.680 --> 00:03:02.680
以前とほとんど同じですね?

00:03:02.680 --> 00:03:06.085
入力値に重みとバイアスを加えた値の線形結合である

00:03:06.085 --> 00:03:10.240
線を得る前です

00:03:10.240 --> 00:03:13.300
これでこのモデルは 前の2つのモデルに

00:03:13.300 --> 00:03:17.650
重みとバイアスを加えたものの線形結合になりました

00:03:17.650 --> 00:03:18.905
それはほとんど同じものです

00:03:18.905 --> 00:03:21.599
右のこの曲がったモデルとほぼ同じです

00:03:21.599 --> 00:03:25.818
これは 前の2つの線形モデルの線形結合です

00:03:25.818 --> 00:03:30.573
また 2つのモデル間の線と考えることができます

00:03:30.574 --> 00:03:32.069
これは偶然ではありません

00:03:32.068 --> 00:03:35.435
これが ニューラルネットワークの構築方法の核心です

00:03:35.435 --> 00:03:38.628
もちろん これを継続すると 既存のモデルの線形結合から

00:03:38.628 --> 00:03:43.228
もっと新しい複雑なモデルを得ることができると考えられます

00:03:43.229 --> 00:03:47.000
そして これがニューラルネットワークを構築するためにやろうとしていることです

