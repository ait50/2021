WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.100
我们来看适用性最广的情况

00:00:03.100 --> 00:00:05.730
此时矩阵有 a、b、c、d 四个项

00:00:05.730 --> 00:00:08.370
记住 这个矩阵只是把

00:00:08.369 --> 00:00:12.019
描述线性变换所需的信息打包起来了

00:00:12.019 --> 00:00:15.339
请牢记 第一列的值 a 和 c

00:00:15.339 --> 00:00:18.940
是第一个基向量移动后的坐标

00:00:18.940 --> 00:00:22.530
第二列的值 b 和 d 是第二个基向量移动后的坐标

00:00:22.530 --> 00:00:25.289
对某个向量 [x , y] 进行这个变换

00:00:25.289 --> 00:00:27.059
结果是什么呢？

00:00:27.059 --> 00:00:29.769
其实就是 x 乘 [a , c]

00:00:29.769 --> 00:00:32.269
加 y 乘 [b , d]

00:00:32.270 --> 00:00:34.740
求和

00:00:34.740 --> 00:00:38.570
你就得到了向量 [ax + by , cx + dy]

00:00:38.570 --> 00:00:41.490
你甚至可以将这个过程定义为

00:00:41.490 --> 00:00:43.900
矩阵向量相乘

00:00:43.899 --> 00:00:46.780
把矩阵放在向量的左侧 就跟函数一样

00:00:46.780 --> 00:00:49.620
然后让高中生直接背诵这条公式

00:00:49.619 --> 00:00:53.054
省略掉中间这个对理解至关重要的部分

00:00:53.054 --> 00:00:55.500
但把这些列

00:00:55.500 --> 00:00:59.109
看作变换后的基向量

00:00:59.109 --> 00:01:04.579
把结果看作这些向量进行适当线性组合后的产物 难道不是更有趣吗？

00:01:05.540 --> 00:01:09.750
我们再来看其它用矩阵描述线性变换的例子

00:01:09.750 --> 00:01:14.629
如果把整个空间逆时针旋转九十度

00:01:14.629 --> 00:01:17.420
î 就会落在坐标 [0 , 1] 上

00:01:17.420 --> 00:01:23.170
ĵ 则落在坐标 [-1 , 0] 上

00:01:23.170 --> 00:01:27.170
于是我们得到的矩阵就有两列 分别是 0 和 1 以及 -1 和 0

00:01:27.170 --> 00:01:32.165
要求经过九十度旋转后的任意向量

00:01:32.165 --> 00:01:36.145
只需用该向量的坐标乘以这个矩阵

00:01:36.144 --> 00:01:40.204
现在我们来讲一个有趣的变换 叫做剪切变换

00:01:40.204 --> 00:01:42.510
其中 î 不变

00:01:42.510 --> 00:01:44.370
所以矩阵第一列还是 1 和 0

00:01:44.370 --> 00:01:48.070
但 ĵ 移动到了坐标 [1 , 1] 处

00:01:48.069 --> 00:01:51.324
所以矩阵第二列发生了变化

00:01:51.325 --> 00:01:53.340
这里我要啰嗦一句

00:01:53.340 --> 00:01:56.310
要求经过剪切变换的某个向量

00:01:56.310 --> 00:02:00.500
只需让该向量和矩阵相乘

00:02:00.500 --> 00:02:03.030
现在反过来看

00:02:03.030 --> 00:02:04.310
先看矩阵

00:02:04.310 --> 00:02:05.620
有两列 1 和 2

00:02:05.620 --> 00:02:07.250
3 和 1

00:02:07.250 --> 00:02:10.129
我们要根据这个矩阵来推导变换公式

00:02:10.129 --> 00:02:13.319
你可以暂停一下 看看能不能想象出变换的情景

00:02:13.319 --> 00:02:17.400
推导的办法之一是 先把 î 移动到 [1 , 2] 处

00:02:17.400 --> 00:02:20.724
然后把 ĵ 移动到 [3 , 1] 处

00:02:20.724 --> 00:02:23.189
记住要保持空间

00:02:23.189 --> 00:02:26.655
网格线平行且等距分布

00:02:26.655 --> 00:02:31.344
如果变换后的向量 î 和 ĵ 线性相关

00:02:31.344 --> 00:02:36.020
如果你还记得上个视频的话 你就知道这意味着其中一个向量是另一个向量的缩放版本

00:02:36.020 --> 00:02:39.409
也就是说 这个线性变换会把整个二维空间

00:02:39.409 --> 00:02:42.889
压缩成这两个向量所在的那条直线

00:02:42.889 --> 00:02:49.039
也即这两个线性相关向量的一维张成空间

00:02:49.490 --> 00:02:53.810
总地来说 线性变换就是一种空间变换方法

00:02:53.810 --> 00:02:57.515
变换时网格线会保持平行且等距分布

00:02:57.514 --> 00:02:59.709
原点也会保持不变

00:02:59.710 --> 00:03:04.395
值得高兴的是 这些变换可以用少数几个数字来描述

00:03:04.395 --> 00:03:07.855
也即每个基向量移动后所处的坐标

00:03:07.854 --> 00:03:13.399
矩阵其实是线性变换的一种描述方式

00:03:13.400 --> 00:03:16.580
矩阵的列就是向量的坐标 矩阵与向量相乘

00:03:16.580 --> 00:03:20.535
其实是计算给定向量如何进行变换的一种方法

00:03:20.534 --> 00:03:23.530
还有很重要的一点是

00:03:23.530 --> 00:03:27.800
看到一个矩阵 你就可以将其看作某种空间变换

00:03:27.800 --> 00:03:29.880
一旦你彻底理解了这个思路

00:03:29.879 --> 00:03:33.120
你就能深刻地理解线性代数了

