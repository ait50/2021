WEBVTT
Kind: captions
Language: zh-CN

00:00:00.860 --> 00:00:04.200
记得在上节课 我们提到

00:00:04.200 --> 00:00:09.500
可迭代对象是每次可以返回一个元素的对象

00:00:09.500 --> 00:00:13.559
列表是你用到的最常见的可迭代对象之一

00:00:13.560 --> 00:00:17.519
实际上我们到目前为止使用的很多内置函数

00:00:17.519 --> 00:00:22.567
都会返回一个迭代器 例如 enumerate

00:00:22.568 --> 00:00:26.964
迭代器是一种表示数据流的对象

00:00:26.963 --> 00:00:30.449
这与列表不同 列表也为可迭代对象

00:00:30.449 --> 00:00:34.950
但不是迭代器 因为它不是数据流

00:00:34.950 --> 00:00:41.322
稍后我们将了解在不同情形下适合使用迭代器的一些原因

00:00:41.322 --> 00:00:46.155
现在我们将学习如何使用生成器创建迭代器

00:00:46.155 --> 00:00:51.030
生成器是使用函数创建迭代器的简单方式

00:00:51.030 --> 00:00:54.539
但是 它并非是创建迭代器的唯一方式

00:00:54.539 --> 00:00:57.539
你可以在下面的注释中了解详情

00:00:57.539 --> 00:01:00.710
这些术语可能有点让人困惑

00:01:00.710 --> 00:01:05.055
生成器通常是指生成器函数

00:01:05.055 --> 00:01:09.935
但也可以指代函数生成的迭代器对象

00:01:09.935 --> 00:01:15.954
在本课程中 我将区分一下 将该函数称为生成器函数

00:01:15.954 --> 00:01:19.015
并将生成的结果称为迭代器

00:01:19.015 --> 00:01:23.200
这是一个叫做 my_range 的生成器函数

00:01:23.200 --> 00:01:27.640
它会生成一个从 0 到 x-1 的数字流

00:01:27.640 --> 00:01:33.334
注意 该函数使用了 yield 而不是关键字 return

00:01:33.334 --> 00:01:37.045
这样使函数能够一次返回一个值

00:01:37.045 --> 00:01:41.481
并且每次被调用时都从停下的位置继续

00:01:41.481 --> 00:01:47.530
关键字 yield 是将生成器与普通函数区分开来的依据

00:01:47.530 --> 00:01:48.795
从此示例中可以看出

00:01:48.795 --> 00:01:55.454
调用 my_range(4) 会返回一个稍后可以遍历的迭代器

00:01:55.454 --> 00:01:56.760
我们可以使用 for 循环

00:01:56.760 --> 00:01:59.520
输出这个数据流中的值

00:01:59.519 --> 00:02:04.590
这段代码输出了 0 1 2 和 3

00:02:04.590 --> 00:02:06.314
在下个部分

00:02:06.314 --> 00:02:10.710
你将练习编写生成器函数来创建你自己的迭代器

