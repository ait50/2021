WEBVTT
Kind: captions
Language: pt-BR

00:00:00.584 --> 00:00:02.098
FUNÇÕES
DEFININDO FUNÇÕES

00:00:02.131 --> 00:00:03.695
Como nossa
primeira atividade,

00:00:03.729 --> 00:00:07.224
vamos escrever uma função
que calcule o volume de um cilindro.

00:00:07.257 --> 00:00:10.159
A fórmula para isso
é a altura do cilindro

00:00:10.193 --> 00:00:13.123
multiplicada pelo quadrado
do seu raio,

00:00:13.157 --> 00:00:14.990
multiplicada por pi.

00:00:15.023 --> 00:00:16.955
Veja como essa fórmula
se parece

00:00:16.989 --> 00:00:20.315
quando é definida em uma função
chamada cylinder_volume.

00:00:20.348 --> 00:00:23.283
Depois de definir a função
cylinder_volume,

00:00:23.317 --> 00:00:24.964
podemos usá-la assim.

00:00:25.891 --> 00:00:29.497
Este valor é o volume de um cilindro
de 10 polegadas (25,4 cm) de altura

00:00:29.531 --> 00:00:31.645
com um raio
de 3 polegadas (7,62 cm).

00:00:31.678 --> 00:00:34.285
Vamos ver como isso funciona
nos bastidores.

00:00:35.009 --> 00:00:38.573
Uma definição de função inclui
várias partes importantes.

00:00:38.606 --> 00:00:41.305
Primeiro, vamos ver
o cabeçalho da função.

00:00:41.867 --> 00:00:45.665
Definir uma função sempre começa
com a palavra-chave "def"

00:00:45.698 --> 00:00:49.349
para indicar que o código seguinte
é uma definição de função

00:00:49.382 --> 00:00:51.812
e termina com dois pontos.

00:00:52.507 --> 00:00:55.216
Após o def,
vem o nome da função.

00:00:55.507 --> 00:00:57.998
Neste caso, cylinder_volume.

00:00:58.309 --> 00:01:01.017
Precisa ser uma palavra
sem espaços.

00:01:01.312 --> 00:01:03.728
É por isso que tem
um underscore.

00:01:04.036 --> 00:01:05.865
As regras
para nomes de função

00:01:05.899 --> 00:01:08.874
são iguais àquelas
para nomes de variáveis.

00:01:08.908 --> 00:01:12.366
Se precisar de um lembrete disso,
veja o texto abaixo deste vídeo.

00:01:13.584 --> 00:01:16.211
Após o nome da função,
estão os parênteses

00:01:16.245 --> 00:01:18.869
que incluem os argumentos
que a função espera,

00:01:18.903 --> 00:01:20.901
separados por vírgulas.

00:01:20.934 --> 00:01:24.748
Esses argumentos são valores
que são passados como entradas

00:01:24.782 --> 00:01:28.810
quando a função é chamada
e usada neste corpo.

00:01:29.386 --> 00:01:32.144
Se você escrever uma função
que não aceita argumentos,

00:01:32.178 --> 00:01:34.584
deixe
esses parênteses vazios.

00:01:34.618 --> 00:01:38.470
Aqui temos um exemplo de uma função
que não aceita argumentos.

00:01:38.752 --> 00:01:41.351
Neste caso,
não há dados de entrada

00:01:41.385 --> 00:01:43.993
com os quais queremos trabalhar
no corpo da função,

00:01:44.027 --> 00:01:46.450
portanto, nenhum argumento
é necessário.

00:01:47.135 --> 00:01:50.330
A seguir, vamos discutir
o corpo de uma função.

00:01:50.840 --> 00:01:54.045
O corpo da função é recuado
após o cabeçalho,

00:01:54.079 --> 00:01:56.852
e também é
onde a função faz o seu trabalho.

00:01:57.094 --> 00:01:58.376
Dentro deste corpo,

00:01:58.410 --> 00:02:00.483
podemos referenciar
as variáveis de argumento

00:02:00.517 --> 00:02:02.694
e definir novas variáveis.

00:02:02.727 --> 00:02:06.966
A variável pi que definimos aqui
é uma variável local.

00:02:06.999 --> 00:02:11.463
Significa que ela só pode ser
usada dentro do corpo dessa função.

00:02:11.755 --> 00:02:16.501
Não é possível tentar acessar
essa variável fora da função.

00:02:16.534 --> 00:02:19.829
Isto se deve ao que é chamado
de escopo da variável,

00:02:19.863 --> 00:02:24.101
que determina a quais variáveis
você tem acesso no Python.

00:02:24.545 --> 00:02:27.928
Vamos discutir isso em detalhes
mais adiante na lição.

00:02:28.511 --> 00:02:30.773
Muitas vezes,
o corpo de uma função

00:02:30.806 --> 00:02:33.197
vai incluir
a palavra-chave "return",

00:02:33.231 --> 00:02:35.799
que é usada para retornar
um valor de saída

00:02:35.833 --> 00:02:37.624
quando a função é chamada.

00:02:37.658 --> 00:02:40.772
O valor da expressão
que segue return

00:02:40.806 --> 00:02:43.010
é a saída da função.

00:02:43.886 --> 00:02:48.140
Neste exemplo, retornamos
o valor avaliado dessa fórmula

00:02:48.174 --> 00:02:50.441
para o volume de um cilindro.

00:02:50.474 --> 00:02:54.396
Em vez de retornar o valor
conforme é calculado,

00:02:54.429 --> 00:02:55.781
uma técnica alternativa

00:02:55.815 --> 00:02:59.264
seria calcular o volume antes
no corpo da função

00:02:59.298 --> 00:03:02.413
e armazená-lo em uma variável
chamada volume.

00:03:02.736 --> 00:03:06.127
Nesse caso,
retornaríamos o volume assim.

00:03:06.948 --> 00:03:08.909
Funções como essa
podem ser imaginadas

00:03:08.943 --> 00:03:12.304
como pequenas máquinas
que recebem entradas ou argumentos

00:03:12.338 --> 00:03:16.072
e as processam como saídas
ou valores de retorno.

00:03:16.105 --> 00:03:19.167
Esta é uma boa imagem,
mas é incompleta.

00:03:19.201 --> 00:03:23.024
Algumas funções, como print,
não retornam nada.

00:03:23.334 --> 00:03:26.374
Print exibe texto
na janela de saída,

00:03:26.408 --> 00:03:29.995
mas como vemos aqui,
o volume retornado é none.

00:03:30.028 --> 00:03:33.089
None é quando uma função
retornará por padrão,

00:03:33.123 --> 00:03:36.441
se explicitamente
ela não retornar mais nada.

00:03:36.879 --> 00:03:41.178
A diferença entre print
e return é muitas vezes confusa.

00:03:41.211 --> 00:03:43.885
Print fornece saída
para o console

00:03:43.919 --> 00:03:46.725
enquanto return fornece o valor
com o qual você pode armazenar,

00:03:46.758 --> 00:03:49.085
trabalhar e codificar
mais tarde.

00:03:49.414 --> 00:03:53.036
Você vai ganhar um pouco de prática
com isso nos testes a seguir.

00:03:53.557 --> 00:03:57.969
Não é necessário que toda função
tenha uma instrução return.

00:03:58.002 --> 00:04:00.408
Observe que esta função,
print_greeting,

00:04:00.442 --> 00:04:03.976
não tem uma instrução return,
mas ainda é uma função válida.

