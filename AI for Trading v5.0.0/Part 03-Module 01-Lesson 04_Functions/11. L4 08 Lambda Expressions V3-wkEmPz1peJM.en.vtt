WEBVTT
Kind: captions
Language: en

00:00:02.670 --> 00:00:08.500
In Python, you can use lambda expressions to create anonymous functions.

00:00:08.500 --> 00:00:11.860
That is, functions that don't have a name.

00:00:11.860 --> 00:00:13.930
They are very helpful for creating

00:00:13.930 --> 00:00:17.770
quick functions that aren't really needed later in your code.

00:00:17.770 --> 00:00:21.280
Later, we'll learn about higher-order functions.

00:00:21.280 --> 00:00:25.150
Are functions that take in other functions as arguments,

00:00:25.150 --> 00:00:28.510
where lambda expressions become especially useful.

00:00:28.510 --> 00:00:33.355
Let's compare the structure of a function and a lambda expression.

00:00:33.355 --> 00:00:37.390
Here, is a simple function that doubles a number.

00:00:37.390 --> 00:00:42.755
It takes in a number x and returns x multiplied by two,

00:00:42.755 --> 00:00:46.445
calling double three, would return six.

00:00:46.445 --> 00:00:49.925
Here is the equivalent in a lambda expression.

00:00:49.925 --> 00:00:54.860
The lambda keyword is used to indicate that this is a lambda expression.

00:00:54.860 --> 00:01:01.850
Following lambda or one or more arguments for the anonymous function and then a colon.

00:01:01.850 --> 00:01:08.765
These are equivalent, similar to the way argument names in a function are arbitrary.

00:01:08.765 --> 00:01:14.265
Last is an expression that is evaluated and returned in this function.

00:01:14.265 --> 00:01:19.735
This is a lot like the expression you might see as a return statement in a function.

00:01:19.735 --> 00:01:24.865
With this structure, lambda expressions aren't ideal for complex functions,

00:01:24.865 --> 00:01:28.555
but can be very useful for short symbol functions.

00:01:28.555 --> 00:01:32.455
If you want to specify multiple arguments in a lambda function,

00:01:32.455 --> 00:01:36.790
you can include them before the colon, separated by commas.

00:01:36.790 --> 00:01:41.245
Here's a lambda function that multiplies two numbers together.

00:01:41.245 --> 00:01:43.210
In the following quizzes,

00:01:43.210 --> 00:01:48.570
you'll get some practice using lambda functions and see how useful they can be.

