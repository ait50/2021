WEBVTT
Kind: captions
Language: zh-CN

00:00:01.270 --> 00:00:03.818
我们要编写的第一个函数是

00:00:03.818 --> 00:00:07.759
计算圆柱体体积的函数

00:00:07.759 --> 00:00:10.460
用到的公式是圆柱体的高

00:00:10.460 --> 00:00:15.100
乘以半径的平方 再乘以 π

00:00:15.099 --> 00:00:20.469
这是使用函数 cylinder_volume 定义该公式的代码

00:00:20.469 --> 00:00:23.582
定义 cylinder_volume 函数之后

00:00:23.582 --> 00:00:25.489
我们可以像这样使用它

00:00:25.489 --> 00:00:32.119
这个值是高 10 英寸 半径 3 英寸的圆柱体的体积

00:00:32.119 --> 00:00:34.619
我们来看看背后的原理

00:00:34.619 --> 00:00:38.894
函数定义包括几个重要的部分

00:00:38.895 --> 00:00:42.135
首先 我们来看看函数头部

00:00:42.134 --> 00:00:44.549
定义函数时始终以关键字 def 开头

00:00:44.549 --> 00:00:49.744
表示接下来的代码是一个函数定义

00:00:49.744 --> 00:00:52.783
并以冒号结束

00:00:52.783 --> 00:00:55.804
def 之后是函数的名称

00:00:55.804 --> 00:00:58.399
在此示例中 名称是 cylinder_volume

00:00:58.399 --> 00:01:01.604
名称必须是一个单词 不能有空格

00:01:01.604 --> 00:01:03.844
因此我们使用了下划线

00:01:03.844 --> 00:01:08.944
函数名称的规则和变量名称的一样

00:01:08.944 --> 00:01:10.549
如果你要复习这方面的知识

00:01:10.549 --> 00:01:12.769
请参阅本视频下方的文字

00:01:12.769 --> 00:01:16.429
函数名称之后是小括号

00:01:16.430 --> 00:01:21.320
其中包含函数会接受的参数 用英文逗号分隔

00:01:21.319 --> 00:01:24.769
这些参数是当函数被调用时 作为输入函数中的值

00:01:24.769 --> 00:01:29.034
并用在这个主体中

00:01:29.034 --> 00:01:32.170
如果函数没有参数

00:01:32.170 --> 00:01:34.784
则直接使这些括号为空

00:01:34.784 --> 00:01:39.000
这是一个没有参数的函数

00:01:39.000 --> 00:01:44.049
在这种情况下 我们在函数主体中不需要处理任何输入数据

00:01:44.049 --> 00:01:47.369
因此不需要任何参数

00:01:47.370 --> 00:01:50.650
接着 我们来讨论下函数主体

00:01:50.650 --> 00:01:53.530
函数主体是在函数头部之后缩进的部分

00:01:53.530 --> 00:01:56.814
函数在主体中执行操作

00:01:56.814 --> 00:02:03.120
我们可以在此主体中引用参数变量并定义新的变量

00:02:03.120 --> 00:02:07.135
我们在这里定义的变量 π 是一个局部变量

00:02:07.135 --> 00:02:12.114
表示它只能在该函数的主体中使用

00:02:12.114 --> 00:02:17.050
我们无法在该函数之外访问该变量

00:02:17.050 --> 00:02:20.290
这是由变量作用域造成的

00:02:20.289 --> 00:02:24.914
变量作用域会确定你可以在 Python 中访问哪些变量

00:02:24.914 --> 00:02:28.514
我们将在这节课的稍后阶段详细讨论这一概念

00:02:28.514 --> 00:02:31.689
通常 函数主体将包括这个

00:02:31.689 --> 00:02:34.389
return 关键字

00:02:34.389 --> 00:02:37.629
用于在调用函数时返回一个输出值

00:02:37.629 --> 00:02:43.439
return 之后的表达式的值是函数的输出

00:02:43.439 --> 00:02:47.329
在此示例中 我们返回用该公式计算的

00:02:47.330 --> 00:02:51.033
圆柱体体积值

00:02:51.032 --> 00:02:54.617
我们可以先在函数主体中计算圆柱体的体积

00:02:54.617 --> 00:02:58.280
然后将其存储在叫做 volume 变量中

00:02:58.280 --> 00:03:02.930
而不是返回计算的值

00:03:02.930 --> 00:03:06.390
在这种情况下 我们可以像这样返回 volume

00:03:06.389 --> 00:03:10.824
这样的函数可以看做一个小机器

00:03:10.824 --> 00:03:16.509
该机器会接受输入或参数并处理成输出或返回值

00:03:16.509 --> 00:03:19.439
这是一个很好的比喻 但是并不全面

00:03:19.439 --> 00:03:23.530
print() 等函数不返回任何内容

00:03:23.530 --> 00:03:27.715
Print() 会在输出窗口上显示文本

00:03:27.715 --> 00:03:30.025
但是从该示例中可以看出返回的值是 None

00:03:30.025 --> 00:03:32.560
当函数没有明确返回任何其他内容时

00:03:32.560 --> 00:03:36.879
它将默认地返回 None

00:03:36.879 --> 00:03:41.669
print() 和 return 之间的区别经常让人困惑

00:03:41.669 --> 00:03:45.229
print() 向控制台提供输出

00:03:45.229 --> 00:03:49.676
而 return 会提供你可以存储以便稍后在代码中使用的值

00:03:49.676 --> 00:03:53.204
你将在下面的练习中进行这方面的实践

00:03:53.205 --> 00:03:58.395
并非所有函数都有 return 语句

00:03:58.395 --> 00:04:00.590
注意 这个 print_greeting 函数

00:04:00.590 --> 00:04:02.533
没有 return 语句

00:04:02.532 --> 00:04:04.159
但依然是有效的函数

