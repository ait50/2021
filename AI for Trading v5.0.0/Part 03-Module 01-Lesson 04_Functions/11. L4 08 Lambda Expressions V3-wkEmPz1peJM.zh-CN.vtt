WEBVTT
Kind: captions
Language: zh-CN

00:00:02.670 --> 00:00:08.500
在 Python 中 你可以使用 lambda 表达式创建匿名函数

00:00:08.500 --> 00:00:11.860
即没有名称的函数

00:00:11.860 --> 00:00:13.930
lambda 表达式非常适合快速创建

00:00:13.930 --> 00:00:17.770
在代码中以后不会用到的函数

00:00:17.770 --> 00:00:21.280
稍后 我们将学习高阶函数 

00:00:21.280 --> 00:00:25.150
即将其他函数作为参数的函数
7
00:00:25,150 --&gt; 00:00:28,510
这时候 lambda 表达式就变得非常有用

00:00:28.510 --> 00:00:33.355
我们来比较下函数的结构和 lambda 表达式的结构

00:00:33.355 --> 00:00:37.390
这是一个使数字翻倍的简单函数

00:00:37.390 --> 00:00:42.755
它接受一个数字 x 并返回 x * 2

00:00:42.755 --> 00:00:46.445
调用 double(3) 将返回 6

00:00:46.445 --> 00:00:49.925
这是对等的 lambda 表达式

00:00:49.925 --> 00:00:54.860
关键字 lambda 表示这是一个 lambda 表达式

00:00:54.860 --> 00:01:01.850
lambda 之后是该匿名函数的一个或多个参数 然后是一个英文冒号

00:01:01.850 --> 00:01:08.765
这两种方式是对等的 就像在函数中参数名称是任意的

00:01:08.765 --> 00:01:14.265
最后一部分是被评估并在该函数中返回的表达式

00:01:14.265 --> 00:01:19.735
和你可能会在函数中看到的 return 语句表达式很像

00:01:19.735 --> 00:01:24.865
鉴于这种结构 lambda 表达式不太适合复杂的函数

00:01:24.865 --> 00:01:28.555
但是非常适合简短的函数

00:01:28.555 --> 00:01:32.455
如果你想在 lambda 函数中指定多个参数

00:01:32.455 --> 00:01:36.790
可以在英文冒号前添加这些参数 并用英文逗号分隔

00:01:36.790 --> 00:01:41.245
这是一个将两个数字相乘的 lambda 函数

00:01:41.245 --> 00:01:43.210
在下面的练习中

00:01:43.210 --> 00:01:48.570
你将练习使用 lambda 函数并了解它们的用途

