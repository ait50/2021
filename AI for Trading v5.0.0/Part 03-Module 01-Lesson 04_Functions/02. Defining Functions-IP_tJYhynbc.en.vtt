WEBVTT
Kind: captions
Language: en

00:00:01.270 --> 00:00:03.818
As our first function,

00:00:03.818 --> 00:00:07.759
we'll write a function that calculates the volume of a cylinder.

00:00:07.759 --> 00:00:10.460
The formula for this is the cylinder's height,

00:00:10.460 --> 00:00:15.100
multiplied by the square of its radius, multiplied by pi.

00:00:15.099 --> 00:00:20.469
Here's what that formula looks like when defined in a function called cylinder volume.

00:00:20.469 --> 00:00:23.582
After defining the cylinder volume function,

00:00:23.582 --> 00:00:25.489
we can use it like this.

00:00:25.489 --> 00:00:32.119
This value is the volume of a cylinder 10 inches tall with a radius of three inches.

00:00:32.119 --> 00:00:34.619
Let's see how this works behind the scenes.

00:00:34.619 --> 00:00:38.894
A function definition includes several important parts.

00:00:38.895 --> 00:00:42.135
First, let's look at the function header.

00:00:42.134 --> 00:00:44.549
Defining a function always starts with

00:00:44.549 --> 00:00:49.744
the def keyword to indicate that the code that follows is a function definition,

00:00:49.744 --> 00:00:52.783
and ends with a colon.

00:00:52.783 --> 00:00:55.804
Following def is the name of the function.

00:00:55.804 --> 00:00:58.399
In this case, cylinder_volume.

00:00:58.399 --> 00:01:01.604
This needs to be a one word with no gaps.

00:01:01.604 --> 00:01:03.844
That's why this has an underscore.

00:01:03.844 --> 00:01:08.944
The rules for function names are the same as those for variable names.

00:01:08.944 --> 00:01:10.549
If you need a reminder on this,

00:01:10.549 --> 00:01:12.769
see the text below this video.

00:01:12.769 --> 00:01:16.429
After the function name are parentheses that

00:01:16.430 --> 00:01:21.320
includes the arguments that the function expects, separated by commas.

00:01:21.319 --> 00:01:24.769
These arguments are values that are passed in as inputs

00:01:24.769 --> 00:01:29.034
when the function is called and are used in this body.

00:01:29.034 --> 00:01:32.170
If you write a function that doesn't take arguments,

00:01:32.170 --> 00:01:34.784
then just leave these parentheses empty.

00:01:34.784 --> 00:01:39.000
Here is an example of a function that takes no arguments.

00:01:39.000 --> 00:01:44.049
In this case, there is no input data we want to work with in the body of the function,

00:01:44.049 --> 00:01:47.369
so no arguments are necessary.

00:01:47.370 --> 00:01:50.650
Next, let's discuss the body of a function.

00:01:50.650 --> 00:01:53.530
The body of the function is indented after

00:01:53.530 --> 00:01:56.814
the header and is where the function does its work.

00:01:56.814 --> 00:02:03.120
Within this body, we can refer to the argument variables and define new variables.

00:02:03.120 --> 00:02:07.135
The pi variable that we define here is a local variable.

00:02:07.135 --> 00:02:12.114
Meaning; it can only be used within the body of this function.

00:02:12.114 --> 00:02:17.050
Attempting to access this variable outside the function isn't possible.

00:02:17.050 --> 00:02:20.290
This is due to what is called variable scope,

00:02:20.289 --> 00:02:24.914
which determines which variables you have access to in Python.

00:02:24.914 --> 00:02:28.514
We'll discuss this in detail later in the lesson.

00:02:28.514 --> 00:02:31.689
Often, the body of a function will include

00:02:31.689 --> 00:02:34.389
this return key word which is used to

00:02:34.389 --> 00:02:37.629
give back an output value when the function is called.

00:02:37.629 --> 00:02:43.439
The value of the expression that follows return is the output of the function.

00:02:43.439 --> 00:02:47.329
In this example, we return the value evaluated from

00:02:47.330 --> 00:02:51.033
this formula for the volume of a cylinder.

00:02:51.032 --> 00:02:54.617
Rather than returning the value as it is calculated,

00:02:54.617 --> 00:02:58.280
an alternative technique would be to calculate the volume earlier in

00:02:58.280 --> 00:03:02.930
the function body and then store it in a variable named volume.

00:03:02.930 --> 00:03:06.390
In this case, we would return volume like this.

00:03:06.389 --> 00:03:10.824
Functions like this can be imagined as little machines that take

00:03:10.824 --> 00:03:16.509
inputs or arguments and process them into output or return values.

00:03:16.509 --> 00:03:19.439
This is a good image but it's incomplete.

00:03:19.439 --> 00:03:23.530
Some functions like print don't return anything at all.

00:03:23.530 --> 00:03:27.700
Print displays text on the output window but as we see here,

00:03:27.760 --> 00:03:30.080
the value it returns is none.

00:03:30.080 --> 00:03:32.560
None is when a function will return by

00:03:32.560 --> 00:03:36.879
default if it doesn't explicitly return anything else.

00:03:36.879 --> 00:03:41.669
The difference between print and return is often confused.

00:03:41.669 --> 00:03:45.229
Print provides output to the console while return provides

00:03:45.229 --> 00:03:49.676
the value that you can store and work with and code later.

00:03:49.676 --> 00:03:53.204
You'll get some practice with this in the quizzes that follow.

00:03:53.205 --> 00:03:58.395
It's not necessary that every function has a return statement.

00:03:58.395 --> 00:04:00.590
Notice this function, print_greeting,

00:04:00.590 --> 00:04:02.533
doesn't have a return statement,

00:04:02.532 --> 00:04:04.159
but it's still a valid function.

