WEBVTT
Kind: captions
Language: zh-CN

00:00:01.229 --> 00:00:05.529
在 Python 中 你可以使用一个非常酷的工具

00:00:05.530 --> 00:00:09.910
快速简洁地创建列表 该工具叫做列表推导式

00:00:09.910 --> 00:00:12.025
在之前的 cities 示例中

00:00:12.025 --> 00:00:17.469
我们用 for 循环通过 cities 列表创建了一个首字母大写的城市列表

00:00:17.469 --> 00:00:19.689
借助列表推导式

00:00:19.690 --> 00:00:22.580
我们可以像这样获得相同的结果

00:00:22.579 --> 00:00:28.570
借助列表推导式 我们可以使用 for 循环用一步就创建一个列表

00:00:28.570 --> 00:00:32.609
列表推导式的创建方式是使用方括号

00:00:32.609 --> 00:00:37.225
括号内是一个表达式 用于评估可迭代对象中的每个元素

00:00:37.225 --> 00:00:40.094
这行对 cities 中的每个元素调用 city.title()

00:00:40.094 --> 00:00:44.500
以便在新列表中创建每个元素

00:00:44.500 --> 00:00:50.825
注意 这部分看起来和 for 循环的第一行很像 只是没有冒号

00:00:50.825 --> 00:00:55.685
你想对每个元素执行的操作在这里执行

00:00:55.685 --> 00:00:58.155
并将执行后的元素附加到这个新列表中

00:00:58.155 --> 00:01:00.115
在列表推导式中

00:01:00.115 --> 00:01:01.750
我们不需要提前新建一个列表

00:01:01.750 --> 00:01:05.844
并向其附加元素 就像在 for 循环中那样

00:01:05.844 --> 00:01:09.670
列表推导式并不适用于其他语言

00:01:09.670 --> 00:01:12.189
但是在 Python 中很常见

00:01:12.189 --> 00:01:18.314
这是另一个创建平方和（从 0 到 64）列表的示例

00:01:18.314 --> 00:01:23.094
这行针对 range(9) 中的每个元素调用 x 的 2 次幂

00:01:23.094 --> 00:01:28.094
以便为新列表 squares 创建每个元素

00:01:28.094 --> 00:01:32.135
我们可以将这段代码写成列表推导式 像这样

00:01:32.135 --> 00:01:35.630
重申一下 我们只是遍历该可迭代对象中的每个元素

00:01:35.629 --> 00:01:41.659
并评估此表达式以获取列表中的每个新元素

00:01:41.659 --> 00:01:45.450
还可以向列表推导式中添加条件语句

00:01:45.450 --> 00:01:51.725
你可以在可迭代对象之后使用关键字 if 检查每次迭代时是否满足某个条件

00:01:51.724 --> 00:01:58.750
在此示例中 仅在 X 为偶数时才计算 X 的 2 次幂

00:01:58.750 --> 00:02:03.405
这样就获得只包含偶数平方的列表

00:02:03.405 --> 00:02:05.689
如果像这样添加 else 语句

00:02:05.689 --> 00:02:08.569
就会遇到语法错误

00:02:08.569 --> 00:02:10.564
如果你要添加 else 语句

00:02:10.564 --> 00:02:13.189
则需要将条件语句移到列表推导式的开头

00:02:13.189 --> 00:02:17.858
并放在该表达式之后 就像这样

00:02:17.858 --> 00:02:21.000
要了解为何要这样添加 else 语句 请参阅下方的注释

