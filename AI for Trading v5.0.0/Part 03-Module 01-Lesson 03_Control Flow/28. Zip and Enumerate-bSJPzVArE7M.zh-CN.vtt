WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.314
回顾下我们的货物列表

00:00:03.314 --> 00:00:06.824
每个元素都是大小为 2 的元组

00:00:06.825 --> 00:00:09.855
遍历具有多个值的列表

00:00:09.855 --> 00:00:11.445
有时候非常实用

00:00:11.445 --> 00:00:16.140
实际上可以像这样轻松地组合和拆分列表

00:00:16.140 --> 00:00:18.225
如果我们一开始

00:00:18.225 --> 00:00:21.645
有这两个独立的列表 items 和 weights

00:00:21.644 --> 00:00:24.210
并且想要组合成一个列表 例如 manifest

00:00:24.210 --> 00:00:28.710
我们可以使用一个内置函数 叫做 zip()

00:00:28.710 --> 00:00:31.275
zip() 会返回一个迭代器

00:00:31.274 --> 00:00:35.055
我们需要将其转换为列表 以查看其中的元素

00:00:35.055 --> 00:00:37.544
或者使用 for 循环遍历它

00:00:37.545 --> 00:00:40.815
以便输出值 和 range() 相似

00:00:40.814 --> 00:00:45.299
你还可以像这样用 for 循环拆分每个元组

00:00:45.299 --> 00:00:48.164
除了将两个列表组合到一起之外

00:00:48.164 --> 00:00:51.479
还可以使用星号拆分列表

00:00:51.479 --> 00:00:55.244
例如 像这样使用 manifest 列表

00:00:55.244 --> 00:00:59.564
可以将其拆分为 items 和 weights 列表 就像这样

00:00:59.564 --> 00:01:03.015
接下来要讨论的函数是 enumerate()

00:01:03.015 --> 00:01:07.260
很多时候 你会发现通过索引

00:01:07.260 --> 00:01:09.000
遍历列表值很有用

00:01:09.000 --> 00:01:11.355
这是一种实现方法

00:01:11.355 --> 00:01:16.560
这段代码使用 for 循环遍历一个元组列表

00:01:16.560 --> 00:01:19.379
元组中包含索引和列表中的每项的值

00:01:19.379 --> 00:01:23.739
索引的创建方式是获取从 0 到项目数量减一的

00:01:23.739 --> 00:01:26.219
range 对象

00:01:26.219 --> 00:01:29.144
并将其与项目值组合到一起

00:01:29.144 --> 00:01:34.436
enumerate() 是一个特殊的内置函数 大大简化了这一流程

00:01:34.436 --> 00:01:36.329
enumerate() 会返回这些元组

00:01:36.329 --> 00:01:39.105
其中包含索引和列表值

00:01:39.105 --> 00:01:41.100
并以可迭代形式呈现出来

00:01:41.099 --> 00:01:46.500
你将在下面的练习部分练习如何使用 zip() 和 enumerate()

00:01:46.500 --> 00:01:48.120
并了解它们的用途

