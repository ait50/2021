WEBVTT
Kind: captions
Language: pt-BR

00:00:02.603 --> 00:00:05.639
"Loops for" são um exemplo
de iteração definida,

00:00:05.672 --> 00:00:08.375
ou seja, o corpo do loop
é executado

00:00:08.408 --> 00:00:10.244
um número predefinido
de vezes.

00:00:10.878 --> 00:00:12.579
Um "loop for" em uma lista

00:00:12.913 --> 00:00:16.049
executa o corpo uma vez
para cada elemento da lista.

00:00:16.683 --> 00:00:18.852
Um "loop for"
usando a função range

00:00:18.886 --> 00:00:20.787
será executado
um número de vezes

00:00:20.821 --> 00:00:22.756
especificado
pela função range.

00:00:23.490 --> 00:00:25.893
Isso é diferente
da iteração indefinida,

00:00:25.926 --> 00:00:29.463
que é quando um loop se repete
um número desconhecido de vezes

00:00:29.496 --> 00:00:31.965
e termina quando
uma condição é satisfeita.

00:00:32.599 --> 00:00:34.268
Considere esse loop while,

00:00:34.301 --> 00:00:36.436
que simula um crupiê
de blackjack

00:00:36.637 --> 00:00:38.705
que saca cartas de uma lista
de baralho

00:00:38.739 --> 00:00:40.140
para uma lista de mãos,

00:00:40.174 --> 00:00:43.043
parando quando o valor
das cartas em uma mão

00:00:43.277 --> 00:00:45.045
é igual ou maior a 17.

00:00:45.746 --> 00:00:48.749
Este exemplo
usa uma nova função, "soma",

00:00:49.249 --> 00:00:51.251
e um novo método de lista,
"pop".

00:00:52.085 --> 00:00:53.787
Soma é bastante intuitiva.

00:00:53.820 --> 00:00:56.390
Ela retorna a soma dos elementos
em uma lista.

00:00:57.090 --> 00:00:59.493
Pop é o inverso
do método de anexar.

00:01:00.060 --> 00:01:03.197
Ela remove o último elemento
da lista e o retorna.

00:01:03.864 --> 00:01:06.934
Você pode ler mais sobre isso
na documentação oficial.

00:01:08.001 --> 00:01:11.271
Nesta linha, estamos calculando
a soma da lista de mão

00:01:11.538 --> 00:01:14.575
e verificando se isso
é igual ou menor a 17.

00:01:15.809 --> 00:01:19.313
Nesta linha, estamos removendo
o último elemento do baralho

00:01:19.346 --> 00:01:21.181
e anexando-o
à lista da mão.

00:01:22.816 --> 00:01:25.652
Vamos falar de como esse
loop de while funciona.

00:01:26.220 --> 00:01:27.387
A palavra-chave while

00:01:27.421 --> 00:01:29.623
indica que este
é um loop de while.

00:01:30.457 --> 00:01:32.025
A seguir, vem a condição.

00:01:32.426 --> 00:01:36.563
Neste exemplo, a soma da mão
é menor ou igual a 17.

00:01:37.097 --> 00:01:39.032
Se esta condição é verdadeira,

00:01:39.333 --> 00:01:41.134
o corpo do loop
será executado.

00:01:41.935 --> 00:01:43.971
Cada vez que o corpo do loop
rodar,

00:01:44.404 --> 00:01:46.540
a condição é avaliada
de novo.

00:01:47.274 --> 00:01:49.409
O processo de verificar
a condição

00:01:49.443 --> 00:01:50.744
e executar o loop

00:01:50.777 --> 00:01:53.447
se repete até a expressão
se tornar falsa.

00:01:54.581 --> 00:01:56.450
O corpo recuado do loop

00:01:56.483 --> 00:01:59.620
deve modificar ao menos uma variável
na expressão-teste.

00:02:00.187 --> 00:02:03.056
Se o valor da expressão-teste
não mudar nunca,

00:02:03.257 --> 00:02:04.992
o resultado
é um loop infinito.

00:02:05.826 --> 00:02:07.060
Neste exemplo,

00:02:07.094 --> 00:02:09.763
o corpo do loop anexa números
às listas das mãos,

00:02:09.796 --> 00:02:12.099
o que aumenta o valor
da soma da mão.

00:02:12.900 --> 00:02:15.235
Por fim, o valor da soma
da mão

00:02:15.269 --> 00:02:18.372
se torna grande o bastante
para que a condição fique falsa.

