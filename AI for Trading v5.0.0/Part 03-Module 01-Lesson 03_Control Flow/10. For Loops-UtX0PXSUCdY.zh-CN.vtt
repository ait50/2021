WEBVTT
Kind: captions
Language: zh-CN

00:00:02.069 --> 00:00:05.674
你已经学习了条件语句

00:00:05.674 --> 00:00:07.302
现在我们开始学习循环

00:00:07.302 --> 00:00:10.150
循环使我们能够重复一段代码

00:00:10.150 --> 00:00:12.365
Python 具有两种循环

00:00:12.365 --> 00:00:15.160
for 循环和 while 循环

00:00:15.160 --> 00:00:17.832
我们先来看看 for 循环

00:00:17.832 --> 00:00:21.542
我们可以用 for 循环遍历可迭代的对象

00:00:21.542 --> 00:00:26.649
可迭代对象是指每次可以返回一个元素的对象

00:00:26.649 --> 00:00:30.549
包括字符串 列表和元组等序列类型

00:00:30.550 --> 00:00:36.820
以及字典和文件等非序列类型

00:00:36.820 --> 00:00:41.994
你可以使用 iter 方法定义对象 使其可以用作可迭代对象

00:00:41.994 --> 00:00:46.515
更多信息请参阅下方的注释

00:00:46.515 --> 00:00:50.299
这段 for 循环会遍历一个城市列表

00:00:50.299 --> 00:00:53.844
使每座城市首字母大写 然后输出这些城市

00:00:53.844 --> 00:00:57.420
关键字 for 表示这是个 for 循环

00:00:57.420 --> 00:01:03.115
Cities 是可迭代对象 city 是该循环的迭代变量

00:01:03.115 --> 00:01:06.594
该变量表示循环当前处理的

00:01:06.594 --> 00:01:10.314
可迭代对象中的元素

00:01:10.314 --> 00:01:12.603
因此 在第一次迭代时

00:01:12.603 --> 00:01:14.969
city 是 new york city

00:01:14.969 --> 00:01:16.900
在第二次迭代时

00:01:16.900 --> 00:01:19.734
city 是 mountain view 以此类推

00:01:19.734 --> 00:01:22.929
我们可以使用变量 city 表示在任何迭代期间

00:01:22.930 --> 00:01:27.640
for 循环的缩进主体中的一个元素

00:01:27.640 --> 00:01:32.625
cities 中的每个元素都会执行一遍这个缩进的代码段

00:01:32.625 --> 00:01:35.439
你可以随意命名迭代变量

00:01:35.439 --> 00:01:39.909
但是这个示例演示了一种常见模式

00:01:39.909 --> 00:01:44.096
列表名称 cities 是 city 的复数形式

00:01:44.096 --> 00:01:46.329
city 是迭代变量的名称

00:01:46.329 --> 00:01:50.515
按照这种方式命名列表和迭代变量

00:01:50.515 --> 00:01:54.849
使其他程序员更容易明白每个变量的目的

00:01:54.849 --> 00:01:59.544
到目前为止 我们所写的循环都是从列表中提取信息

00:01:59.545 --> 00:02:04.135
我们还可以使用 for 循环创建列表和修改列表

00:02:04.135 --> 00:02:05.969
为了创建新的列表

00:02:05.969 --> 00:02:07.689
我们可以从空列表开始

00:02:07.689 --> 00:02:11.405
然后使用方法 append() 添加新项

00:02:11.405 --> 00:02:18.449
这个 for 循环会遍历 cities 中的每座城市 并添加到首字母大写的 cities 中

00:02:18.449 --> 00:02:25.034
修改列表稍微难一些 需要使用一个新的函数 叫做 range()

00:02:25.034 --> 00:02:30.490
range() 是一个内置函数 用来创建不可变的数字序列

00:02:30.490 --> 00:02:33.899
它有三个参数 必须全是整数

00:02:33.899 --> 00:02:37.194
分别是 start stop 和 step

00:02:37.194 --> 00:02:40.000
start 是序列的第一个数字

00:02:40.000 --> 00:02:43.389
stop 是序列最后一个数字之前的数字

00:02:43.389 --> 00:02:47.284
step 是序列中每个数字之间的差

00:02:47.284 --> 00:02:52.900
如果未指定的话 start 默认为 0 step 默认为 1

00:02:52.900 --> 00:02:57.340
如果调用 range() 并传入一个整数 将使该整数变成 stop 参数

00:02:57.340 --> 00:03:02.405
并返回一个从 0 开始到该整数减一的序列

00:03:02.405 --> 00:03:07.784
因此 range(4) 返回一个 0 到 4-1 即 3 的序列

00:03:07.784 --> 00:03:12.764
如果调用 range() 并传入两个整数 将使这两个整数变成 start 和 stop 参数

00:03:12.764 --> 00:03:18.299
返回一个从第一个数字开始到第二个数字减一的序列

00:03:18.300 --> 00:03:23.650
range(2,6) 返回一个从 2 到 5 的序列

00:03:23.650 --> 00:03:28.435
如果调用 range() 并传入三个整数

00:03:28.435 --> 00:03:33.585
将返回从第一个整数到第二个整数减一并用第三个整数划分的序列

00:03:33.585 --> 00:03:35.335
因此 range(1,10,2)

00:03:35.335 --> 00:03:40.810
返回一个从 1 到 9 并按 2 递增的序列

00:03:40.810 --> 00:03:43.284
注意 在这些示例中

00:03:43.284 --> 00:03:46.650
我们先将 range() 封装在列表中 然后输出它

00:03:46.650 --> 00:03:52.355
因为直接输出 range 的结果将只显示 range 对象

00:03:52.354 --> 00:03:55.509
你可以通过将 range 对象转换为列表

00:03:55.509 --> 00:03:59.984
或用 for 循环遍历它来查看其中的值

00:03:59.985 --> 00:04:02.240
回到 cities 示例

00:04:02.240 --> 00:04:08.775
我们可以使用函数 range() 生成 cities 列表中每个值的索引

00:04:08.775 --> 00:04:13.939
这样使得我们能够使用 cities 括号索引访问该列表的元素

00:04:13.939 --> 00:04:18.204
这样就可以直接修改 cities 列表中的值

00:04:18.204 --> 00:04:20.990
我们迭代一次

00:04:20.990 --> 00:04:24.240
看看一切是如何运行的

00:04:24.240 --> 00:04:26.800
len(cities) 结果为 4

00:04:26.800 --> 00:04:31.280
因此该列表的范围将是从 0 到 3

00:04:31.279 --> 00:04:35.709
索引将每次设为其中一个值

00:04:35.709 --> 00:04:37.310
在第一次迭代时

00:04:37.310 --> 00:04:39.519
索引为 0

00:04:39.519 --> 00:04:44.474
这部分然后将对第一座城市（new york city）设定索引

00:04:44.475 --> 00:04:46.802
使用 title() 使其首字母大写

00:04:46.802 --> 00:04:51.455
然后放在原始 new york city 的位置

00:04:51.454 --> 00:04:56.000
然后对剩下的每座城市执行相同的流程

00:04:56.000 --> 00:05:01.689
我们可以使用 print() 查看在每次迭代时 cities 列表的变化

00:05:01.689 --> 00:05:05.706
通过使用 range() 函数获得索引列表

00:05:05.706 --> 00:05:11.480
我们能够在 for 循环中对列表的每个元素设置索引 从而应用更改

00:05:11.480 --> 00:05:15.720
这种修改是函数 range() 的一种应用

00:05:15.720 --> 00:05:18.285
但是它并非只有这一个用途

00:05:18.285 --> 00:05:23.000
你将经常使用 range() 重复某个操作一定的次数

