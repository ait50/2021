WEBVTT
Kind: captions
Language: zh-CN

00:00:01.460 --> 00:00:05.850
for 循环是一种有限迭代

00:00:05.850 --> 00:00:10.560
即循环主体的运行次数已提前定义好

00:00:10.560 --> 00:00:12.720
列表 for 循环

00:00:12.720 --> 00:00:16.500
会针对列表中的每个元素运行主体一次

00:00:16.500 --> 00:00:19.200
使用 range 函数的 for 循环

00:00:19.200 --> 00:00:23.070
执行次数将由 range 函数指定

00:00:23.070 --> 00:00:25.980
这与无限迭代不同

00:00:25.980 --> 00:00:28.680
即循环重复次数不定

00:00:28.680 --> 00:00:32.175
当满足某个条件时 循环结束

00:00:32.175 --> 00:00:37.800
看这个 while 循环示例 该循环模拟的是一个二十一点庄家

00:00:37.800 --> 00:00:41.180
庄家会从一副牌中抽取纸牌放入玩家手中

00:00:41.180 --> 00:00:45.440
当玩家手中的牌点数之和是 17 点或更多时 停止抽牌

00:00:45.440 --> 00:00:51.620
这个示例用到了一个新的函数 “sum” 和一个新的列表方法 “pop”

00:00:51.620 --> 00:00:53.780
Sum 很好理解

00:00:53.780 --> 00:00:56.780
它返回的是列表中的元素之和

00:00:56.780 --> 00:00:59.810
Pop 与 append 方法相对

00:00:59.810 --> 00:01:03.470
它从列表中删除最后一个元素并返回该元素

00:01:03.470 --> 00:01:07.415
你可以在官方文档中了解更多详情

00:01:07.415 --> 00:01:10.460
这行代码的目的是计算

00:01:10.460 --> 00:01:15.255
列表 hand 中的元素之和 并检查和是否小于或等于 17

00:01:15.255 --> 00:01:18.460
在这一行 我们从 card_deck 中

00:01:18.460 --> 00:01:22.105
拿出最后一个元素 并将其附加到列表 hand 中

00:01:22.105 --> 00:01:25.825
我们看看这个 while 循环的原理

00:01:25.825 --> 00:01:30.010
关键字 while 表示这是一个 while 循环

00:01:30.010 --> 00:01:32.200
接下来是条件

00:01:32.200 --> 00:01:36.910
在此示例中 条件是 sum(hand) &lt;= 17

00:01:36.910 --> 00:01:39.190
如果该条件为 true

00:01:39.190 --> 00:01:41.605
则执行循环的主体部分

00:01:41.605 --> 00:01:44.185
每次运行循环的主体时

00:01:44.185 --> 00:01:46.825
都再次检查该条件

00:01:46.825 --> 00:01:50.080
这一检查条件然后运行循环的流程会不断重复

00:01:50.080 --> 00:01:54.100
直到该表达式变成 false

00:01:54.100 --> 00:01:59.965
循环的缩进主体部分应该至少修改测试表达式中的一个变量

00:01:59.965 --> 00:02:03.130
如果测试表达式的值始终不变

00:02:03.130 --> 00:02:05.410
循环将变成无限循环

00:02:05.410 --> 00:02:09.895
在此示例中 循环的主体会向列表 hand 中附加数字

00:02:09.895 --> 00:02:12.610
这样就会增加 sum(hand) 的值

00:02:12.610 --> 00:02:18.580
最终 sum(hand) 的值将变得足够大 使该条件变成 false

