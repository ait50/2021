WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.754
我要带大家去斯坦福溜达一圈

00:00:04.754 --> 00:00:10.495
展示下使用传感器探测环境的无人驾驶汽车

00:00:10.494 --> 00:00:15.109
我们开始学习这节课吧

00:00:15.109 --> 00:00:16.914
在上节课

00:00:16.914 --> 00:00:18.855
我们讨论了定位

00:00:18.855 --> 00:00:22.230
环境中有个机器人

00:00:22.230 --> 00:00:26.594
它可以使用传感器确定自己在什么位置

00:00:26.594 --> 00:00:34.515
这是一个使用地图定位自己的 Google 无人驾驶汽车

00:00:34.515 --> 00:00:38.564
除了显示为红色的汽车之外 还有其他车辆的测量值

00:00:38.564 --> 00:00:44.420
汽车使用激光和雷达追踪其他车辆

00:00:44.420 --> 00:00:47.200
今天我们将讨论如何查找其他汽车

00:00:47.200 --> 00:00:52.780
查找其他汽车的原因是不想撞到它们

00:00:52.780 --> 00:00:56.020
我们必须了解如何解析传感器数据

00:00:56.020 --> 00:01:00.240
不仅仅要估算这些车在哪 这是定位问题

00:01:00.240 --> 00:01:03.310
而且要判断车的移动速度

00:01:03.310 --> 00:01:07.615
以防止未来出现碰撞现象

00:01:07.614 --> 00:01:09.549
这不仅仅涉及到汽车

00:01:09.549 --> 00:01:15.719
而且关系到行人和骑行人士

00:01:15.719 --> 00:01:18.750
知道车在哪并预测将移到哪里

00:01:18.750 --> 00:01:22.840
对于 Google 无人驾驶汽车项目的安全驾驶来说很关键

00:01:22.840 --> 00:01:25.799
在这节课 我们将讨论跟踪

00:01:25.799 --> 00:01:29.000
我要讲授的技巧叫做卡尔曼滤波器

00:01:29.000 --> 00:01:34.605
这是一种非常热门的估算系统状态的技巧

00:01:34.605 --> 00:01:38.070
实际上与我们在之前的课程中讨论的概率定位方法

00:01:38.069 --> 00:01:41.889
非常相似 即蒙特卡罗定位

00:01:41.890 --> 00:01:45.310
主要区别是卡尔曼滤波器

00:01:45.310 --> 00:01:48.579
估算的是连续状态 而在蒙特卡罗定位中

00:01:48.579 --> 00:01:52.109
我们必须要将环境拆分为离散地点

00:01:52.109 --> 00:01:55.435
因此 卡尔曼滤波器可以生成单峰分布

00:01:55.435 --> 00:02:00.109
稍后我将介绍单峰分布是什么意思

00:02:00.109 --> 00:02:04.569
而蒙特卡罗可以生成多峰分布

00:02:04.569 --> 00:02:06.729
这两种技巧都适用于

00:02:06.730 --> 00:02:09.685
机器人定位和跟踪其他车辆

00:02:09.685 --> 00:02:11.610
这里有辆车

00:02:11.610 --> 00:02:14.045
假设它收到了测量值

00:02:14.044 --> 00:02:18.169
这里 这里 和这里有个对象

00:02:18.169 --> 00:02:23.604
时间 t 分别等于 0

00:02:23.604 --> 00:02:25.644
等于 1 等于 2 等于 3

00:02:25.645 --> 00:02:30.710
当 t 等于 4 时 你认为对象会在哪？

