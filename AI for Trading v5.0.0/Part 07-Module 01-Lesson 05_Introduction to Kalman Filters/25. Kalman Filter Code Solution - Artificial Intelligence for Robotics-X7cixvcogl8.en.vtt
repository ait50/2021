WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
This piece of code implements the entire Kalman filter.

00:00:05.000 --> 00:00:08.000
It goes through all the measurement elements and quietly assumes there are

00:00:08.000 --> 00:00:11.000
as many measurements as motions indexed by n.

00:00:11.000 --> 00:00:16.000
It updates the mu and sigma using this recursive formula over here.

00:00:16.000 --> 00:00:19.000
If we plug in the nth measurement and the measurement uncertainty,

00:00:19.000 --> 00:00:22.000
it does the same with the motion, the prediction part over here.

00:00:22.000 --> 00:00:26.000
It updates the mu and sigma recursively using the nth motion

00:00:26.000 --> 00:00:30.000
and the motion uncertainty, and it prints all of those out.

00:00:30.000 --> 00:00:34.000
If I hit the Run button, I find that my first measurement update

00:00:34.000 --> 00:00:37.000
gets me effectively 5.0.

00:00:37.000 --> 00:00:39.000
It's 4.98.

00:00:39.000 --> 00:00:42.000
And that makes sense because we had a huge initial uncertainty,

00:00:42.000 --> 00:00:46.000
and [inaudible] of 5 with a relatively small measurement uncertainty.

00:00:46.000 --> 00:00:50.000
And in fact the resulting sigma square term is 3.98,

00:00:50.000 --> 00:00:53.000
which is better than 4 and 1,000, slightly better than 4.

00:00:53.000 --> 00:00:56.000
We're slightly more certain than the measurement itself.

00:00:56.000 --> 00:00:58.000
We now apply the motion of 1.

00:00:58.000 --> 00:01:00.000
We get to 5.9.

00:01:00.000 --> 00:01:04.000
Our uncertainty increases by exactly 2, from 3.9 to 5.98.

00:01:04.000 --> 00:01:07.000
And then the next update comes in at 6,

00:01:07.000 --> 00:01:09.000
and it gives us a measurement of 5.99

00:01:09.000 --> 00:01:13.000
and now a reduced uncertainty of 2.39.

00:01:13.000 --> 00:01:16.000
And then we go to move to the right again by 1,

00:01:16.000 --> 00:01:19.000
which makes the prediction 6.99.

00:01:19.000 --> 00:01:21.000
Uncertainty goes up.

00:01:21.000 --> 00:01:24.000
We measure 7. We get to 6.99, almost 7.

00:01:24.000 --> 00:01:26.000
Uncertainty goes down.

00:01:26.000 --> 00:01:29.000
We move 2 to the right, measure 9, 1 to the right,

00:01:29.000 --> 00:01:31.000
measure 10, and move 1 again.

00:01:31.000 --> 00:01:33.000
The final thing is the motion.

00:01:33.000 --> 00:01:36.000
And if you look at the end result, our estimate is almost exactly 11,

00:01:36.000 --> 00:01:40.000
which is the result of 10 + 1.

00:01:40.000 --> 00:01:43.000
And the uncertainty is 4.0 after the motion

00:01:43.000 --> 00:01:46.000
and 2.0 after the measurement.

00:01:46.000 --> 00:01:48.000
This code that you just wrote

00:01:48.000 --> 00:01:52.000
implements a full Kalman filter for 1D.

00:01:52.000 --> 00:01:54.000
If you look at this,

00:01:54.000 --> 00:01:56.000
we have an update function that implements

00:01:56.000 --> 00:02:00.000
what actually is a relatively simple equation,

00:02:00.000 --> 00:02:02.000
and a prediction function which is an even simpler equation

00:02:02.000 --> 00:02:04.000
of just addition.

00:02:04.000 --> 00:02:07.000
And then you apply it to a measurement sequence and a motion sequence

00:02:07.000 --> 00:02:09.000
with certain uncertainties associated,

00:02:09.000 --> 00:02:12.000
and this little piece of code over here

00:02:12.000 --> 00:02:14.000
gives you a full Kalman filter in 1D.

00:02:14.000 --> 00:02:17.000
I find this really amazing.

00:02:17.000 --> 00:02:19.000
Let's plug in some other values.

00:02:19.000 --> 00:02:22.000
Suppose you're really certain about the initial position.

00:02:22.000 --> 00:02:24.000
It's wrong. It's 0.

00:02:24.000 --> 00:02:26.000
It should be 5, but it's 0.

00:02:26.000 --> 00:02:28.000
And now we assume a really small uncertainty.

00:02:28.000 --> 00:02:31.000
Guess what's going to happen to the final prediction?

00:02:31.000 --> 00:02:33.000
As I hit the Run button,

00:02:33.000 --> 00:02:35.000
we find this has an effect on the final estimate.

00:02:35.000 --> 00:02:38.000
It's not 11. It's only 10.5.

00:02:38.000 --> 00:02:42.000
And the way this takes place is initially,

00:02:42.000 --> 00:02:46.000
after our first measurement update, we believe in the position of 0.

00:02:46.000 --> 00:02:49.000
This is 1.24 to the - 10th,

00:02:49.000 --> 00:02:52.000
but a really small uncertainty, even smaller than this one over here.

00:02:52.000 --> 00:02:55.000
We apply our motion update. We add a 1.

00:02:55.000 --> 00:02:57.000
We have a higher uncertainty.

00:02:57.000 --> 00:02:59.000
And now when the next measurement comes in, 6,

00:02:59.000 --> 00:03:01.000
we are now more inclined to believe the measurement

00:03:01.000 --> 00:03:06.000
because uncertainty is now basically 2 as opposed to 0.001.

00:03:06.000 --> 00:03:10.000
We update our position to be 2.666,

00:03:10.000 --> 00:03:13.000
which is now a jump away from 1, and we reduce our uncertainty.

00:03:13.000 --> 00:03:15.000
Motion comes in, 3.66.

00:03:15.000 --> 00:03:17.000
Uncertainty goes up.

00:03:17.000 --> 00:03:19.000
We now are willing to update even more.

00:03:19.000 --> 00:03:21.000
As you see the 7, we're willing to go to 5.1,

00:03:21.000 --> 00:03:26.000
but not quite all the way because we feel fairly confident on our wrong prior estimate.

00:03:26.000 --> 00:03:29.000
And this confidence makes it all the way to the end

00:03:29.000 --> 00:03:33.000
when we predict 10.5 as opposed to 11

00:03:33.000 --> 00:03:36.000
with an uncertainty of 3.98.

00:03:36.000 --> 00:03:38.000
We've corrected some of it.

00:03:38.000 --> 00:03:41.000
We were able to drag it into the right direction but not all the way

00:03:41.000 --> 00:03:44.000
because our false initial belief has such a strong weight

00:03:44.000 --> 09:59:59.000
in the overall equation.

