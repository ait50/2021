WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.104
NumPy has a module for random sampling,

00:00:03.104 --> 00:00:08.250
that makes it really easy for us to simulate random events like coin flips and Python.

00:00:08.250 --> 00:00:10.484
We're going to start with a simple example,

00:00:10.484 --> 00:00:12.869
simulating a single coin flip.

00:00:12.869 --> 00:00:15.424
For this, we'll use a function called randint.

00:00:15.425 --> 00:00:19.359
This generates however many random integers,

00:00:19.359 --> 00:00:24.640
we specify between a lower bound inclusive and upper bound exclusive.

00:00:24.640 --> 00:00:28.570
We can use these integers to represent the outcomes of our events,

00:00:28.570 --> 00:00:31.019
like coin flips. Let's try this out.

00:00:31.019 --> 00:00:35.560
We call randint from NumPy's random sampling module like this.

00:00:35.560 --> 00:00:39.895
Let's use zero to represent heads and one to represent tails.

00:00:39.895 --> 00:00:43.780
Let's make this function randomly produce zero or one.

00:00:43.780 --> 00:00:49.600
The lower bound would be zero and the highest would be two, because it's exclusive.

00:00:49.600 --> 00:00:51.670
Since the lower bound is zero,

00:00:51.670 --> 00:00:52.995
this is actually the default.

00:00:52.994 --> 00:00:54.644
We don't need to include it.

00:00:54.645 --> 00:00:57.040
If we run the cell again and again,

00:00:57.039 --> 00:01:01.554
we'll keep getting a random outcome of zero or one or,

00:01:01.554 --> 00:01:05.644
we can specify a size to just give us more events.

00:01:05.644 --> 00:01:09.890
Cool. Now, we have the results of 10,000 random coin flips.

00:01:09.890 --> 00:01:13.750
The average of these outcomes produced here should be very close to 0.5,

00:01:13.750 --> 00:01:18.545
since right now there's an equal probability of getting a zero or a one.

00:01:18.545 --> 00:01:20.890
But what if we want to flip a biased coin,

00:01:20.890 --> 00:01:23.840
that had a higher probability of landing on heads.

00:01:23.840 --> 00:01:27.980
There's actually another function for this called random.choice.

00:01:27.980 --> 00:01:30.005
This function works a little differently.

00:01:30.004 --> 00:01:34.599
It randomly chooses a number of values from an array that you provide and you

00:01:34.599 --> 00:01:40.179
can also give it a set of probabilities for each value in that array.

00:01:40.180 --> 00:01:46.490
Let's call random.choice and give it the array of the possible outcomes zero and one.

00:01:46.489 --> 00:01:48.670
If we don't specify probabilities,

00:01:48.670 --> 00:01:53.704
it gives us each value and an equal probability by default.

00:01:53.704 --> 00:01:57.340
We can run this similar to the above example in this way.

00:01:57.340 --> 00:02:00.355
So the average is very close to 0.5 Again.

00:02:00.355 --> 00:02:01.990
To make this a biased coin,

00:02:01.989 --> 00:02:06.069
we can specify the parameter p with an array of probabilities.

00:02:06.069 --> 00:02:09.784
Say 0.8 for heads and 0-2 for tails.

00:02:09.784 --> 00:02:13.659
Now, you can see that the mean is close to 0.2 which makes

00:02:13.659 --> 00:02:18.729
sense because the zero or heads should be chosen 80% of the time.

00:02:18.729 --> 00:02:21.129
You probably noticed that the mean values we get from

00:02:21.129 --> 00:02:25.134
these outcomes don't always reflect the true probabilities perfectly.

00:02:25.134 --> 00:02:28.224
However, they do tend to reflect the true probability

00:02:28.224 --> 00:02:31.900
more closely as we increase the number of flips.

00:02:31.900 --> 00:02:33.390
You'll learn more about this later.

