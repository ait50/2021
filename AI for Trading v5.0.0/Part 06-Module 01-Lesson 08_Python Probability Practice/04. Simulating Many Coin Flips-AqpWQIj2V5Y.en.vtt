WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.960
So far, we've been stimulating event outcomes by generating

00:00:03.960 --> 00:00:08.759
random numbers with NumPy's random.randint and random.choice.

00:00:08.759 --> 00:00:11.039
However, there is a better function for

00:00:11.039 --> 00:00:14.729
simulating large binomial experiments like coin flips.

00:00:14.730 --> 00:00:18.152
Here, you see NumPy's random.binomial function,

00:00:18.152 --> 00:00:20.818
which simulates a number of events n,

00:00:20.818 --> 00:00:24.585
which each have probability of success p.

00:00:24.585 --> 00:00:29.362
Success just represents one of the two outcomes of the event.

00:00:29.362 --> 00:00:32.280
Really, either outcome could be the success.

00:00:32.280 --> 00:00:35.984
For example, if our event is flipping a fair coin 10 times,

00:00:35.984 --> 00:00:38.792
we could define success as the number of heads.

00:00:38.792 --> 00:00:41.380
n would be the number of flips.

00:00:41.380 --> 00:00:42.855
In this case, 10,

00:00:42.854 --> 00:00:48.164
and p would be the probability of heads for each flip which is 0.5.

00:00:48.164 --> 00:00:49.225
To try this out,

00:00:49.225 --> 00:00:54.109
let's set n equal to 10 and p equal to 0.5.

00:00:54.109 --> 00:00:58.979
Notice, this returns 1 integer instead of an array of 10 outcomes.

00:00:58.979 --> 00:01:02.625
Since this function is only for binomial outcomes,

00:01:02.625 --> 00:01:07.125
it can simplify the output by just returning the number of successes.

00:01:07.125 --> 00:01:08.700
In this case, 4.

00:01:08.700 --> 00:01:10.760
This is the number of heads.

00:01:10.760 --> 00:01:13.770
Again, we can run the simulation many times.

00:01:13.769 --> 00:01:15.899
Let's run this 20 times.

00:01:15.900 --> 00:01:18.930
Each number in this array represents the number of

00:01:18.930 --> 00:01:23.340
heads that resulted from each test of 10 coin flips.

00:01:23.340 --> 00:01:26.290
This is the number of heads on the first 10 coin flips,

00:01:26.290 --> 00:01:30.284
while this one is the number on the second 10 coin flips and so on,

00:01:30.284 --> 00:01:33.969
for 20 different flippings of the coin.

00:01:33.969 --> 00:01:37.125
Let's find the mean number of heads for these tests.

00:01:37.125 --> 00:01:38.719
Since this is a fair coin,

00:01:38.719 --> 00:01:41.269
we would expect this mean to be close to 5.

00:01:41.269 --> 00:01:43.872
You can see that this is a little bit of a ways away,

00:01:43.873 --> 00:01:46.740
probably because we only ran 20 tests.

00:01:46.739 --> 00:01:49.724
Let's see what happens if we increase the number of tests.

00:01:49.724 --> 00:01:51.572
Since these events are random,

00:01:51.572 --> 00:01:56.549
it's not guaranteed that each simulation will perfectly average five heads.

00:01:56.549 --> 00:01:59.219
However, as this number of tests increase,

00:01:59.219 --> 00:02:03.045
the simulation more closely reflects the fairness of the coin.

00:02:03.045 --> 00:02:07.390
With 10,000 tests, the mean is much closer to five heads.

00:02:07.390 --> 00:02:12.439
Let's use matplotlib to plot a histogram of the outcomes in this simulation.

00:02:12.439 --> 00:02:17.000
As expected, the distribution is centered around five heads.

