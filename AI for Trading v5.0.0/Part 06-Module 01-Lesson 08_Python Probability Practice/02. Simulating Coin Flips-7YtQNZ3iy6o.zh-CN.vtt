WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.104
NumPy 有一个随机样本模块

00:00:03.104 --> 00:00:08.250
我们可以很方便地模拟掷硬币和 Python 等随机事件

00:00:08.250 --> 00:00:10.484
我们先举一个简单的例子

00:00:10.484 --> 00:00:12.869
模拟一次掷硬币

00:00:12.869 --> 00:00:15.424
我们将使用一个称为 randint (随机整数) 的函数

00:00:15.425 --> 00:00:19.359
但是 这会在我们指定的内含性下限与排他性上限之间

00:00:19.359 --> 00:00:24.640
生成多个随机整数

00:00:24.640 --> 00:00:28.570
我们可以用这些整数代表事件的结果

00:00:28.570 --> 00:00:31.019
例如掷硬币 我们试一下

00:00:31.019 --> 00:00:35.560
从 NumPy 的随机抽样模块中调用随机整数

00:00:35.560 --> 00:00:39.895
用零代表正面 一代表背面

00:00:39.895 --> 00:00:43.780
让这个函数随机生成零或者一

00:00:43.780 --> 00:00:49.600
下限将为零 上限将为二 因为它是排他性的

00:00:49.600 --> 00:00:51.670
由于下限是零

00:00:51.670 --> 00:00:52.995
这实际是默认值

00:00:52.994 --> 00:00:54.644
不需要包括它

00:00:54.645 --> 00:00:57.040
如果反复运行这个单元格

00:00:57.039 --> 00:01:01.554
会不断获得零或者一的随机结果 或者

00:01:01.554 --> 00:01:05.644
我们可以指定一个大小 以便获得更多事件

00:01:05.644 --> 00:01:09.890
很好 现在 我们有一万次随机掷硬币的结果

00:01:09.890 --> 00:01:13.750
这里生成的这些结果的平均值应该非常接近 0. 5

00:01:13.750 --> 00:01:18.545
因为现在获得零和一的概率是相等的

00:01:18.545 --> 00:01:20.890
但是如果我们想用偏性掷币法

00:01:20.890 --> 00:01:23.840
正面朝上的概率较大

00:01:23.840 --> 00:01:27.980
它实际上有另一个函数 叫做 random.choice (随机选择)

00:01:27.980 --> 00:01:30.005
这个函数的原理稍微不同

00:01:30.004 --> 00:01:34.599
它从你提供的一个阵列中随机选择多个值

00:01:34.599 --> 00:01:40.179
你也可以对阵列中的每个值赋予一组概率

00:01:40.180 --> 00:01:46.490
我们调用 random.choice 给它提供可能结果 （零和一）的阵列

00:01:46.489 --> 00:01:48.670
如果不指定概率

00:01:48.670 --> 00:01:53.704
它会给出每个值 并默认给出相等的概率

00:01:53.704 --> 00:01:57.340
我们可以用和上述示例相似的方式运行它

00:01:57.340 --> 00:02:00.355
所以 平均值也非常接近 0.5

00:02:00.355 --> 00:02:01.990
要用偏性掷币法

00:02:01.989 --> 00:02:06.069
我们可以用概率阵列指定参数 p

00:02:06.069 --> 00:02:09.784
假设正面是 0.8 背面是 0.2

00:02:09.784 --> 00:02:13.659
现在 你可以看到均值接近 0.2

00:02:13.659 --> 00:02:18.729
因为在 80% 的时间里选择的是零 (也就是正面)

00:02:18.729 --> 00:02:21.129
你可能注意到 我们从这些结果中获得的均值

00:02:21.129 --> 00:02:25.134
并不能始终准确反映实际概率

00:02:25.134 --> 00:02:28.224
但是 随着掷硬币次数的增加

00:02:28.224 --> 00:02:31.900
它们能更接近地反映实际概率

00:02:31.900 --> 00:02:33.390
后续我们将进行更详细的讲解

