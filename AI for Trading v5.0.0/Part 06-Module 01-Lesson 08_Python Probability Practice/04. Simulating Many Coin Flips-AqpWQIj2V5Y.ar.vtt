WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:03.960
حتى الآن، كنا نحاكي مخرجات الحدث عن طريق تكوين

00:00:03.960 --> 00:00:08.759
أرقام عشوائية مع NumPy's random.randint و
random.choice.

00:00:08.759 --> 00:00:11.039
بالرغم من ذلك، توجد وظيفة أفضل

00:00:11.039 --> 00:00:14.729
لمحاكاة التجارب الثنائية مثل قلب العملة.

00:00:14.730 --> 00:00:18.152
هنا، ترى وظيفة NumPy's random.binomial،

00:00:18.152 --> 00:00:20.818
التي تحاكي عدد من الأحداث N،

00:00:20.818 --> 00:00:24.585
والتي لديها احتمالية النجاح p.

00:00:24.585 --> 00:00:29.362
يمثل النجاح إحدى مُخرجّي الحدث.

00:00:29.362 --> 00:00:32.280
حقًا، إحدى المخرجات قد يكون النجاح.

00:00:32.280 --> 00:00:35.984
على سبيل المثال، إذا كان الحدث يقلب العملة 10
مرات،

00:00:35.984 --> 00:00:38.792
يمكننا تحديد النجاح كعدد الصور.

00:00:38.792 --> 00:00:41.380
قد يكون N عدد المرات التي تنقلب فيها العملة.

00:00:41.380 --> 00:00:42.855
في هذه الحالة، 10

00:00:42.854 --> 00:00:48.164
و p قد تكون احتمالية الصور لكل مرة تنقلب فيها والتي
هي 0.5.

00:00:48.164 --> 00:00:49.225
لتجربة ذلك،

00:00:49.225 --> 00:00:54.109
لنجعل n تساوي 10 و p تساوي 0.5.

00:00:54.109 --> 00:00:58.979
لاحظ، يعيد ذلك عدد صحيح واحد بدلاً من مصفوفة من 10
مخرجات.

00:00:58.979 --> 00:01:02.625
بما أن الوظيفة هي مخرجات ثنائية فقط،

00:01:02.625 --> 00:01:07.125
يمكنها تبسيط المُخرج بإعادة رقم عمليات النجاح.

00:01:07.125 --> 00:01:08.700
في هذه الحالة، 4.

00:01:08.700 --> 00:01:10.760
هذا هو عدد الصور.

00:01:10.760 --> 00:01:13.770
مرة أخرى، يمكننا إجراء المحاكاة عدة مرات.

00:01:13.769 --> 00:01:15.899
لنجريها 20 مرة.

00:01:15.900 --> 00:01:18.930
يمثل كل رقم في هذه المصفوفة عدد

00:01:18.930 --> 00:01:23.340
الصور التي نتجت عن كل محاولة لعشر مرات تنقلب فيها
العملة.

00:01:23.340 --> 00:01:26.290
هذا عدد الصور في أول 10 مرات تنقلب فيها العملة،

00:01:26.290 --> 00:01:30.284
بينما هذا هو عدد المرات العشر في الثانية التي تنقلب
فيها العملة وهكذا،

00:01:30.284 --> 00:01:33.969
في 20 مرة مختلفة تنقلب فيها العملة.

00:01:33.969 --> 00:01:37.125
لنجد متوسط عدد الصوة لهذه المحاولات.

00:01:37.125 --> 00:01:38.719
بما أن هذه عملة،

00:01:38.719 --> 00:01:41.269
نتوقع أن يكون هذا المتوسط قريب من 5.

00:01:41.269 --> 00:01:43.872
يمكنك رؤية أن هذه مجموعة قليلة الطرق،

00:01:43.873 --> 00:01:46.740
يُحتمل أنه بسبب أننا أجرينا 20 محاولة فقط.

00:01:46.739 --> 00:01:49.724
لنرى ماذا يحدث لو إذا قمنا بزيادة عدد المحاولات.

00:01:49.724 --> 00:01:51.572
بما أن هذه الأحداث عشوائية،

00:01:51.572 --> 00:01:56.549
لا نضمن أن يكون متوسط كل محاكاة خمسة صور بالضبط.

00:01:56.549 --> 00:01:59.219
بالرغم من ذلك، بينما يزيد عدد المحاولات،

00:01:59.219 --> 00:02:03.045
تعكس المحاكاة إنصاف العملة بشكل أفضل.

00:02:03.045 --> 00:02:07.390
مع 10000 محاولة، يقترب المتوسط من 5 صور.

00:02:07.390 --> 00:02:12.439
لنستخدم matplotlib لرسم مدرج تكراري للمخرجات في هذه
المحاكاة.

00:02:12.439 --> 00:02:17.000
كما هو متوقع، يتمركز التوزيع حول 5 صور.

