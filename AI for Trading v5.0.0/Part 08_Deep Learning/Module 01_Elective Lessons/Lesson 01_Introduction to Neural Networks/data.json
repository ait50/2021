{
  "data": {
    "lesson": {
      "id": 676628,
      "key": "00912248-2445-4713-ad9c-76b8536e1959",
      "title": "Introduction to Neural Networks",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, Luis will teach you the foundations of deep learning and neural networks. You'll also implement gradient descent and backpropagation in python, right here in the classroom!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/00912248-2445-4713-ad9c-76b8536e1959/676628/1544001573843/Introduction+to+Neural+Networks+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/00912248-2445-4713-ad9c-76b8536e1959/676628/1544001564215/Introduction+to+Neural+Networks+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 568702,
          "key": "619f8424-5c70-4e14-affe-7363296a41a3",
          "title": "Instructor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "619f8424-5c70-4e14-affe-7363296a41a3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 568704,
              "key": "1ff3dfa7-f667-4118-ac50-05c3e1935eba",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5ab03e86_screen-shot-2018-03-19-at-3.49.28-pm/screen-shot-2018-03-19-at-3.49.28-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1ff3dfa7-f667-4118-ac50-05c3e1935eba",
              "caption": "_Luis Serrano_",
              "alt": "",
              "width": 300,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 568709,
              "key": "48121c06-f908-4cb5-8360-11fbbdf7f013",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Hello and welcome to **Introduction to Neural Networks**, given by Luis!\n\nLuis was formerly a Machine Learning Engineer at Google. He holds a PhD in mathematics from the University of Michigan, and a Postdoctoral Fellowship at the University of Quebec at Montreal.\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 348259,
          "key": "34148307-a49b-422c-b9bd-f6ac62bf35af",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "34148307-a49b-422c-b9bd-f6ac62bf35af",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791701,
              "key": "f1564e1b-446f-4bb3-bff2-390b05ec9377",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tn-CrUTkCUc",
                "china_cdn_id": "tn-CrUTkCUc.mp4"
              }
            }
          ]
        },
        {
          "id": 301678,
          "key": "501ce6c5-9b80-4536-8754-f7da607fc40d",
          "title": "Classification Problems 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "501ce6c5-9b80-4536-8754-f7da607fc40d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308923,
              "key": "83927222-7248-4f54-974e-27fb2598db5a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Classification Problems\nWe'll start by defining what we mean by classification problems, and applying it to a simple example.",
              "instructor_notes": ""
            },
            {
              "id": 791702,
              "key": "ec2efddc-a3a2-441a-b038-f9e99b1b274e",
              "title": "Exemplo de classificação",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Dh625piH7Z0",
                "china_cdn_id": "Dh625piH7Z0.mp4"
              }
            },
            {
              "id": 309228,
              "key": "3583f4e1-51e7-4488-bec5-1b376670888d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912bcf6_student-quiz/student-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3583f4e1-51e7-4488-bec5-1b376670888d",
              "caption": "",
              "alt": null,
              "width": 2560,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 307754,
              "key": "623e87b9-7117-4771-bb0e-04efc0ad7237",
              "title": "Classification Example",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "623e87b9-7117-4771-bb0e-04efc0ad7237",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Does the student get accepted?",
                "answers": [
                  {
                    "id": "a1494006799855",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1494006825413",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 379485,
          "key": "64b290a9-b38b-4a5a-859f-215eaae008d1",
          "title": "Classification Problems 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "64b290a9-b38b-4a5a-859f-215eaae008d1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791704,
              "key": "240a9e6f-94f0-428f-9873-cc654a1426d6",
              "title": "分类问题 2 ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "46PywnGa_cQ",
                "china_cdn_id": "46PywnGa_cQ.mp4"
              }
            }
          ]
        },
        {
          "id": 308853,
          "key": "55e267a6-888b-4093-90cb-6b131ad00c6d",
          "title": "Linear Boundaries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "55e267a6-888b-4093-90cb-6b131ad00c6d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791705,
              "key": "14ae427e-5e69-4c06-b384-25bf27d0c86c",
              "title": "Linear Boundaries",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "X-uMlsBi07k",
                "china_cdn_id": "X-uMlsBi07k.mp4"
              }
            },
            {
              "id": 378611,
              "key": "469c2b98-adcb-4b75-9aa6-aee701d69f95",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "469c2b98-adcb-4b75-9aa6-aee701d69f95",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now that you know the equation for the line (2x<sub>1</sub> + x<sub>2</sub> - 18=0), and similarly the “score” (2x<sub>1</sub> + x<sub>2</sub> - 18), what is the score of the student who got 7 in the test and 6 for grades? ",
                "matchers": [
                  {
                    "expression": "^([2]{1})$"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 308854,
          "key": "3a0e2972-89dc-4b08-826a-1011b9b554ac",
          "title": "Higher Dimensions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a0e2972-89dc-4b08-826a-1011b9b554ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791706,
              "key": "2e169ccb-a205-49d5-9cc5-b22501fb1d90",
              "title": "09 Higher Dimensions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "eBHunImDmWw",
                "china_cdn_id": "eBHunImDmWw.mp4"
              }
            },
            {
              "id": 378619,
              "key": "d4815d03-7e0b-4db9-884f-d3bc9f03ef3e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d4815d03-7e0b-4db9-884f-d3bc9f03ef3e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Given the table in the video above, what would the dimensions be for input features (x), the weights (W), and the bias (b) to satisfy (Wx + b)?",
                "answers": [
                  {
                    "id": "a1503541594791",
                    "text": "W: (nx1), x: (1xn), b: (1x1) ",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541617335",
                    "text": "W: (1xn), x: (1xn), b: (nx1) ",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541626821",
                    "text": "W: (1xn), x: (nx1), b: (1x1) ",
                    "is_correct": true
                  },
                  {
                    "id": "a1503541635317",
                    "text": "W: (1xn), x: (nx1), b: (1xn) ",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 308214,
          "key": "6ba9c9eb-2e36-4b03-9bcc-01e71260a024",
          "title": "Perceptrons",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6ba9c9eb-2e36-4b03-9bcc-01e71260a024",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791708,
              "key": "83ec4c80-7e00-4682-9319-054650c2ae83",
              "title": "DL 06 Perceptron Definition Fix V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hImSxZyRiOw",
                "china_cdn_id": "hImSxZyRiOw.mp4"
              }
            },
            {
              "id": 814306,
              "key": "4046e81e-4461-4a62-8a90-096e1c119956",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Corrections:** \n- At 3:07 in the video, the title should read \"Step Function\", not \"Set Function\".\n- At 3:07 in the video, the definition of the Step function should be:\n   \n  y=1 if x >= 0;\n  y=0 if x<0",
              "instructor_notes": ""
            },
            {
              "id": 378612,
              "key": "d87f6c38-4fd9-47d6-a832-37000882304a",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d87f6c38-4fd9-47d6-a832-37000882304a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Given Score = 2\\*Test + 1*Grade - 18, suppose w<sub>1</sub> was 1.5 instead of 2. Would the student who got 7 on the test and 6 on the grades be accepted or rejected?",
                "answers": [
                  {
                    "id": "a1503541286843",
                    "text": "Accepted",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541296314",
                    "text": "Rejected",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 308857,
          "key": "a3b18b18-8496-4775-af48-921ab35bd306",
          "title": "Why \"Neural Networks\"?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a3b18b18-8496-4775-af48-921ab35bd306",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791709,
              "key": "1a2e3319-7659-4df2-8563-46916b089cdc",
              "title": "为何是神经网络",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zAkzOZntK6Y",
                "china_cdn_id": "zAkzOZntK6Y.mp4"
              }
            }
          ]
        },
        {
          "id": 301687,
          "key": "4d015fb7-e73c-447f-a17a-34a0a2b694a0",
          "title": "Perceptrons as Logical Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4d015fb7-e73c-447f-a17a-34a0a2b694a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308861,
              "key": "66e4ffdd-f84c-4b28-a379-0600ba2dcb6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Perceptrons as Logical Operators\n\nIn this lesson, we'll see one of the many great applications of perceptrons. As logical operators! You'll have the chance to create the perceptrons for the most common of these, the **AND**, **OR**, and **NOT** operators. And then, we'll see what to do about the elusive **XOR** operator. Let's dive in!\n\n# AND Perceptron",
              "instructor_notes": ""
            },
            {
              "id": 791711,
              "key": "004dba17-a1ca-4951-b48a-13ee1790b3dd",
              "title": "DL 08 AND And OR Perceptrons",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Y-ImuxNpS40",
                "china_cdn_id": "Y-ImuxNpS40.mp4"
              }
            },
            {
              "id": 966908,
              "key": "84a0e5b2-aeca-4f29-a6d8-0bdb926c528e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Note: The second and third rows of the third column from 1:50-onward should be blue in color (they have the correct value of 1) for the OR perceptron.",
              "instructor_notes": ""
            },
            {
              "id": 309230,
              "key": "cd9d82d7-b53f-434f-a029-b8dc517f43e1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912bf0e_and-quiz/and-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cd9d82d7-b53f-434f-a029-b8dc517f43e1",
              "caption": "",
              "alt": null,
              "width": 1800,
              "height": 460,
              "instructor_notes": null
            },
            {
              "id": 308240,
              "key": "fdd28d8a-fcaf-4fc0-a222-a7199f1db55d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What are the weights and bias for the AND perceptron?\nSet the weights (`weight1`, `weight2`)  and bias (`bias`) to values that will correctly determine the AND operation as shown above.  \nMore than one set of values will work!",
              "instructor_notes": ""
            },
            {
              "id": 307783,
              "key": "11c90890-7258-40ad-a29a-f7cd3593d47f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "11c90890-7258-40ad-a29a-f7cd3593d47f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5630399981158400",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\n# TODO: Set weight1, weight2, and bias\nweight1 = 0.0\nweight2 = 0.0\nbias = 0.0\n\n\n# DON'T CHANGE ANYTHING BELOW\n# Inputs and outputs\ntest_inputs = [(0, 0), (0, 1), (1, 0), (1, 1)]\ncorrect_outputs = [False, False, False, True]\noutputs = []\n\n# Generate and check output\nfor test_input, correct_output in zip(test_inputs, correct_outputs):\n    linear_combination = weight1 * test_input[0] + weight2 * test_input[1] + bias\n    output = int(linear_combination >= 0)\n    is_correct_string = 'Yes' if output == correct_output else 'No'\n    outputs.append([test_input[0], test_input[1], linear_combination, output, is_correct_string])\n\n# Print output\nnum_wrong = len([output[4] for output in outputs if output[4] == 'No'])\noutput_frame = pd.DataFrame(outputs, columns=['Input 1', '  Input 2', '  Linear Combination', '  Activation Output', '  Is Correct'])\nif not num_wrong:\n    print('Nice!  You got it all correct.\\n')\nelse:\n    print('You got {} wrong.  Keep trying!\\n'.format(num_wrong))\nprint(output_frame.to_string(index=False))\n",
                    "name": "quiz.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 309352,
              "key": "7b7a5347-894d-45ad-95e3-8e4e76ea86f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# OR Perceptron",
              "instructor_notes": ""
            },
            {
              "id": 309231,
              "key": "6cfa3fe3-458e-4132-bd3f-864074da39d1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912c102_or-quiz/or-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6cfa3fe3-458e-4132-bd3f-864074da39d1",
              "caption": "",
              "alt": null,
              "width": 2523,
              "height": 590,
              "instructor_notes": null
            },
            {
              "id": 308241,
              "key": "33817358-f608-405c-9164-3f01ae5744b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The OR perceptron is very similar to an AND perceptron.  In the image below, the OR perceptron has the same line as the AND perceptron, except the line is shifted down.  What can you do to the weights and/or bias to achieve this?  Use the following AND perceptron to create an OR Perceptron.",
              "instructor_notes": ""
            },
            {
              "id": 309232,
              "key": "90883050-5cc9-4d3f-9cd3-087edde9eaeb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912c232_and-to-or/and-to-or.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/90883050-5cc9-4d3f-9cd3-087edde9eaeb",
              "caption": "",
              "alt": null,
              "width": 2519,
              "height": 704,
              "instructor_notes": null
            },
            {
              "id": 308242,
              "key": "73ddcfe0-0272-4bdc-99ab-ea89f068a887",
              "title": "OR Perceptron Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "73ddcfe0-0272-4bdc-99ab-ea89f068a887",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are two ways to go from an AND perceptron to an OR perceptron?",
                "answers": [
                  {
                    "id": "a1494182870768",
                    "text": "Increase the weights",
                    "is_correct": true
                  },
                  {
                    "id": "a1494182883245",
                    "text": "Decrease the weights",
                    "is_correct": false
                  },
                  {
                    "id": "a1494182884153",
                    "text": "Increase a single weight",
                    "is_correct": false
                  },
                  {
                    "id": "a1494182884879",
                    "text": "Decrease a single weight",
                    "is_correct": false
                  },
                  {
                    "id": "a1494182885650",
                    "text": "Increase the magnitude of the bias",
                    "is_correct": false
                  },
                  {
                    "id": "a1494182887943",
                    "text": "Decrease the magnitude of the bias",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 308216,
              "key": "900788cb-de0c-45b1-9a6a-38132e814ba7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# NOT Perceptron\nUnlike the other perceptrons we looked at, the NOT operation only cares about one input.  The operation returns a `0` if the input is `1` and a `1` if it's a `0`.  The other inputs to the perceptron are ignored.\n\nIn this quiz, you'll set the weights (`weight1`, `weight2`)  and bias `bias` to the values that calculate the NOT operation on the second input and ignores the first input.",
              "instructor_notes": ""
            },
            {
              "id": 308217,
              "key": "9c5828f7-2d28-495b-824a-1a72647c4df8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "9c5828f7-2d28-495b-824a-1a72647c4df8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4935618422505472",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\n# TODO: Set weight1, weight2, and bias\nweight1 = 0.0\nweight2 = 0.0\nbias = 0.0\n\n\n# DON'T CHANGE ANYTHING BELOW\n# Inputs and outputs\ntest_inputs = [(0, 0), (0, 1), (1, 0), (1, 1)]\ncorrect_outputs = [True, False, True, False]\noutputs = []\n\n# Generate and check output\nfor test_input, correct_output in zip(test_inputs, correct_outputs):\n    linear_combination = weight1 * test_input[0] + weight2 * test_input[1] + bias\n    output = int(linear_combination >= 0)\n    is_correct_string = 'Yes' if output == correct_output else 'No'\n    outputs.append([test_input[0], test_input[1], linear_combination, output, is_correct_string])\n\n# Print output\nnum_wrong = len([output[4] for output in outputs if output[4] == 'No'])\noutput_frame = pd.DataFrame(outputs, columns=['Input 1', '  Input 2', '  Linear Combination', '  Activation Output', '  Is Correct'])\nif not num_wrong:\n    print('Nice!  You got it all correct.\\n')\nelse:\n    print('You got {} wrong.  Keep trying!\\n'.format(num_wrong))\nprint(output_frame.to_string(index=False))",
                    "name": "quiz.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 791712,
              "key": "4f98bd55-4386-4f27-91c5-e6ed6827767f",
              "title": "DL 09 XOR Perceptron",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-z9K49fdE3g",
                "china_cdn_id": "-z9K49fdE3g.mp4"
              }
            },
            {
              "id": 309233,
              "key": "79a219c6-c286-4c31-ba2a-24ea02296b37",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# XOR Perceptron",
              "instructor_notes": ""
            },
            {
              "id": 309234,
              "key": "bcb66ae2-ee07-44a6-b131-3288b04a8a25",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912c2f1_xor/xor.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bcb66ae2-ee07-44a6-b131-3288b04a8a25",
              "caption": "",
              "alt": null,
              "width": 1898,
              "height": 526,
              "instructor_notes": null
            },
            {
              "id": 308220,
              "key": "15028e9f-0aa4-4162-91cd-e507dd9ed407",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Build an XOR Multi-Layer Perceptron\n\nNow, let's build a multi-layer perceptron from the AND, NOT, and OR perceptrons to create XOR logic!\n\nThe neural network below contains 3 perceptrons, A, B, and C. The last one (AND) has been given for you. The input to the neural network is from the first node. The output comes out of the last node.\n\nThe multi-layer perceptron below calculates XOR.  Each perceptron is a logic operation of AND, OR, and NOT.   However, the perceptrons A, B, and C don't indicate their operation.  In the following quiz, set the correct operations for the perceptrons to calculate XOR.",
              "instructor_notes": ""
            },
            {
              "id": 308677,
              "key": "af97e020-f83a-47fb-ad7e-6c0bded2de89",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/59112a6b_xor-quiz/xor-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/af97e020-f83a-47fb-ad7e-6c0bded2de89",
              "caption": "",
              "alt": null,
              "width": 1760,
              "height": 599,
              "instructor_notes": null
            },
            {
              "id": 308225,
              "key": "84a12a7b-ef22-4003-9528-9e44fd73d648",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "84a12a7b-ef22-4003-9528-9e44fd73d648",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Set the operations for the perceptrons in the XOR neural network."
                },
                "concepts_label": "Perceptron",
                "answers_label": "Operators",
                "concepts": [
                  {
                    "text": "A",
                    "correct_answer": {
                      "id": "a1494297409537",
                      "text": "AND"
                    }
                  },
                  {
                    "text": "B",
                    "correct_answer": {
                      "id": "a1494297414036",
                      "text": "OR"
                    }
                  },
                  {
                    "text": "C",
                    "correct_answer": {
                      "id": "a1494297422474",
                      "text": "NOT"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1494297422474",
                    "text": "NOT"
                  },
                  {
                    "id": "a1494297414036",
                    "text": "OR"
                  },
                  {
                    "id": "a1494297409537",
                    "text": "AND"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 308841,
          "key": "8ea20904-0215-4e44-afa9-bb5a720bd028",
          "title": "Perceptron Trick",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8ea20904-0215-4e44-afa9-bb5a720bd028",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308864,
              "key": "e0971445-04f0-4968-ab4d-a1ebeace7bd9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Perceptron Trick\nIn the last section you used your logic and your mathematical knowledge to create perceptrons for some of the most common logical operators. In real life, though, we can't be building these perceptrons ourselves. The idea is that we give them the result, and they build themselves. For this, here's a pretty neat trick that will help us.",
              "instructor_notes": ""
            },
            {
              "id": 308844,
              "key": "e640ff2d-fdb0-458c-b12b-d3ef72bfe93f",
              "title": "Perceptron Algorithm",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-zhTROHtscQ",
                "china_cdn_id": "-zhTROHtscQ.mp4"
              }
            },
            {
              "id": 308846,
              "key": "e0640565-e4ef-420d-98b5-51d4d0eec4e0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912022e_perceptronquiz/perceptronquiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e0640565-e4ef-420d-98b5-51d4d0eec4e0",
              "caption": "",
              "alt": null,
              "width": 1132,
              "height": 405,
              "instructor_notes": null
            },
            {
              "id": 308847,
              "key": "d5bc6c8f-b9a3-4f8f-97d0-9777f6895dd2",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d5bc6c8f-b9a3-4f8f-97d0-9777f6895dd2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Does the misclassified point want the line to be closer or farther?",
                "answers": [
                  {
                    "id": "a1494352441693",
                    "text": "Closer",
                    "is_correct": true
                  },
                  {
                    "id": "a1494352459483",
                    "text": "Farther",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 379484,
              "key": "455adbfa-7188-4d02-8c4a-8e1dd4be6b11",
              "title": "DL 10 S  Perceptron Algorithm",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fATmrG2hQzI",
                "china_cdn_id": "fATmrG2hQzI.mp4"
              }
            },
            {
              "id": 379491,
              "key": "135f4b15-5ec8-4ed6-98f7-52240c7e30f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Time for some math!\nNow that we've learned that the points that are misclassified, want the line to move closer to them, let's do some math. The following video shows a mathematical trick that modifies the equation of the line, so that it comes closer to a particular point.",
              "instructor_notes": ""
            },
            {
              "id": 385196,
              "key": "84154f0f-806b-46dd-ba2d-e2031b1cae98",
              "title": "07 Perceptron Algorithm Trick",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lif_qPmXvWA",
                "china_cdn_id": "lif_qPmXvWA.mp4"
              }
            },
            {
              "id": 378615,
              "key": "9ec3484a-6109-4705-a670-43846571a014",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9ec3484a-6109-4705-a670-43846571a014",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "For the second example, where the line is described by 3x<sub>1</sub>+ 4x<sub>2</sub> - 10 = 0, if the learning rate was set to 0.1, how many times would you have to apply the perceptron trick to move the line to a position where the blue point, at (1, 1), is correctly classified? \n",
                "matchers": [
                  {
                    "expression": "10"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 301689,
          "key": "dc837952-c0d8-43fc-921c-f1ffe316c795",
          "title": "Perceptron Algorithm",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dc837952-c0d8-43fc-921c-f1ffe316c795",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308866,
              "key": "a60d96eb-348a-4b28-afc5-8690d2e9275e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Perceptron Algorithm\nAnd now, with the perceptron trick in our hands, we can fully develop the perceptron algorithm! The following video will show you the pseudocode, and in the quiz below, you'll have the chance to code it in Python.",
              "instructor_notes": ""
            },
            {
              "id": 543496,
              "key": "aa6e7c27-1f41-4664-8120-23f5d0a80622",
              "title": "Perceptron Algorithm Pseudocode",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "There's a small error in the above video in that <span class=\"mathquill\">W_i</span> should be updated to <span class=\"mathquill\">W_i  = W_i + \\alpha x_i</span> (plus or minus depending on the situation).",
              "video": {
                "youtube_id": "p8Q3yu9YqYk",
                "china_cdn_id": "p8Q3yu9YqYk.mp4"
              }
            },
            {
              "id": 308046,
              "key": "5cde4654-e7cf-47d5-967c-ad2b91f8fe00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Coding the Perceptron Algorithm\nTime to code! In this quiz, you'll have the chance to implement the perceptron algorithm to separate the following data (given in the file data.csv).",
              "instructor_notes": ""
            },
            {
              "id": 308043,
              "key": "28d86cb6-c4b4-4b75-a919-bddc10c5c7c1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/590d06dd_points/points.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/28d86cb6-c4b4-4b75-a919-bddc10c5c7c1",
              "caption": "",
              "alt": "",
              "width": 385,
              "height": 260,
              "instructor_notes": null
            },
            {
              "id": 308208,
              "key": "a5b3a99b-0299-47bd-b2fe-1a8ebf07d1d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Recall that the perceptron step works as follows. For a point with coordinates\n<span class=\"mathquill\">(p,q)</span>, label <span class=\"mathquill\"> y</span>, and prediction given by the equation <span class=\"mathquill\">\\hat{y} = step(w_1x_1 + w_2x_2 + b)</span>:\n\n- If the point is correctly classified, do nothing.\n- If the point is classified positive, but it has a negative label, subtract\n<span class=\"mathquill\">\\alpha p, \\alpha q,</span> and\n<span class=\"mathquill\">\\alpha</span>\nfrom\n<span class=\"mathquill\">w_1, w_2,</span>\nand\n<span class=\"mathquill\">b</span>\nrespectively.\n- If the point is classified negative, but it has a positive label, add\n<span class=\"mathquill\">\\alpha p, \\alpha q,</span>\nand\n<span class=\"mathquill\">\\alpha</span>\nto\n<span class=\"mathquill\">w_1, w_2,</span>\nand\n<span class=\"mathquill\">b</span>\nrespectively.\n\nThen click on `test run` to graph the solution that the perceptron algorithm gives you. It'll actually draw a set of dotted lines, that show how the algorithm approaches to the best solution, given by the black solid line.\n\nFeel free to play with the parameters of the algorithm (number of epochs, learning rate, and even the randomizing of the initial parameters) to see how your initial conditions can affect the solution!",
              "instructor_notes": ""
            },
            {
              "id": 308040,
              "key": "d9b6c9f8-b58d-45a4-9ea9-6dacd8fcfd7c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "d9b6c9f8-b58d-45a4-9ea9-6dacd8fcfd7c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5660419386638336",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\n# Setting the random seed, feel free to change it and see different solutions.\nnp.random.seed(42)\n\ndef stepFunction(t):\n    if t >= 0:\n        return 1\n    return 0\n\ndef prediction(X, W, b):\n    return stepFunction((np.matmul(X,W)+b)[0])\n\n# TODO: Fill in the code below to implement the perceptron trick.\n# The function should receive as inputs the data X, the labels y,\n# the weights W (as an array), and the bias b,\n# update the weights and bias W, b, according to the perceptron algorithm,\n# and return W and b.\ndef perceptronStep(X, y, W, b, learn_rate = 0.01):\n    # Fill in code\n    return W, b\n    \n# This function runs the perceptron algorithm repeatedly on the dataset,\n# and returns a few of the boundary lines obtained in the iterations,\n# for plotting purposes.\n# Feel free to play with the learning rate and the num_epochs,\n# and see your results plotted below.\ndef trainPerceptronAlgorithm(X, y, learn_rate = 0.01, num_epochs = 25):\n    x_min, x_max = min(X.T[0]), max(X.T[0])\n    y_min, y_max = min(X.T[1]), max(X.T[1])\n    W = np.array(np.random.rand(2,1))\n    b = np.random.rand(1)[0] + x_max\n    # These are the solution lines that get plotted below.\n    boundary_lines = []\n    for i in range(num_epochs):\n        # In each epoch, we apply the perceptron step.\n        W, b = perceptronStep(X, y, W, b, learn_rate)\n        boundary_lines.append((-W[0]/W[1], -b/W[1]))\n    return boundary_lines\n",
                    "name": "perceptron.py"
                  },
                  {
                    "text": "0.78051,-0.063669,1\n0.28774,0.29139,1\n0.40714,0.17878,1\n0.2923,0.4217,1\n0.50922,0.35256,1\n0.27785,0.10802,1\n0.27527,0.33223,1\n0.43999,0.31245,1\n0.33557,0.42984,1\n0.23448,0.24986,1\n0.0084492,0.13658,1\n0.12419,0.33595,1\n0.25644,0.42624,1\n0.4591,0.40426,1\n0.44547,0.45117,1\n0.42218,0.20118,1\n0.49563,0.21445,1\n0.30848,0.24306,1\n0.39707,0.44438,1\n0.32945,0.39217,1\n0.40739,0.40271,1\n0.3106,0.50702,1\n0.49638,0.45384,1\n0.10073,0.32053,1\n0.69907,0.37307,1\n0.29767,0.69648,1\n0.15099,0.57341,1\n0.16427,0.27759,1\n0.33259,0.055964,1\n0.53741,0.28637,1\n0.19503,0.36879,1\n0.40278,0.035148,1\n0.21296,0.55169,1\n0.48447,0.56991,1\n0.25476,0.34596,1\n0.21726,0.28641,1\n0.67078,0.46538,1\n0.3815,0.4622,1\n0.53838,0.32774,1\n0.4849,0.26071,1\n0.37095,0.38809,1\n0.54527,0.63911,1\n0.32149,0.12007,1\n0.42216,0.61666,1\n0.10194,0.060408,1\n0.15254,0.2168,1\n0.45558,0.43769,1\n0.28488,0.52142,1\n0.27633,0.21264,1\n0.39748,0.31902,1\n0.5533,1,0\n0.44274,0.59205,0\n0.85176,0.6612,0\n0.60436,0.86605,0\n0.68243,0.48301,0\n1,0.76815,0\n0.72989,0.8107,0\n0.67377,0.77975,0\n0.78761,0.58177,0\n0.71442,0.7668,0\n0.49379,0.54226,0\n0.78974,0.74233,0\n0.67905,0.60921,0\n0.6642,0.72519,0\n0.79396,0.56789,0\n0.70758,0.76022,0\n0.59421,0.61857,0\n0.49364,0.56224,0\n0.77707,0.35025,0\n0.79785,0.76921,0\n0.70876,0.96764,0\n0.69176,0.60865,0\n0.66408,0.92075,0\n0.65973,0.66666,0\n0.64574,0.56845,0\n0.89639,0.7085,0\n0.85476,0.63167,0\n0.62091,0.80424,0\n0.79057,0.56108,0\n0.58935,0.71582,0\n0.56846,0.7406,0\n0.65912,0.71548,0\n0.70938,0.74041,0\n0.59154,0.62927,0\n0.45829,0.4641,0\n0.79982,0.74847,0\n0.60974,0.54757,0\n0.68127,0.86985,0\n0.76694,0.64736,0\n0.69048,0.83058,0\n0.68122,0.96541,0\n0.73229,0.64245,0\n0.76145,0.60138,0\n0.58985,0.86955,0\n0.73145,0.74516,0\n0.77029,0.7014,0\n0.73156,0.71782,0\n0.44556,0.57991,0\n0.85275,0.85987,0\n0.51912,0.62359,0\n",
                    "name": "data.csv"
                  },
                  {
                    "text": "def perceptronStep(X, y, W, b, learn_rate = 0.01):\n    for i in range(len(X)):\n        y_hat = prediction(X[i],W,b)\n        if y[i]-y_hat == 1:\n            W[0] += X[i][0]*learn_rate\n            W[1] += X[i][1]*learn_rate\n            b += learn_rate\n        elif y[i]-y_hat == -1:\n            W[0] -= X[i][0]*learn_rate\n            W[1] -= X[i][1]*learn_rate\n            b -= learn_rate\n    return W, b\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 301694,
          "key": "82825f51-bc33-4ad8-81f3-4785ab3efbcf",
          "title": "Non-Linear Regions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "82825f51-bc33-4ad8-81f3-4785ab3efbcf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308693,
              "key": "fb3cfbe9-0222-48fc-bab9-94c183902175",
              "title": "Non-Linear Regions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "B8UrWnHh1Wc",
                "china_cdn_id": "B8UrWnHh1Wc.mp4"
              }
            }
          ]
        },
        {
          "id": 301696,
          "key": "dcbb24bf-3cc1-43b3-977b-b164895f357b",
          "title": "Error Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dcbb24bf-3cc1-43b3-977b-b164895f357b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308694,
              "key": "6b00a6da-4895-46f7-a82c-0ea833eaa7cc",
              "title": "Error Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YfUUunxWIJw",
                "china_cdn_id": "YfUUunxWIJw.mp4"
              }
            }
          ]
        },
        {
          "id": 308868,
          "key": "5e1f6c71-6c75-4bb2-98a9-ee40c0eb3472",
          "title": "Log-loss Error Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5e1f6c71-6c75-4bb2-98a9-ee40c0eb3472",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 309499,
              "key": "86d3777f-17d5-4381-85ec-085b74bcee0f",
              "title": "Error Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jfKShxGAbok",
                "china_cdn_id": "jfKShxGAbok.mp4"
              }
            },
            {
              "id": 565343,
              "key": "35f1a1b8-e948-4fc3-8acd-f652e97b15ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We pick back up on log-loss error with the gradient descent concept.",
              "instructor_notes": ""
            },
            {
              "id": 378621,
              "key": "3765ff07-0f4e-4610-b0af-6f2ba1a254db",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3765ff07-0f4e-4610-b0af-6f2ba1a254db",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following conditions should be met in order to apply gradient descent? (Check all that apply.)",
                "answers": [
                  {
                    "id": "a1503541771251",
                    "text": "The error function should be discrete",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541789309",
                    "text": "The error function should contain only positive values",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541796403",
                    "text": "The error function should be differentiable",
                    "is_correct": true
                  },
                  {
                    "id": "a1503541797713",
                    "text": "The error function should be normalized",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541808617",
                    "text": "The error function should be continuous",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 301698,
          "key": "4b7026be-06e3-49de-a362-ce109172659e",
          "title": "Discrete vs Continuous",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4b7026be-06e3-49de-a362-ce109172659e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308871,
              "key": "792ca1fc-b193-4e45-aa61-5bd9651ece7a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Discrete vs Continuous Predictions\nIn the last few videos, we learned that continuous error functions are better than discrete error functions, when it comes to optimizing. For this, we need to switch from discrete to continuous predictions. The next two videos will guide us in doing that.",
              "instructor_notes": ""
            },
            {
              "id": 308696,
              "key": "f6c52a7d-38da-4d33-ad00-bce1ba773038",
              "title": "Discrete vs Continuous",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rdP-RPDFkl0",
                "china_cdn_id": "rdP-RPDFkl0.mp4"
              }
            },
            {
              "id": 328024,
              "key": "104afa4a-2de4-4545-aa33-7b4f815a06e2",
              "title": "Discrete vs. Continuous",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Rm2KxFaPiJg",
                "china_cdn_id": "Rm2KxFaPiJg.mp4"
              }
            },
            {
              "id": 395737,
              "key": "80c19fd4-8fc9-422d-8445-14b8982f7c05",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "80c19fd4-8fc9-422d-8445-14b8982f7c05",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The sigmoid function is defined as sigmoid(x) = 1/(1+e<sup>-x</sup>). If the score is defined by 4x<sub>1</sub> + 5x<sub>2</sub> - 9 = score, then which of the following points has exactly a 50% probability of being blue or red? (Choose all that are correct.)",
                "answers": [
                  {
                    "id": "a1505308853539",
                    "text": "(1, 1)",
                    "is_correct": true
                  },
                  {
                    "id": "a1505308863529",
                    "text": "(2, 4)",
                    "is_correct": false
                  },
                  {
                    "id": "a1505308869439",
                    "text": "(5, -5)",
                    "is_correct": false
                  },
                  {
                    "id": "a1505308875210",
                    "text": "(-4, 5)",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 301701,
          "key": "9e1364a8-e8b4-4eac-be12-4d44a139f721",
          "title": "Softmax",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9e1364a8-e8b4-4eac-be12-4d44a139f721",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308873,
              "key": "4bb77d61-423f-4b74-9d69-cc2ed7bf762a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Multi-Class Classification and Softmax",
              "instructor_notes": ""
            },
            {
              "id": 308758,
              "key": "0bfd9bff-3a33-48cf-b60b-ccdc868aec6d",
              "title": "Quiz - Softmax",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NNoezNnAMTY",
                "china_cdn_id": "NNoezNnAMTY.mp4"
              }
            },
            {
              "id": 308874,
              "key": "2a0b5a06-9388-4f47-a268-5a7381f5053f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Softmax Function\nIn the next video, we'll learn about the softmax function, which is the equivalent of the sigmoid activation function, but when the problem has 3 or more classes.",
              "instructor_notes": ""
            },
            {
              "id": 309219,
              "key": "24650f94-1030-4d1d-883f-f44f0f7de7a7",
              "title": "DL 18 Q Softmax V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RC_A9Tu99y4",
                "china_cdn_id": "RC_A9Tu99y4.mp4"
              }
            },
            {
              "id": 308063,
              "key": "e905f181-a259-41a1-85b5-77ccb41dcd81",
              "title": "Softmax Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e905f181-a259-41a1-85b5-77ccb41dcd81",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What function turns every number into a positive number?",
                "answers": [
                  {
                    "id": "a1494026191658",
                    "text": "sin",
                    "is_correct": false
                  },
                  {
                    "id": "a1494026206850",
                    "text": "cos",
                    "is_correct": false
                  },
                  {
                    "id": "a1494026207723",
                    "text": "log",
                    "is_correct": false
                  },
                  {
                    "id": "a1494026208481",
                    "text": "exp",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 379483,
              "key": "7d862e0b-0025-4e81-a8f9-657d2bdb5be1",
              "title": "DL 18 S Softmax",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "n8S-v_LCTms",
                "china_cdn_id": "n8S-v_LCTms.mp4"
              }
            },
            {
              "id": 308264,
              "key": "1bc7f5be-9c0f-47da-990b-47becc82e1e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Coding Softmax\n\nAnd now, your time to shine! Let's code the formula for the Softmax function in Python.",
              "instructor_notes": ""
            },
            {
              "id": 308070,
              "key": "b72b37b6-940b-47b4-8a2d-073f396a9853",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "b72b37b6-940b-47b4-8a2d-073f396a9853",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4839883869913088",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\n\n# Write a function that takes as input a list of numbers, and returns\n# the list of values given by the softmax function.\ndef softmax(L):\n    pass",
                    "name": "softmax.py"
                  },
                  {
                    "text": "import numpy as np\n\ndef softmax(L):\n    expL = np.exp(L)\n    sumExpL = sum(expL)\n    result = []\n    for i in expL:\n        result.append(i*1.0/sumExpL)\n    return result\n    \n    # Note: The function np.divide can also be used here, as follows:\n    # def softmax(L):\n    #     expL = np.exp(L)\n    #     return np.divide (expL, expL.sum())\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 301703,
          "key": "cac0e3d6-38c1-4eb6-8440-4325b44703b3",
          "title": "One-Hot Encoding",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cac0e3d6-38c1-4eb6-8440-4325b44703b3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385922,
              "key": "96888061-0952-4033-9b09-e11aed5ea38e",
              "title": "One-Hot Encoding",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AePvjhyvsBo",
                "china_cdn_id": "AePvjhyvsBo.mp4"
              }
            }
          ]
        },
        {
          "id": 301705,
          "key": "32704510-a70c-4a9b-a2c6-77ccdd389c0c",
          "title": "Maximum Likelihood",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "32704510-a70c-4a9b-a2c6-77ccdd389c0c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308875,
              "key": "81b2ed57-5d53-4c2d-88b7-b08cd44c954e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Maximum Likelihood\nProbability will be one of our best friends as we go through Deep Learning. In this lesson, we'll see how we can use probability to evaluate (and improve!) our models.",
              "instructor_notes": ""
            },
            {
              "id": 308701,
              "key": "fe307f0f-f3a3-47ae-9cec-634295e6180e",
              "title": "Maximum Likelihood 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1yJx-QtlvNI",
                "china_cdn_id": "1yJx-QtlvNI.mp4"
              }
            },
            {
              "id": 309220,
              "key": "aa8e3d52-fae4-4230-a5ea-77347c8f4dd6",
              "title": "Maximum Likelihood 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6nUUeQ9AeUA",
                "china_cdn_id": "6nUUeQ9AeUA.mp4"
              }
            },
            {
              "id": 395741,
              "key": "ac023e08-efee-42ac-97b4-421fa31673d8",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ac023e08-efee-42ac-97b4-421fa31673d8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Based on the above video, which of the following is true for a very high value for P(all)?",
                "answers": [
                  {
                    "id": "a1505309101714",
                    "text": "The model classifies most blue points correctly.",
                    "is_correct": false
                  },
                  {
                    "id": "a1505309121003",
                    "text": "The model classifies most red points correctly.",
                    "is_correct": false
                  },
                  {
                    "id": "a1505309133871",
                    "text": "The model classifies most points correctly with P(all) indicating how accurate the model is.",
                    "is_correct": true
                  },
                  {
                    "id": "a1505309137416",
                    "text": "The model classifies all points correctly.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 308876,
              "key": "3f5c6b18-8533-40d6-9291-3d201b7d9e20",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The next video will show a more formal treatment of Maximum Likelihood.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 308878,
          "key": "2098790c-e2ce-4c0e-9e39-326bf189b417",
          "title": "Maximizing Probabilities",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2098790c-e2ce-4c0e-9e39-326bf189b417",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308883,
              "key": "f287241f-532a-4f93-8104-03286013ceca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Maximizing Probabilities\nIn this lesson and quiz, we will learn how to maximize a probability, using some math. Nothing more than high school math, so get ready for a trip down memory lane!",
              "instructor_notes": ""
            },
            {
              "id": 308881,
              "key": "58d1e15e-565c-42c5-9d14-cb19b777940d",
              "title": "Quiz - Cross 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-xxrisIvD0E",
                "china_cdn_id": "-xxrisIvD0E.mp4"
              }
            },
            {
              "id": 308879,
              "key": "00071f2e-37c5-405b-b00b-ed0d426a3411",
              "title": "Quiz Cross Entropy",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "njq6bYrPqSU",
                "china_cdn_id": "njq6bYrPqSU.mp4"
              }
            },
            {
              "id": 308882,
              "key": "b7b9c85e-ceb5-4ad0-a80b-e09b0bba3dcd",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b7b9c85e-ceb5-4ad0-a80b-e09b0bba3dcd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What function turns products into sums?",
                "answers": [
                  {
                    "id": "a1494355420285",
                    "text": "sin",
                    "is_correct": false
                  },
                  {
                    "id": "a1494355432088",
                    "text": "cos",
                    "is_correct": false
                  },
                  {
                    "id": "a1494355432746",
                    "text": "log",
                    "is_correct": true
                  },
                  {
                    "id": "a1494355433404",
                    "text": "exp",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 379481,
          "key": "c03e2d61-77be-4a7e-a380-b7ade8b062e5",
          "title": "Cross-Entropy 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c03e2d61-77be-4a7e-a380-b7ade8b062e5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 379482,
              "key": "8e27a034-8546-45f9-bc79-a8a620ee36aa",
              "title": "Cross Entropy 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "_Correction:_ At 2:18, the top right point should be labelled `-log(0.7)` instead of `-log(0.2)`.",
              "video": {
                "youtube_id": "iREoPUrpXvE",
                "china_cdn_id": "iREoPUrpXvE.mp4"
              }
            }
          ]
        },
        {
          "id": 301707,
          "key": "760235e0-a3ec-4e56-8cdb-56d762886690",
          "title": "Cross-Entropy 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "760235e0-a3ec-4e56-8cdb-56d762886690",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308877,
              "key": "86500a13-48d3-4650-a473-6939a11768cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Cross-Entropy\nSo we're getting somewhere, there's definitely a connection between probabilities and error functions, and it's called **Cross-Entropy**. This concept is tremendously popular in many fields, including Machine Learning. Let's dive more into the formula, and actually code it!",
              "instructor_notes": ""
            },
            {
              "id": 308709,
              "key": "324a017e-f426-4df8-8641-4495613e7049",
              "title": "Formula For Cross 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qvr_ego_d6w",
                "china_cdn_id": "qvr_ego_d6w.mp4"
              }
            },
            {
              "id": 461569,
              "key": "b51adbe6-783d-4fde-a727-00fc97421cea",
              "title": "CrossEntropy V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1BnhC6e0TFw",
                "china_cdn_id": "1BnhC6e0TFw.mp4"
              }
            },
            {
              "id": 308263,
              "key": "56ae2acc-0eca-44d9-a202-fb080cd4e247",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Coding Cross-entropy\n\nNow, time to shine! Let's code the formula for cross-entropy in Python. As in the video, `Y` in the quiz is for the category, and `P` is the probability.",
              "instructor_notes": ""
            },
            {
              "id": 308093,
              "key": "1b079052-6418-43a6-a7f0-bfe465d10ad3",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "1b079052-6418-43a6-a7f0-bfe465d10ad3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6614311758856192",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\n\n# Write a function that takes as input two lists Y, P,\n# and returns the float corresponding to their cross-entropy.\ndef cross_entropy(Y, P):\n    pass",
                    "name": "cross_entropy.py"
                  },
                  {
                    "text": "import numpy as np\n\ndef cross_entropy(Y, P):\n    Y = np.float_(Y)\n    P = np.float_(P)\n    return -np.sum(Y * np.log(P) + (1 - Y) * np.log(1 - P))",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 308884,
          "key": "a9641a7f-f6a1-4868-9bbc-77a55f8b94be",
          "title": "Multi-Class Cross Entropy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a9641a7f-f6a1-4868-9bbc-77a55f8b94be",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461546,
              "key": "c4930a3b-7aa2-45ab-8ac3-b20c6748149e",
              "title": "DL 27 Multi-Class Cross Entropy 2 Fix",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "keDswcqkees",
                "china_cdn_id": "keDswcqkees.mp4"
              }
            },
            {
              "id": 395743,
              "key": "df43ca79-d06f-4760-91d4-e251ef05a722",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "df43ca79-d06f-4760-91d4-e251ef05a722",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Based on what we have covered till now, which of the following is true?",
                "answers": [
                  {
                    "id": "a1505309232560",
                    "text": "A higher cross-entropy implies a lower probability for an event.",
                    "is_correct": true
                  },
                  {
                    "id": "a1505309241144",
                    "text": "A higher cross-entropy implies a higher probability for an event.",
                    "is_correct": false
                  },
                  {
                    "id": "a1505309247922",
                    "text": "There is no relation between the cross-entropy and the probability of an event.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 301709,
          "key": "a5711d6e-abc1-41bc-a242-e8c8a9834f72",
          "title": "Logistic Regression",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5711d6e-abc1-41bc-a242-e8c8a9834f72",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308887,
              "key": "00303cd4-2eb9-42a6-a40c-b60970a47448",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Logistic Regression\nNow, we're finally ready for one of the most popular and useful algorithms in Machine Learning, and the building block of all that constitutes Deep Learning. The **Logistic Regression** Algorithm. And it basically goes like this:\n- Take your data\n- Pick a random model\n- Calculate the error\n- Minimize the error, and obtain a better model\n- Enjoy!\n\n### Calculating the Error Function\nLet's dive into the details. The next video will show you how to calculate an error function.",
              "instructor_notes": ""
            },
            {
              "id": 349772,
              "key": "a5dd6cab-a85d-4d6c-bca0-34bd4360816e",
              "title": "Error Function",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "V5kkHldUlVU",
                "china_cdn_id": "V5kkHldUlVU.mp4"
              }
            },
            {
              "id": 308886,
              "key": "7d52e5c8-2d73-4e71-aee3-d8e4aec1c762",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Minimizing the error function\nAnd this video will show us how to minimize the error function.",
              "instructor_notes": ""
            },
            {
              "id": 378559,
              "key": "96276d11-c404-4c73-87bb-1b9c572a4ff6",
              "title": "DL 29 Logistic Regression-Minimizing The Error Function",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KayqiYijlzc",
                "china_cdn_id": "KayqiYijlzc.mp4"
              }
            }
          ]
        },
        {
          "id": 301711,
          "key": "0d92455b-2fa0-4eb8-ae5d-07c7834b8a56",
          "title": "Gradient Descent",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0d92455b-2fa0-4eb8-ae5d-07c7834b8a56",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 309664,
              "key": "f501e9d1-c412-4fc7-988b-0b0751984d0a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Gradient Descent\nIn this lesson, we'll learn the principles and the math behind the gradient descent algorithm.",
              "instructor_notes": ""
            },
            {
              "id": 543232,
              "key": "87dbea84-79d8-438d-8786-3cddbe544c1c",
              "title": "Gradient Descent",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rhVIF-nigrY",
                "china_cdn_id": "rhVIF-nigrY.mp4"
              }
            },
            {
              "id": 308197,
              "key": "3884d6a7-f79f-4c4e-ad0d-7d52684da239",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Gradient Calculation\nIn the last few videos, we learned that in order to minimize the error function, we need to take some derivatives. So let's get our hands dirty and actually compute the derivative of the error function. The first thing to notice is that the sigmoid function has a really nice derivative. Namely,\n\n<span class=\"mathquill\">\\sigma'(x) = \\sigma(x) (1-\\sigma(x))</span>\n\nThe reason for this is the following, we can calculate it using the quotient formula:",
              "instructor_notes": ""
            },
            {
              "id": 308584,
              "key": "ba81c06c-40be-4ae9-b557-cc0f74cd4116",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5910e6c6_codecogseqn-49/codecogseqn-49.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ba81c06c-40be-4ae9-b557-cc0f74cd4116",
              "caption": "",
              "alt": null,
              "width": 251,
              "height": 125,
              "instructor_notes": null
            },
            {
              "id": 308199,
              "key": "de428288-8530-4e9d-975b-a10eaa218588",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And now, let's recall that if we have\n<span class=\"mathquill\">m</span>\npoints labelled\n<span class=\"mathquill\">x^{(1)}, x^{(2)}, \\ldots, x^{(m)},</span>\nthe error formula is:\n\n<span class=\"mathquill\">E = -\\frac{1}{m} \\sum_{i=1}^m \\left( y_i \\ln(\\hat{y_i}) + (1-y_i) \\ln (1-\\hat{y_i}) \\right)</span>\n\nwhere the prediction is given by\n<span class=\"mathquill\">\\hat{y_i} = \\sigma(Wx^{(i)} + b).</span>\n\nOur goal is to calculate the gradient of\n<span class=\"mathquill\">E,</span>\nat a point\n<span class=\"mathquill\">x = (x_1, \\ldots, x_n),</span>\ngiven by the partial derivatives\n\n<span class=\"mathquill\">\\nabla E =\\left(\\frac{\\partial}{\\partial w_1}E, \\cdots, \\frac{\\partial}{\\partial w_n}E, \\frac{\\partial}{\\partial b}E \\right)</span>\n\nTo simplify our calculations, we'll actually think of the error that each point produces, and calculate the derivative of this error. The total error, then, is the average of the errors at all the points. The error produced by each point is, simply,\n\n<span class=\"mathquill\">E = - y \\ln(\\hat{y}) - (1-y) \\ln (1-\\hat{y})</span>\n\nIn order to calculate the derivative of this error with respect to the weights, we'll first calculate\n<span class=\"mathquill\">\\frac{\\partial}{\\partial w_j} \\hat{y}.</span>\nRecall that\n<span class=\"mathquill\">\\hat{y} = \\sigma(Wx+b),</span>\nso:\n\n",
              "instructor_notes": ""
            },
            {
              "id": 308227,
              "key": "cfe9e171-2608-4c05-a1bb-f9a7d1a5eee1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/590eac24_codecogseqn-43/codecogseqn-43.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cfe9e171-2608-4c05-a1bb-f9a7d1a5eee1",
              "caption": "",
              "alt": null,
              "width": 752,
              "height": 205,
              "instructor_notes": null
            },
            {
              "id": 308228,
              "key": "09ca6059-4037-43bd-ad9e-175ba27cbd01",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The last equality is because the only term in the sum which is not a constant with respect to\n<span class=\"mathquill\">w_j</span>\nis precisely\n<span class=\"mathquill\">w_j x_j,</span>\nwhich clearly has derivative\n<span class=\"mathquill\">x_j.</span>\n\nNow, we can go ahead and calculate the derivative of the error \n<span class=\"mathquill\">E</span>\nat a point\n<span class=\"mathquill\">x,</span>\nwith respect to the weight\n<span class=\"mathquill\">w_j.</span>",
              "instructor_notes": ""
            },
            {
              "id": 527930,
              "key": "c27c63c1-68ab-4b63-8fe0-73dc870b9b39",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a716f3e_codecogseqn-60-2/codecogseqn-60-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c27c63c1-68ab-4b63-8fe0-73dc870b9b39",
              "caption": "",
              "alt": "",
              "width": 515,
              "height": 278,
              "instructor_notes": null
            },
            {
              "id": 308231,
              "key": "fb0e78b7-3a7a-46aa-9da2-690faba5093e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A similar calculation will show us that",
              "instructor_notes": ""
            },
            {
              "id": 394800,
              "key": "ee078049-c5f4-4aee-b9c8-af8d15ced58c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b75d1d_codecogseqn-58/codecogseqn-58.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ee078049-c5f4-4aee-b9c8-af8d15ced58c",
              "caption": "",
              "alt": "",
              "width": 172,
              "height": 53,
              "instructor_notes": null
            },
            {
              "id": 308265,
              "key": "2cc65e2e-397c-4898-b0fc-61d5fef20f91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This actually tells us something very important. For a point with coordinates\n<span class=\"mathquill\">(x_1, \\ldots, x_n),</span>\nlabel\n<span class=\"mathquill\">y,</span>\nand prediction\n<span class=\"mathquill\">\\hat{y},</span>\nthe gradient of the error function at that point is\n<span class=\"mathquill\">\\left(-(y - \\hat{y})x_1, \\cdots, -(y - \\hat{y})x_n, -(y - \\hat{y}) \\right).</span>\nIn summary, the gradient is\n\n<span class=\"mathquill\">\\nabla E = -(y - \\hat{y}) (x_1, \\ldots, x_n, 1).</span>\n\nIf you think about it, this is fascinating. The gradient is actually a scalar times the coordinates of the point! And what is the scalar? Nothing less than a multiple of the difference between the label and the prediction. What significance does this have?",
              "instructor_notes": ""
            },
            {
              "id": 395753,
              "key": "e7f22b97-c788-49ca-92bb-962f0d94c9c2",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e7f22b97-c788-49ca-92bb-962f0d94c9c2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does the scalar we obtained above signify? (Check all that are true.)",
                "answers": [
                  {
                    "id": "a1505309922086",
                    "text": "Closer the label to the prediction, larger the gradient.",
                    "is_correct": false
                  },
                  {
                    "id": "a1505309930925",
                    "text": "Closer the label to the prediction, smaller the gradient.",
                    "is_correct": true
                  },
                  {
                    "id": "a1505309943570",
                    "text": "Farther the label from the prediction, larger the gradient.",
                    "is_correct": true
                  },
                  {
                    "id": "a1505309949324",
                    "text": "Farther the label to the prediction, smaller the gradient.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 395751,
              "key": "ad4aa69c-884b-44cf-b03c-bc65c01a3530",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So, a small gradient means we'll change our coordinates by a little bit, and a large gradient means we'll change our coordinates by a lot.\n\nIf this sounds anything like the perceptron algorithm, this is no coincidence! We'll see it in a bit.",
              "instructor_notes": ""
            },
            {
              "id": 394776,
              "key": "0a8909db-50b3-4b2f-b23c-791495d951bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Gradient Descent Step\n\nTherefore, since the gradient descent step simply consists in subtracting a multiple of the gradient of the error function at every point, then this updates the weights in the following way:\n\n<span class=\"mathquill\">w_i' \\leftarrow w_i -\\alpha [-(y - \\hat{y}) x_i],</span>\n\nwhich is equivalent to\n\n<span class=\"mathquill\">w_i' \\leftarrow w_i + \\alpha (y - \\hat{y}) x_i.</span>\n\nSimilarly, it updates the bias in the following way:\n\n<span class=\"mathquill\">b' \\leftarrow b + \\alpha (y - \\hat{y}),</span>\n\n_Note:_ Since we've taken the average of the errors, the term we are adding should be\n<span class=\"mathquill\">\\frac{1}{m} \\cdot \\alpha</span>\ninstead of \n<span class=\"mathquill\">\\alpha,</span>\nbut as\n<span class=\"mathquill\">\\alpha</span>\nis a constant, then in order to simplify calculations, we'll just take\n<span class=\"mathquill\">\\frac{1}{m} \\cdot \\alpha</span>\nto be our learning rate, and abuse the notation by just calling it\n<span class=\"mathquill\">\\alpha.</span>\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 409903,
          "key": "86dd3eb6-7912-4739-b4df-1ee1f33da0f0",
          "title": "Logistic Regression Algorithm",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "86dd3eb6-7912-4739-b4df-1ee1f33da0f0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461554,
              "key": "0f4aa051-60a2-4e1f-870e-a10242f68678",
              "title": "Gradient Descent Algorithm",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "snxmBgi_GeU",
                "china_cdn_id": "snxmBgi_GeU.mp4"
              }
            }
          ]
        },
        {
          "id": 713745,
          "key": "9d9f38ff-e113-41f0-86ab-5e854d6adfc6",
          "title": "Pre-Notebook: Gradient Descent",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9d9f38ff-e113-41f0-86ab-5e854d6adfc6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 713746,
              "key": "12dd8628-a00b-4fe7-8e1e-4f20d4ae8f5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Implementing Gradient Descent\n\nIn the following notebook, you'll be able to implement the gradient descent algorithm on the following sample dataset with two classes.",
              "instructor_notes": ""
            },
            {
              "id": 713748,
              "key": "a491f04c-0edc-4143-9142-d09906b7faf4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5b972abc_screen-shot-2018-09-10-at-7.38.39-pm/screen-shot-2018-09-10-at-7.38.39-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a491f04c-0edc-4143-9142-d09906b7faf4",
              "caption": "Red and blue data points with some overlap.",
              "alt": "",
              "width": 420,
              "height": 972,
              "instructor_notes": null
            },
            {
              "id": 713751,
              "key": "23ebd19d-185f-4747-8519-58251a38bf34",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Workspace\nTo open this notebook, you have two options:\n>- Go to the next page in the classroom (recommended)\n- Clone the repo from [Github](https://github.com/udacity/deep-learning-v2-pytorch) and open the notebook **GradientDescent.ipynb** in the **intro-neural-networks > gradient-descent** folder. You can either download the repository via the command line with `git clone https://github.com/udacity/deep-learning-v2-pytorch.git`, or download it as an archive file from [this link](https://github.com/udacity/deep-learning-v2-pytorch/archive/master.zip).\n\n# Instructions\n\nIn this notebook, you'll be implementing the functions that build the gradient descent algorithm, namely:\n- `sigmoid`: The sigmoid activation function.\n- `output_formula`: The formula for the prediction.\n- `error_formula`: The formula for the error at a point.\n- `update_weights`: The function that updates the parameters with one gradient descent step.\n\nWhen you implement them, run the `train` function and this will graph the several of the lines that are drawn in successive gradient descent steps. It will also graph the error function, and you can see it decreasing as the number of epochs grows.\n\nThis is a self-assessed lab. If you need any help or want to check your answers, feel free to check out the solutions notebook in the same folder, or by clicking [here](https://github.com/udacity/deep-learning-v2-pytorch/blob/master/intro-neural-networks/gradient-descent/GradientDescentSolutions.ipynb).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 439461,
          "key": "64f025bd-1d7b-42fb-9f13-8559242c1ec9",
          "title": "Notebook: Gradient Descent",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "64f025bd-1d7b-42fb-9f13-8559242c1ec9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 439462,
              "key": "ace6c1ad-4558-4d1d-aab5-048775652b86",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfc135197",
              "pool_id": "jupyter",
              "view_id": "86e0bc33-a754-40d4-a62f-837db139ef4a",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/GradientDescent.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 309222,
          "key": "1f6bbd8c-bb45-4e5e-b790-1ab0dad751e1",
          "title": "Perceptron vs Gradient Descent",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f6bbd8c-bb45-4e5e-b790-1ab0dad751e1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461547,
              "key": "5bb30686-05e8-4b69-b903-1a6381713642",
              "title": "Gradient Descent Vs Perceptron Algorithm",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uL5LuRPivTA",
                "china_cdn_id": "uL5LuRPivTA.mp4"
              }
            },
            {
              "id": 737099,
              "key": "24790aa2-e5d7-4be5-ab34-34607c92caca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the video at 0:12 mark, the instructor said `y hat minus y`. It should be `y minus y hat` instead as stated on the slide.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 308889,
          "key": "5e9bd75b-a419-45d4-8a2b-88ba847cc814",
          "title": "Continuous Perceptrons",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5e9bd75b-a419-45d4-8a2b-88ba847cc814",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 310562,
              "key": "883a7df2-5946-4a99-a953-a3c9324ab9bb",
              "title": "Continuous Perceptrons",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "07-JJ-aGEfM",
                "china_cdn_id": "07-JJ-aGEfM.mp4"
              }
            }
          ]
        },
        {
          "id": 308891,
          "key": "60ed34da-990f-462e-b440-33f1a96a39e3",
          "title": "Non-linear Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "60ed34da-990f-462e-b440-33f1a96a39e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308892,
              "key": "b859abf5-851e-48df-ac17-5d6d25f745eb",
              "title": "Non-Linear Data",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F7ZiE8PQiSc",
                "china_cdn_id": "F7ZiE8PQiSc.mp4"
              }
            }
          ]
        },
        {
          "id": 301714,
          "key": "24d1d59e-b66c-40b1-a555-5975fb128f3c",
          "title": "Non-Linear Models",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "24d1d59e-b66c-40b1-a555-5975fb128f3c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 310921,
              "key": "12049098-1cde-46e4-822f-d2446ddf884a",
              "title": "Non-Linear Models",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HWuBKCZsCo8",
                "china_cdn_id": "HWuBKCZsCo8.mp4"
              }
            }
          ]
        },
        {
          "id": 301716,
          "key": "7a42d26d-7d7e-4c76-a014-5bf8b4413179",
          "title": "Neural Network Architecture",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7a42d26d-7d7e-4c76-a014-5bf8b4413179",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308895,
              "key": "f0c39c45-c729-4256-8996-709769d7ab61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Neural Network Architecture\nOk, so we're ready to put these building blocks together, and build great Neural Networks! (Or Multi-Layer Perceptrons, however you prefer to call them.)\n\nThis first two videos will show us how to combine two perceptrons into a third, more complicated one.",
              "instructor_notes": ""
            },
            {
              "id": 436182,
              "key": "072f0f84-7559-4507-9188-ccb1dee67307",
              "title": "Combinando modelos",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Boy3zHVrWB4",
                "china_cdn_id": "Boy3zHVrWB4.mp4"
              }
            },
            {
              "id": 385226,
              "key": "155a9439-1b94-431c-8640-ebd0bc1d17bb",
              "title": "29 Neural Network Architecture 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FWN3Sw5fFoM",
                "china_cdn_id": "FWN3Sw5fFoM.mp4"
              }
            },
            {
              "id": 395756,
              "key": "3dbaf35f-b389-4748-a2bb-f83282935f6b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3dbaf35f-b389-4748-a2bb-f83282935f6b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Based on the above video, let's define the combination of two new perceptrons as w<sub>1</sub>\\*0.4 + w<sub>2</sub>*0.6 + b. Which of the following values for the weights and the bias would result in the final probability of the point to be 0.88?",
                "answers": [
                  {
                    "id": "a1505310098557",
                    "text": "w<sub>1</sub>: 2, w<sub>2</sub>: 6, b: -2",
                    "is_correct": false
                  },
                  {
                    "id": "a1505310111002",
                    "text": "w<sub>1</sub>: 3, w<sub>2</sub>: 5, b: -2.2",
                    "is_correct": true
                  },
                  {
                    "id": "a1505310112348",
                    "text": "w<sub>1</sub>: 5, w<sub>2</sub>: 4, b: -3",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 308896,
              "key": "e27b5551-e2ca-4787-b1f8-b81b15a1c3a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Multiple layers\nNow, not all neural networks look like the one above. They can be way more complicated! In particular, we can do the following things:\n- Add more nodes to the input, hidden, and output layers.\n- Add more layers.\n\nWe'll see the effects of these changes in the next video.",
              "instructor_notes": ""
            },
            {
              "id": 321885,
              "key": "6f95b131-58ef-47ac-a6cc-c5ff1dd2cfac",
              "title": "Layers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pg99FkXYK0M",
                "china_cdn_id": "pg99FkXYK0M.mp4"
              }
            },
            {
              "id": 308897,
              "key": "2f0c10e3-6a0a-4388-aed1-d5176c78c245",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Multi-Class Classification\nAnd here we elaborate a bit more into what can be done if our neural network needs to model data with more than one output.",
              "instructor_notes": ""
            },
            {
              "id": 310924,
              "key": "c8815c6c-549a-4916-b989-1a46f02251ec",
              "title": "Multiclass Classification",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uNTtvxwfox0",
                "china_cdn_id": "uNTtvxwfox0.mp4"
              }
            },
            {
              "id": 395757,
              "key": "13a2225e-cfa1-4a6d-8ae9-0d07ba978202",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "13a2225e-cfa1-4a6d-8ae9-0d07ba978202",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many nodes in the output layer would you require if you were trying to classify all the letters in the English alphabet?",
                "matchers": [
                  {
                    "expression": "^[2][6]\\s*$"
                  },
                  {
                    "expression": "^[5][2]\\s*$"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 301718,
          "key": "02c36864-ee71-481c-bb01-a34c35bfc581",
          "title": "Feedforward",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "02c36864-ee71-481c-bb01-a34c35bfc581",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308898,
              "key": "daef89a0-10d2-4857-8389-ef86f9416448",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Feedforward\nFeedforward is the process neural networks use to turn the input into an output. Let's study it more carefully, before we dive into how to train the networks.",
              "instructor_notes": ""
            },
            {
              "id": 461533,
              "key": "86f55e1d-d5d2-4cda-8a06-b623c25eade4",
              "title": "DL 41 Feedforward FIX V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hVCuvMGOfyY",
                "china_cdn_id": "hVCuvMGOfyY.mp4"
              }
            },
            {
              "id": 322621,
              "key": "5100ebef-9f25-4487-923f-d50462cd878e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Error Function\nJust as before, neural networks will produce an error function, which at the end, is what we'll be minimizing. The following video shows the error function for a neural network.",
              "instructor_notes": ""
            },
            {
              "id": 461532,
              "key": "3714806e-0318-4950-ae62-fd7fa6e3836c",
              "title": "DL 42 Neural Network Error Function (1)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "SC1wEW7TtKs",
                "china_cdn_id": "SC1wEW7TtKs.mp4"
              }
            }
          ]
        },
        {
          "id": 301721,
          "key": "4cc13714-37d7-4705-a714-314ede5290b5",
          "title": "Backpropagation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4cc13714-37d7-4705-a714-314ede5290b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308901,
              "key": "e6e62773-7797-4973-a353-0f77f19d6e17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Backpropagation\nNow, we're ready to get our hands into training a neural network. For this, we'll use the method known as **backpropagation**. In a nutshell, backpropagation will consist of:\n- Doing a feedforward operation.\n- Comparing the output of the model with the desired output.\n- Calculating the error.\n- Running the feedforward operation backwards (backpropagation) to spread the error to each of the weights.\n- Use this to update the weights, and get a better model.\n- Continue this until we have a model that is good.\n\nSounds more complicated than what it actually is. Let's take a look in the next few videos. The first video will show us a conceptual interpretation of what backpropagation is.",
              "instructor_notes": ""
            },
            {
              "id": 322088,
              "key": "d81b8b53-d5b9-4955-a9f9-ec9a288f4715",
              "title": "Backpropagation V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1SmY3TZTyUk",
                "china_cdn_id": "1SmY3TZTyUk.mp4"
              }
            },
            {
              "id": 308902,
              "key": "d1463a38-3338-454a-8b85-fde047452d93",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Backpropagation Math\nAnd the next few videos will go deeper into the math. Feel free to tune out, since this part gets handled by Keras pretty well. If you'd like to go start training networks right away, go to the next section. But if you enjoy calculating lots of derivatives, let's dive in!\n\nIn the video below at 1:24, the edges should be directed to the sigmoid function and not the bias at that last layer; the edges of the last layer point to the bias currently which is incorrect.",
              "instructor_notes": ""
            },
            {
              "id": 321900,
              "key": "d04523fa-8341-429d-8b0c-0638e9de10d5",
              "title": "Calculating The Gradient 1 ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tVuZDbUrzzI",
                "china_cdn_id": "tVuZDbUrzzI.mp4"
              }
            },
            {
              "id": 308903,
              "key": "940013b8-b419-46a0-beca-fa4456f4dc9e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Chain Rule\nWe'll need to recall the chain rule to help us calculate derivatives.",
              "instructor_notes": ""
            },
            {
              "id": 310925,
              "key": "b2f1f683-c75c-46cb-9796-8f13d2c941c5",
              "title": "Chain Rule",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YAhIBOnbt54",
                "china_cdn_id": "YAhIBOnbt54.mp4"
              }
            },
            {
              "id": 462390,
              "key": "f8e117c4-4c38-467b-b271-45f437836fa3",
              "title": "DL 46 Calculating The Gradient 2 V2 (2)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7lidiTGIlN4",
                "china_cdn_id": "7lidiTGIlN4.mp4"
              }
            },
            {
              "id": 394623,
              "key": "602f0d40-c473-442c-9b10-3d88987e0371",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Calculation of the derivative of the sigmoid function\nRecall that the sigmoid function has a beautiful derivative, which we can see in the following calculation. This will make our backpropagation step much cleaner.",
              "instructor_notes": ""
            },
            {
              "id": 394622,
              "key": "eb986cd9-a133-470f-b066-7e92b24c75e4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b6ffad_sigmoid-derivative/sigmoid-derivative.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/eb986cd9-a133-470f-b066-7e92b24c75e4",
              "caption": "",
              "alt": "",
              "width": 251,
              "height": 125,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 713752,
          "key": "599ee989-43f6-4064-b2ae-a1ddeb801c9d",
          "title": "Pre-Notebook: Analyzing Student Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "599ee989-43f6-4064-b2ae-a1ddeb801c9d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 713753,
              "key": "37c84ee7-b2e6-404e-96b4-e4b83621e668",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Notebook: Analyzing Student Data\n\nNow, we're ready to put neural networks in practice. We'll analyze a dataset of student admissions at UCLA.\n\nTo open this notebook, you have two options:\n>- Go to the next page in the classroom (recommended).\n- Clone the repo from [Github](https://github.com/udacity/deep-learning-v2-pytorch) and open the notebook **StudentAdmissions.ipynb** in the **intro-neural-networks > student_admissions** folder.  You can either download the repository with `git clone https://github.com/udacity/deep-learning-v2-pytorch.git`, or download it as an archive file from [this link](https://github.com/udacity/deep-learning-v2-pytorch/archive/master.zip).\n\n# Instructions\n\nIn this notebook, you'll be implementing some of the steps in the training of the neural network, namely:\n- One-hot encoding the data\n- Scaling the data\n- Writing the backpropagation step\n\nThis is a self-assessed lab. If you need any help or want to check your answers, feel free to check out the solutions notebook in the same folder, or by clicking [here](https://github.com/udacity/deep-learning-v2-pytorch/blob/master/intro-neural-networks/student-admissions/StudentAdmissionsSolutions.ipynb).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 439479,
          "key": "dab588a2-51cc-4c4e-ba24-410a009943c7",
          "title": "Notebook: Analyzing Student Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dab588a2-51cc-4c4e-ba24-410a009943c7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 439480,
              "key": "5ca569f6-0c07-4d7b-8bb3-32c942cbb7bf",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view16d555f6",
              "pool_id": "jupyter",
              "view_id": "5d732415-eea2-49da-9b75-4c1732cbe01e",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/StudentAdmissions.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 464197,
          "key": "f52683ed-e0f9-4eb0-ac7f-a471129fb513",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f52683ed-e0f9-4eb0-ac7f-a471129fb513",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 464199,
              "key": "9cad9319-5598-466e-8330-ad3479be4a00",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/59406a18_meme/meme.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9cad9319-5598-466e-8330-ad3479be4a00",
              "caption": "",
              "alt": "",
              "width": 200,
              "height": 200,
              "instructor_notes": null
            },
            {
              "id": 464198,
              "key": "78b4856c-aaaf-4368-948a-53ef09e69f56",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Great job!\n\nYou now know how neural networks work and how they get trained. In the next lesson, Mat will guide you through implementing this training process in NumPy. See you soon!",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}