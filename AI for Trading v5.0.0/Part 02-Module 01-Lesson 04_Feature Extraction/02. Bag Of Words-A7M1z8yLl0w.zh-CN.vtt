WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.168
我们学习的第一个特征表示法称为词袋

00:00:05.168 --> 00:00:11.294
词袋模型将每个文档看作无序的词集合或词袋

00:00:11.294 --> 00:00:15.585
在这里 文档就是你要分析的文本单位

00:00:15.585 --> 00:00:18.000
例如 如果你想比较学生提交的论文

00:00:18.000 --> 00:00:20.820
检查是否有抄袭行为

00:00:20.820 --> 00:00:23.250
那么每篇论文就是一个文档

00:00:23.250 --> 00:00:26.190
如果你想分析推文传达的感情

00:00:26.190 --> 00:00:29.120
那么每个推文就是一个文档

00:00:29.120 --> 00:00:31.896
要从一段原始文本获取词袋

00:00:31.896 --> 00:00:36.210
只需要进行合适的文本处理步骤 清洗

00:00:36.210 --> 00:00:38.234
标准化 分词

00:00:38.234 --> 00:00:40.380
词干提取 词形还原等

00:00:40.380 --> 00:00:45.830
然后将生成的词条作为无序的集合

00:00:45.829 --> 00:00:49.905
因此 数据集中的每个文档都会生成一个词集

00:00:49.905 --> 00:00:53.700
但是将其保持为单独的集合是无用处的

00:00:53.700 --> 00:00:54.929
它们的大小不同

00:00:54.929 --> 00:00:56.354
包含的词可能不同

00:00:56.354 --> 00:00:58.309
而且难以比较

00:00:58.310 --> 00:01:02.250
另外 如果一个词在一个文档中出现多次呢？

00:01:02.250 --> 00:01:05.290
你能想出更好的表示法吗？

00:01:05.290 --> 00:01:10.395
一个更有效的方法是将每个文档转换成数字向量

00:01:10.394 --> 00:01:14.579
数字向量表示的是每个词在一个文档中出现的次数

00:01:14.579 --> 00:01:17.000
一组文档就是一个语料库

00:01:17.000 --> 00:01:20.689
这为要计算的向量提供了上下文

00:01:20.689 --> 00:01:26.569
首先 将语料库中出现的所有唯一词提取出来 形成词汇表

00:01:26.569 --> 00:01:28.852
按某种顺序排列这些词

00:01:28.852 --> 00:01:32.924
使其形成向量元素位置或表格的列

00:01:32.924 --> 00:01:35.689
假设每个文档是一行

00:01:35.689 --> 00:01:38.625
然后统计每个词在每个文档中出现的次数

00:01:38.625 --> 00:01:43.019
将值输入各个列

00:01:43.019 --> 00:01:47.384
在这一阶段 为了方便起见 可以将其作为一个文档-词条矩阵

00:01:47.385 --> 00:01:50.835
行是文档 列是词或词条

00:01:50.834 --> 00:01:53.699
它呈现了文档与词条之间的关系

00:01:53.700 --> 00:01:57.329
可以将每个元素理解成词频

00:01:57.329 --> 00:02:01.129
也就是这个词条在该文档中出现的频率

00:02:01.129 --> 00:02:05.099
现在思考一下如何使用这个表示法

00:02:05.099 --> 00:02:07.979
一种方法是比较两个文档中

00:02:07.980 --> 00:02:13.110
有多少共有词 或者词频的相似度有多高

00:02:13.110 --> 00:02:16.520
一个偏数学专业的表示方法是

00:02:16.520 --> 00:02:20.165
计算两个行向量之间的点积

00:02:20.164 --> 00:02:24.128
也就是对应元素积的总和

00:02:24.128 --> 00:02:25.474
点积越大

00:02:25.474 --> 00:02:27.844
两个向量的相似度越高

00:02:27.844 --> 00:02:30.310
点积有一个缺陷

00:02:30.310 --> 00:02:32.860
只能捕捉重叠部分

00:02:32.860 --> 00:02:36.500
它不受其它不同值的影响

00:02:36.500 --> 00:02:39.199
因此 差别很大的两个行

00:02:39.199 --> 00:02:42.744
和差别相同的两个行 其点积可能相等

00:02:42.745 --> 00:02:45.064
更好的方法是计算余弦相似度

00:02:45.064 --> 00:02:47.930
也就是将两个向量的点积除以

00:02:47.930 --> 00:02:51.840
其量值的积或欧几里得范数

00:02:51.840 --> 00:02:56.180
如果将这些向量作为 n 维空间中的箭头

00:02:56.180 --> 00:03:00.814
则等于两者之间的角 θ 的余弦值

00:03:00.814 --> 00:03:03.889
相等向量的余弦值等于 1

00:03:03.889 --> 00:03:06.579
正交向量的余弦值等于 0

00:03:06.580 --> 00:03:10.310
对于完全相反的向量 其余弦值为 -1

00:03:10.310 --> 00:03:14.569
因此 余弦值始终在 1 与 -1 之间

00:03:14.569 --> 00:03:17.000
1 表示相似度最高 -1 表示相似度最低

