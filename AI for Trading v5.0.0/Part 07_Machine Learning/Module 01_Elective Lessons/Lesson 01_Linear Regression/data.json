{
  "data": {
    "lesson": {
      "id": 495677,
      "key": "c3bb570a-0e06-4cb3-b888-9c3e6e986ea2",
      "title": "Linear Regression",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Linear regression is a very effective algorithm to predict numerical data.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/c3bb570a-0e06-4cb3-b888-9c3e6e986ea2/495677/1545053614345/Linear+Regression+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/c3bb570a-0e06-4cb3-b888-9c3e6e986ea2/495677/1545053607863/Linear+Regression+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 439309,
          "key": "10a4b9d5-623c-474e-be81-fb1f33d08ece",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "10a4b9d5-623c-474e-be81-fb1f33d08ece",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461326,
              "key": "d8ea4e66-7264-4e13-815f-698fbbd41836",
              "title": "Welcome To Linear Regression",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zxZkTkM34BY",
                "china_cdn_id": "zxZkTkM34BY.mp4"
              }
            }
          ]
        },
        {
          "id": 439310,
          "key": "12f6331c-0bb3-48e2-b0a2-31f852e117ca",
          "title": "Quiz: Housing Prices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "12f6331c-0bb3-48e2-b0a2-31f852e117ca",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461327,
              "key": "917c5e8c-e470-4543-9a57-c50c9d20012e",
              "title": "DLND REG 01 Quiz Housing Prices V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8CSBiVKu35Q",
                "china_cdn_id": "8CSBiVKu35Q.mp4"
              }
            },
            {
              "id": 462406,
              "key": "83656a98-033b-4e33-9bf8-8d2fcbba31bc",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0a88f8_house/house.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/83656a98-033b-4e33-9bf8-8d2fcbba31bc",
              "caption": "",
              "alt": "",
              "width": 1895,
              "height": 1043,
              "instructor_notes": null
            },
            {
              "id": 439818,
              "key": "d85f7e02-fe9e-4e77-9c21-5fa0932584c4",
              "title": "Housing Price Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d85f7e02-fe9e-4e77-9c21-5fa0932584c4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the best estimate for the price of the house?",
                "answers": [
                  {
                    "id": "a1508882980407",
                    "text": "$80,000",
                    "is_correct": false
                  },
                  {
                    "id": "a1508882997712",
                    "text": "$120,000",
                    "is_correct": true
                  },
                  {
                    "id": "a1508882998363",
                    "text": "$190,000",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 439311,
          "key": "eb2ba02e-e89f-4973-825d-5eff662071fa",
          "title": "Solution: Housing Prices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eb2ba02e-e89f-4973-825d-5eff662071fa",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461328,
              "key": "dcb248c5-9667-4a9c-85ab-3c919e8c6b50",
              "title": "Solution  Housing Prices",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uhdTulw9-Nc",
                "china_cdn_id": "uhdTulw9-Nc.mp4"
              }
            }
          ]
        },
        {
          "id": 439314,
          "key": "e5d39837-1c4d-49c2-9884-97edcec7fb4a",
          "title": "Fitting a Line Through Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e5d39837-1c4d-49c2-9884-97edcec7fb4a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461329,
              "key": "7db47c10-8635-4663-8fff-f1638ea3d0b0",
              "title": "Fitting A Line",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gkdoknEEcaI",
                "china_cdn_id": "gkdoknEEcaI.mp4"
              }
            }
          ]
        },
        {
          "id": 439312,
          "key": "c10e0bdd-6099-4923-982f-0d40c0d86302",
          "title": "Moving a Line",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c10e0bdd-6099-4923-982f-0d40c0d86302",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461330,
              "key": "c6775f68-1192-4eaa-8edf-5d164393732d",
              "title": "Moving A Line",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8EIHFyL2Log",
                "china_cdn_id": "8EIHFyL2Log.mp4"
              }
            }
          ]
        },
        {
          "id": 439313,
          "key": "73940af7-d358-4b4a-b854-02f2888ded01",
          "title": "Absolute Trick",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "73940af7-d358-4b4a-b854-02f2888ded01",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461555,
              "key": "726a5e2f-4918-4a66-9868-cc7d0e3b4df2",
              "title": "Absolute Trick",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DJWjBAqSkZw",
                "china_cdn_id": "DJWjBAqSkZw.mp4"
              }
            }
          ]
        },
        {
          "id": 439315,
          "key": "229a6078-0e20-4b83-8bb6-a4fe6114df04",
          "title": "Square Trick",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "229a6078-0e20-4b83-8bb6-a4fe6114df04",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461332,
              "key": "dea2ebba-00a5-480b-b482-6751d3f1ef35",
              "title": "Square Trick",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AGZEq-yQgRM",
                "china_cdn_id": "AGZEq-yQgRM.mp4"
              }
            }
          ]
        },
        {
          "id": 543042,
          "key": "ec3e518c-19b3-4b3c-a711-89dfb2347265",
          "title": "Gradient Descent",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ec3e518c-19b3-4b3c-a711-89dfb2347265",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 543043,
              "key": "376e0bae-d0c3-4fc9-a888-807b627d0890",
              "title": "Gradient Descent",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4s4x9h6AN5Y",
                "china_cdn_id": "4s4x9h6AN5Y.mp4"
              }
            }
          ]
        },
        {
          "id": 439318,
          "key": "6bc778b2-3c29-4b29-a59d-4522c9ae0f71",
          "title": "Mean Absolute Error",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6bc778b2-3c29-4b29-a59d-4522c9ae0f71",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461334,
              "key": "25e3eb1b-03ec-4488-bdfb-5240cedbec79",
              "title": "Mean Absolute Error",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vLKiY0Ehors",
                "china_cdn_id": "vLKiY0Ehors.mp4"
              }
            }
          ]
        },
        {
          "id": 439319,
          "key": "e38f1034-2e10-4c52-85bf-e2889da458eb",
          "title": "Mean Squared Error",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e38f1034-2e10-4c52-85bf-e2889da458eb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461335,
              "key": "a2fee92f-a9ba-4536-b7a0-fc083cc901df",
              "title": "Mean Squared Error",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MRyxmZDngI4",
                "china_cdn_id": "MRyxmZDngI4.mp4"
              }
            }
          ]
        },
        {
          "id": 439320,
          "key": "5b5b3ff6-5d7c-409f-ac2c-6b6652288ce5",
          "title": "Minimizing Error Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5b5b3ff6-5d7c-409f-ac2c-6b6652288ce5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461336,
              "key": "f30616cd-1d32-4e8e-8a1e-3e3654ec6686",
              "title": "Minimizing Error Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "_NOTE:_ From 2:22 onward, the slide title should say \"Mean Absolute Error\".",
              "video": {
                "youtube_id": "RbT2TXN_6tY",
                "china_cdn_id": "RbT2TXN_6tY.mp4"
              }
            },
            {
              "id": 477818,
              "key": "dd44f7a8-ddd2-4fe9-8073-4cddcebf2393",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Development of the derivative of the error function\n\nNotice that we've defined the squared error to be\n\n<span class=\"mathquill\">\nError = \\frac{1}{2} (y - \\hat{y})^2.\n</span>\n\nAlso, we've defined the prediction to be\n\n<span class=\"mathquill\">\n\\hat{y} = w_1 x + w_2.\n</span>\n\nSo to calculate the derivative of the Error with respect to\n<span class=\"mathquill\">\nw_1\n</span>\n, we simply use the chain rule:\n\n<span class=\"mathquill\">\n\\frac{\\partial}{\\partial w_1} Error = \\frac{\\partial Error}{\\partial \\hat{y}} \\frac{\\partial \\hat{y}}{\\partial w_i}. \n</span>\n\nThe first factor of the right hand side is the derivative of the Error with respect to the prediction\n<span class=\"mathquill\">\n\\hat{y}\n</span>, which is\n<span class=\"mathquill\">\n-(y-\\hat{y}).\n</span>\n\nThe second factor is the derivative of the prediction with respect to\n<span class=\"mathquill\">\nw_1\n</span>, which is simply\n<span class=\"mathquill\">\nx\n</span>.\n\nTherefore, the derivative is",
              "instructor_notes": ""
            },
            {
              "id": 477821,
              "key": "f1aea651-ab46-4ba6-9162-a9292216586d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/December/5a3068ed_gif-1/gif-1.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f1aea651-ab46-4ba6-9162-a9292216586d",
              "caption": "",
              "alt": "",
              "width": 220,
              "height": 51,
              "instructor_notes": null
            },
            {
              "id": 477823,
              "key": "6e09eb77-4bdc-4ca7-92d5-11d61e330c10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Exercise\nCalculate the derivative of the Error with respect to\n<span class=\"mathquill\">\nw_2</span>\nand verify that it is precisely\n<span class=\"mathquill\">\n-(y-\\hat{y}).\n</span>\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 464528,
          "key": "fba8dd74-5e19-4d6d-b8af-f5a6580e7870",
          "title": "Mean vs Total Error",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fba8dd74-5e19-4d6d-b8af-f5a6580e7870",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 464529,
              "key": "76ae754b-006d-41a7-8e25-9865199b2ddd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Mean vs Total Squared (or Absolute) Error\n\nA potential confusion is the following: How do we know if we should use the mean or the total squared (or absolute) error?\n\nThe total squared error is the sum of errors at each point, given by the following equation:\n\n<span class=\"mathquill\">\nM = \\sum_{i=1}^m \\frac{1}{2} (y - \\hat{y})^2,\n</span>\n\nwhereas the mean squared error is the average of these errors, given by the equation, where\n<span class=\"mathquill\">\nm\n</span>\nis the number of points:\n\n<span class=\"mathquill\">\nT = \\sum_{i=1}^m \\frac{1}{2m}(y - \\hat{y})^2.\n</span>\n\nThe good news is, it doesn't really matter. As we can see, the total squared error is just a multiple of the mean squared error, since\n\n<span class=\"mathquill\">\nM = mT.\n</span>\n\nTherefore, since derivatives are linear functions, the gradient of\n<span class=\"mathquill\">\nT\n</span>\nis also\n<span class=\"mathquill\">\nm\n</span>\ntimes the gradient of\n<span class=\"mathquill\">\nM\n</span>.\n\nHowever, the gradient descent step consists of subtracting the gradient of the error times the learning rate\n<span class=\"mathquill\">\n\\alpha\n</span>. Therefore, choosing between the mean squared error and the total squared error really just amounts to picking a different learning rate.\n\nIn real life, we'll have algorithms that will help us determine a good learning rate to work with. Therefore, if we use the mean error or the total error, the algorithm will just end up picking a different learning rate.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 464510,
          "key": "1b0ed370-9d37-4b2f-a8e9-d4082ec73b77",
          "title": "Mini-batch Gradient Descent",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1b0ed370-9d37-4b2f-a8e9-d4082ec73b77",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 464522,
              "key": "4ab96907-76b0-471d-9692-90897f254ca3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Batch vs Stochastic Gradient Descent\n\nAt this point, it seems that we've seen two ways of doing linear regression.\n- By applying the squared (or absolute) trick at every point in our data _one by one_, and repeating this process many times.\n- By applying the squared (or absolute) trick at every point in our data _all at the same time_, and repeating this process many times.\n\nMore specifically, the squared (or absolute) trick, when applied to a point, gives us some values to add to the weights of the model. We can add these values, update our weights, and then apply the squared (or absolute) trick on the next point. Or we can calculate these values for all the points, add them, and then update the weights with the sum of these values.\n\nThe latter is called _batch gradient descent_. The former is called _stochastic gradient descent_. ",
              "instructor_notes": ""
            },
            {
              "id": 464525,
              "key": "51ab3801-33ae-4561-8c84-676158d23ca7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a151a19_batch-stochastic/batch-stochastic.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/51ab3801-33ae-4561-8c84-676158d23ca7",
              "caption": "",
              "alt": "",
              "width": 2560,
              "height": 971,
              "instructor_notes": null
            },
            {
              "id": 464526,
              "key": "e5766220-8cf8-4f64-914b-059fd2c5d76a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The question is, which one is used in practice?\n\nActually, in most cases, neither. Think about this: If your data is huge, both are a bit slow, computationally. The best way to do linear regression, is to split your data into many small batches. Each batch, with roughly the same number of points. Then, use each batch to update your weights. This is still called _mini-batch gradient descent_.",
              "instructor_notes": ""
            },
            {
              "id": 464534,
              "key": "773b018c-539d-4d08-a272-e7a32f1cded4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a152b4b_minibatch/minibatch.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/773b018c-539d-4d08-a272-e7a32f1cded4",
              "caption": "",
              "alt": "",
              "width": 1962,
              "height": 1244,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 439321,
          "key": "229237eb-f9fc-4d62-b708-561f162dd857",
          "title": "Absolute Error vs Squared Error",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "229237eb-f9fc-4d62-b708-561f162dd857",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461337,
              "key": "b0a83885-cd4a-4157-8b60-059fc2728a31",
              "title": "Absolute Vs Squared Error",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "csvdjaqt1GM",
                "china_cdn_id": "csvdjaqt1GM.mp4"
              }
            },
            {
              "id": 462404,
              "key": "8f4cde33-5e60-4cb1-9b3c-5b1259ec415f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0a8887_quiz/quiz.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8f4cde33-5e60-4cb1-9b3c-5b1259ec415f",
              "caption": "",
              "alt": "",
              "width": 961,
              "height": 750,
              "instructor_notes": null
            },
            {
              "id": 439867,
              "key": "7b640d2f-a950-4d52-9e06-3bb28a9fd6dc",
              "title": "Absolute Error Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7b640d2f-a950-4d52-9e06-3bb28a9fd6dc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the three lines gives you a smaller Mean Absolute Error?",
                "answers": [
                  {
                    "id": "a1508889763921",
                    "text": "A",
                    "is_correct": false
                  },
                  {
                    "id": "a1508889784462",
                    "text": "B",
                    "is_correct": false
                  },
                  {
                    "id": "a1508889788646",
                    "text": "C",
                    "is_correct": false
                  },
                  {
                    "id": "a1508889790902",
                    "text": "They all give the same error",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 461338,
              "key": "abb5abe3-9d65-447e-a644-07efde275162",
              "title": "DLND REG 12 Absolute Vs Squared Error 2 V1 (1)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7El1OH17Oi4",
                "china_cdn_id": "7El1OH17Oi4.mp4"
              }
            },
            {
              "id": 462405,
              "key": "47afdcd8-800e-4886-9239-10fdcfbacad2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0a8887_quiz/quiz.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/47afdcd8-800e-4886-9239-10fdcfbacad2",
              "caption": "",
              "alt": "",
              "width": 961,
              "height": 750,
              "instructor_notes": null
            },
            {
              "id": 439871,
              "key": "1cdc459d-2797-458b-8015-114981c61d50",
              "title": "Squared Error quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1cdc459d-2797-458b-8015-114981c61d50",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the three lines gives you a smaller Mean Squared Error?",
                "answers": [
                  {
                    "id": "a1508889876971",
                    "text": "A",
                    "is_correct": false
                  },
                  {
                    "id": "a1508889902337",
                    "text": "B",
                    "is_correct": true
                  },
                  {
                    "id": "a1508889903817",
                    "text": "C",
                    "is_correct": false
                  },
                  {
                    "id": "a1508889905281",
                    "text": "They all give the same error",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 461339,
              "key": "0ba86c77-add6-4d99-9172-e1bb33f6a83c",
              "title": "DLND REG 13 Absolute Vs Squared Error 3 V1 (1)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bIVGf_dDkrY",
                "china_cdn_id": "bIVGf_dDkrY.mp4"
              }
            }
          ]
        },
        {
          "id": 464504,
          "key": "7ae99885-7fe4-4b29-8690-f381d2439b79",
          "title": "Linear Regression in scikit-learn",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7ae99885-7fe4-4b29-8690-f381d2439b79",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 464505,
              "key": "58e34971-2eff-4ddb-9ab6-5ef83feeaabe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Linear Regression\n\nIn this section, you'll use linear regression to predict life expectancy from [body mass index (BMI)](https://en.wikipedia.org/wiki/Body_mass_index).  Before you do that, let's go over the tools required to build this model.\n\nFor your linear regression model, you'll be using scikit-learn's [`LinearRegression`](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html) class.  This class provides the function [`fit()`](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.fit) to fit the model to your data.\n\n```python\n>>> from sklearn.linear_model import LinearRegression\n>>> model = LinearRegression()\n>>> model.fit(x_values, y_values)\n```\n\nIn the example above, the `model` variable is a linear regression model that has been fitted to the data `x_values` and `y_values`.  Fitting the model means finding the best line that fits the training data.  Let's make two predictions using the model's [`predict()`](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.predict) function.\n\n```python\n>>> print(model.predict([ [127], [248] ]))\n[[ 438.94308857, 127.14839521]]\n```\n\nThe model returned an array of predictions, one prediction for each input array.  The first input, `[127]`, got a prediction of `438.94308857`.  The second input, `[248]`, got a prediction of `127.14839521`.  The reason for predicting on an array like `[127]` and not just `127`, is because you can have a model that makes a prediction using multiple features.  We'll go over using multiple variables in linear regression  later in this lesson.  For now, let's stick to a single value.\n\n## Linear Regression Quiz\n\nIn this quiz, you'll be working with data on the average life expectancy at birth and the average BMI for males across the world. The data comes from [Gapminder](https://www.gapminder.org/).\n\nThe data file can be found under the \"bmi_and_life_expectancy.csv\" tab in the quiz below. It includes three columns, containing the following data:\n* **Country** – The country the person was born in.  \n* **Life expectancy** – The average life expectancy at birth for a person in that country.\n* **BMI** – The mean BMI of males in that country.\n\n### You'll need to complete each of the following steps:\n\n**1. Load the data**\n* The data is in the file called \"bmi_and_life_expectancy.csv\".\n* Use pandas [`read_csv`](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html) to load the data into a dataframe (don't forget to import pandas!)\n* Assign the dataframe to the variable `bmi_life_data`.\n\n**2. Build a linear regression model**\n* Create a regression model using scikit-learn's [`LinearRegression`](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html) and assign it to `bmi_life_model`.\n* Fit the model to the data.\n\n**3. Predict using the model**\n* Predict using a BMI of 21.07931 and assign it to the variable `laos_life_exp`.",
              "instructor_notes": ""
            },
            {
              "id": 464506,
              "key": "2a422903-d9be-42ca-9f83-fe0aa9d2fa3d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "2a422903-d9be-42ca-9f83-fe0aa9d2fa3d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6178299265548288",
                "initial_code_files": [
                  {
                    "text": "# TODO: Add import statements\n\n\n# Assign the dataframe to this variable.\n# TODO: Load the data\nbmi_life_data = None \n\n# Make and fit the linear regression model\n#TODO: Fit the model and Assign it to bmi_life_model\nbmi_life_model = None\n\n# Make a prediction using the model\n# TODO: Predict life expectancy for a BMI value of 21.07931\nlaos_life_exp = None\n",
                    "name": "gapminder1.py"
                  },
                  {
                    "text": "Country,Life expectancy,BMI\nAfghanistan,52.8,20.62058\nAlbania,76.8,26.44657\nAlgeria,75.5,24.59620\nAndorra,84.6,27.63048\nAngola,56.7,22.25083\nArmenia,72.3,25.355420000000002\nAustralia,81.6,27.56373\nAustria,80.4,26.467409999999997\nAzerbaijan,69.2,25.65117\nBahamas,72.2,27.24594\nBangladesh,68.3,20.39742\nBarbados,75.3,26.38439\nBelarus,70.0,26.16443\nBelgium,79.6,26.75915\nBelize,70.7,27.02255\nBenin,59.7,22.41835\nBhutan,70.7,22.82180\nBolivia,71.2,24.43335\nBosnia and Herzegovina,77.5,26.61163\nBotswana,53.2,22.12984\nBrazil,73.2,25.78623\nBulgaria,73.2,26.54286\nBurkina Faso,58.0,21.27157\nBurundi,59.1,21.50291\nCambodia,66.1,20.80496\nCameroon,56.6,23.68173\nCanada,80.8,27.45210\nCape Verde,70.4,23.51522\nChad,54.3,21.48569\nChile,78.5,27.01542\nChina,73.4,22.92176\nColombia,76.2,24.94041\nComoros,67.1,22.06131\n\"Congo, Dem. Rep.\",57.5,19.86692\n\"Congo, Rep.\",58.8,21.87134\nCosta Rica,79.8,26.47897\nCote d'Ivoire,55.4,22.56469\nCroatia,76.2,26.59629\nCuba,77.6,25.06867\nCyprus,80.0,27.41899\nDenmark,78.9,26.13287\nDjibouti,61.8,23.38403\nEcuador,74.7,25.58841\nEgypt,70.2,26.73243\nEl Salvador,73.7,26.36751\nEritrea,60.1,20.88509\nEstonia,74.2,26.26446\nEthiopia,60.0,20.24700\nFiji,64.9,26.53078\nFinland,79.6,26.73339\nFrance,81.1,25.85329\nFrench Polynesia,75.11,30.86752\nGabon,61.7,24.07620\nGambia,65.7,21.65029\nGeorgia,71.8,25.54942\nGermany,80.0,27.16509\nGhana,62.0,22.84247\nGreece,80.2,26.33786\nGreenland,70.3,26.01359\nGrenada,70.8,25.17988\nGuatemala,71.2,25.29947\nGuinea,57.1,22.52449\nGuinea-Bissau,53.6,21.64338\nGuyana,65.0,23.68465\nHaiti,61.0,23.66302\nHonduras,71.8,25.10872\nHungary,73.9,27.11568\nIceland,82.4,27.20687\nIndia,64.7,20.95956\nIndonesia,69.4,21.85576\nIran,73.1,25.31003\nIraq,66.6,26.71017\nIreland,80.1,27.65325\nIsrael,80.6,27.13151\nJamaica,75.1,24.00421\nJapan,82.5,23.50004\nJordan,76.9,27.47362\nKazakhstan,67.1,26.29078\nKenya,60.8,21.59258\nKuwait,77.3,29.17211\nLatvia,72.4,26.45693\nLesotho,44.5,21.90157\nLiberia,59.9,21.89537\nLibya,75.6,26.54164\nLithuania,72.1,26.86102\nLuxembourg,81.0,27.43404\n\"Macedonia, FYR\",74.5,26.34473\nMadagascar,62.2,21.40347\nMalawi,52.4,22.03468\nMalaysia,74.5,24.73069\nMaldives,78.5,23.21991\nMali,58.5,21.78881\nMalta,80.7,27.68361\nMarshall Islands,65.3,29.37337\nMauritania,67.9,22.62295\nMauritius,72.9,25.15669\nMexico,75.4,27.42468\nMoldova,70.4,24.23690\nMongolia,64.8,24.88385\nMontenegro,76.0,26.55412\nMorocco,73.3,25.63182\nMozambique,54.0,21.93536\nMyanmar,59.4,21.44932\nNamibia,59.1,22.65008\nNepal,68.4,20.76344\nNetherlands,80.3,26.01541\nNicaragua,77.0,25.77291\nNiger,58.0,21.21958\nNigeria,59.2,23.03322\nNorway,80.8,26.93424\nOman,76.2,26.24109\nPakistan,64.1,22.29914\nPanama,77.3,26.26959\nPapua New Guinea,58.6,25.01506\nParaguay,74.0,25.54223\nPeru,78.2,24.77041\nPhilippines,69.8,22.87263\nPoland,75.4,26.67380\nPortugal,79.4,26.68445\nQatar,77.9,28.13138\nRomania,73.2,25.41069\nRussia,67.9,26.01131\nRwanda,64.1,22.55453\nSamoa,72.3,30.42475\nSao Tome and Principe,66.0,23.51233\nSenegal,63.5,21.92743\nSerbia,74.3,26.51495\nSierra Leone,53.6,22.53139\nSingapore,80.6,23.83996\nSlovak Republic,74.9,26.92717\nSlovenia,78.7,27.43983\nSomalia,52.6,21.96917\nSouth Africa,53.4,26.85538\nSpain,81.1,27.49975\nSri Lanka,74.0,21.96671\nSudan,65.5,22.40484\nSuriname,70.2,25.49887\nSwaziland,45.1,23.16969\nSweden,81.1,26.37629\nSwitzerland,82.0,26.20195\nSyria,76.1,26.91969\nTajikistan,69.6,23.77966\nTanzania,60.4,22.47792\nThailand,73.9,23.00803\nTimor-Leste,69.9,20.59082\nTogo,57.5,21.87875\nTonga,70.3,30.99563\nTrinidad and Tobago,71.7,26.39669\nTunisia,76.8,25.15699\nTurkey,77.8,26.70371\nTurkmenistan,67.2,25.24796\nUganda,56.0,22.35833\nUkraine,67.8,25.42379\nUnited Arab Emirates,75.6,28.05359\nUnited Kingdom,79.7,27.39249\nUnited States,78.3,28.45698\nUruguay,76.0,26.39123\nUzbekistan,69.6,25.32054\nVanuatu,63.4,26.78926\nWest Bank and Gaza,74.1,26.57750\nVietnam,74.1,20.91630\nZambia,51.1,20.68321\nZimbabwe,47.3,22.02660\n",
                    "name": "bmi_and_life_expectancy.csv"
                  },
                  {
                    "text": "# TODO: Add import statements\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Assign the dataframe to this variable.\n# TODO: Load the data\nbmi_life_data = pd.read_csv(\"bmi_and_life_expectancy.csv\")\n\n# Make and fit the linear regression model\n#TODO: Fit the model and Assign it to bmi_life_model\nbmi_life_model = LinearRegression()\nbmi_life_model.fit(bmi_life_data[['BMI']], bmi_life_data[['Life expectancy']])\n\n# Mak a prediction using the model\n# TODO: Predict life expectancy for a BMI value of 21.07931\nlaos_life_exp = bmi_life_model.predict(21.07931)\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 439322,
          "key": "d0ddf90a-4d89-4d63-a3df-cadcd54abc4c",
          "title": "Higher Dimensions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d0ddf90a-4d89-4d63-a3df-cadcd54abc4c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461556,
              "key": "fa2249e8-1fe9-415b-bc18-07c8008f73f9",
              "title": "Higher Dimensions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-UvpQV1qmiE",
                "china_cdn_id": "-UvpQV1qmiE.mp4"
              }
            }
          ]
        },
        {
          "id": 464511,
          "key": "81f1671b-b376-49c0-84d4-8ea18eab8852",
          "title": "Multiple Linear Regression",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "81f1671b-b376-49c0-84d4-8ea18eab8852",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 464512,
              "key": "bee39358-62c6-4f51-ab91-bfaf543cb504",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Multiple Linear Regression\n\nIn the last section, you saw how we can predict life expectancy using BMI. Here, BMI was the **predictor**, also known as an independent variable. A predictor is a variable you're looking at in order to make predictions about other variables, while the values you are trying to predict are known as dependent variables. In this case, life expectancy was the dependent variable.\n\nNow, let’s say we get new data on each person’s heart rate as well. Can we create a prediction of life expectancy using both BMI and heart rate?\n\nAbsolutely! As we saw in the previous video, we can do that using multiple linear regression.\n\nIf the outcome you want to predict depends on more than one variable, you can make a more complicated model that takes this into account. As long as they're relevant to the situation, using more independent/predictor variables can help you get a better prediction.\n\nWhen there's just one predictor, the linear regression model is a line, but as you add more predictor variables, you're adding more dimensions to the picture.",
              "instructor_notes": ""
            },
            {
              "id": 464515,
              "key": "b9511c71-adb3-4bb1-8b62-57bb12106095",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When you have one predictor variable, the equation of the line is\n\n<span class='mathquill'> y = m x + b </span>\n\nand the plot might look something like this:",
              "instructor_notes": ""
            },
            {
              "id": 464514,
              "key": "5c6ccdef-fccc-4fb7-8a79-add33acebf06",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5886b877_just-a-simple-lin-reg/just-a-simple-lin-reg.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5c6ccdef-fccc-4fb7-8a79-add33acebf06",
              "caption": "Linear regression with one predictor variable",
              "alt": "",
              "width": 528,
              "height": 435,
              "instructor_notes": null
            },
            {
              "id": 464513,
              "key": "ac6fe596-3347-4dc3-ae34-425f87d87cd9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Adding a predictor variable to go to two predictor variables means that the predicting equation is:\n\n<span class=\"mathquill\"> y = m_1 x_1 + m_2 x_2 + b</span>\n\nTo represent this graphically, we'll need a three-dimensional plot, with the linear regression model represented as a plane:",
              "instructor_notes": ""
            },
            {
              "id": 464516,
              "key": "8c2c7436-30ec-49ff-9319-42b156c7633f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5886b8bc_just-a-2d-reg/just-a-2d-reg.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8c2c7436-30ec-49ff-9319-42b156c7633f",
              "caption": "Linear regression with two predictor variables",
              "alt": "",
              "width": 484,
              "height": 407,
              "instructor_notes": null
            },
            {
              "id": 464517,
              "key": "e68cfc38-74d4-4a56-9f5e-a468d46f90a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can use more than two predictor variables - in fact, you should use as many as is useful! If you use <span class=\"mathquill\">n</span> predictor variables, then the model can be represented by the equation  \n\n<span class=\"mathquill\">y = m_{1} x_{1} + m_{2} x_{2} + m_{3} x_{3}+ ... +m_{n} x_{n} + b </span>\n\nAs you make a model with more predictor variables, it becomes harder to visualise, but luckily, everything else about linear regression stays the same. We can still fit models and make predictions in exactly the same way - time to try it!\n\n# Programming Quiz: Multiple Linear Regression\n\nIn this quiz, you'll be using the [Boston house-prices dataset](https://archive.ics.uci.edu/ml/machine-learning-databases/housing/).  The dataset consists of 13 features of 506 houses and the median home value in $1000's.  You'll fit a model on the 13 features to predict the value of the houses.\n\nYou'll need to complete each of the following steps:\n\n**1. Build a linear regression model**\n* Create a regression model using scikit-learn's [`LinearRegression`](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html) and assign it to `model`.\n* Fit the model to the data.\n\n**2. Predict using the model**\n* Predict the value of `sample_house`.\n",
              "instructor_notes": ""
            },
            {
              "id": 464518,
              "key": "40cf5f84-dbc7-48b7-84d3-0261ce70d2d2",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "40cf5f84-dbc7-48b7-84d3-0261ce70d2d2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4966760126742528",
                "initial_code_files": [
                  {
                    "text": "from sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import load_boston\n\n# Load the data from the boston house-prices dataset \nboston_data = load_boston()\nx = boston_data['data']\ny = boston_data['target']\n\n# Make and fit the linear regression model\n# TODO: Fit the model and assign it to the model variable\nmodel = None\n\n# Make a prediction using the model\nsample_house = [[2.29690000e-01, 0.00000000e+00, 1.05900000e+01, 0.00000000e+00, 4.89000000e-01,\n                6.32600000e+00, 5.25000000e+01, 4.35490000e+00, 4.00000000e+00, 2.77000000e+02,\n                1.86000000e+01, 3.94870000e+02, 1.09700000e+01]]\n# TODO: Predict housing price for the sample_house\nprediction = None",
                    "name": "quiz.py"
                  },
                  {
                    "text": "from sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import load_boston\n\n# Load the data from the boston house-prices dataset \nboston_data = load_boston()\nx = boston_data['data']\ny = boston_data['target']\n\n# Make and fit the linear regression model\n# TODO: Fit the model and Assign it to the model variable\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# Make a prediction using the model\nsample_house = [[2.29690000e-01, 0.00000000e+00, 1.05900000e+01, 0.00000000e+00, 4.89000000e-01,\n                6.32600000e+00, 5.25000000e+01, 4.35490000e+00, 4.00000000e+00, 2.77000000e+02,\n                1.86000000e+01, 3.94870000e+02, 1.09700000e+01]]\n# TODO: Predict housing price for the sample_house\nprediction = model.predict(sample_house)",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 439323,
          "key": "ba95d332-6bae-45be-a642-649772712340",
          "title": "Closed Form Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ba95d332-6bae-45be-a642-649772712340",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461341,
              "key": "ba56cad5-f013-47c3-b01d-df81f647a976",
              "title": "Closed Form Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Full derivation is available on the next page.",
              "video": {
                "youtube_id": "G3fRVgLa5gI",
                "china_cdn_id": "G3fRVgLa5gI.mp4"
              }
            }
          ]
        },
        {
          "id": 440742,
          "key": "fcb495b1-c94e-4a37-b9f8-247584fa735f",
          "title": "(Optional) Closed form Solution Math",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fcb495b1-c94e-4a37-b9f8-247584fa735f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 440744,
              "key": "1d5b32f6-7545-4433-a481-7797f7ec2b8d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# (Optional) Closed form solution math\n\nIn this optional section, we'll develop the math of the closed form solution, which we introduced in the last video. First, we'll do it for the 2-dimensional case, and then for the general case.\n\n### 2-Dimensional solution\n\nOur data will be the values\n<span class=\"mathquill\">x_1, x_2, \\ldots, x_m,</span>\nand our labels will be the values\n<span class=\"mathquill\">y_1,y_2, \\ldots, y_n.</span>\nLet's call our weights\n<span class=\"mathquill\">w_1,</span>\nand\n<span class=\"mathquill\">w_2.</span>\nTherefore, our predictions are\n<span class=\"mathquill\">\\hat{y_i} = w_1x_i + w_2.</span>\nThe mean squared error is",
              "instructor_notes": ""
            },
            {
              "id": 440751,
              "key": "e5fc4004-4a84-4fc7-bb5f-95a7e575aaaf",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f7df05_f4/f4.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e5fc4004-4a84-4fc7-bb5f-95a7e575aaaf",
              "caption": "",
              "alt": "",
              "width": 219,
              "height": 51,
              "instructor_notes": null
            },
            {
              "id": 440748,
              "key": "fd8d7bd0-884b-44cd-ac0b-5cb42bd6e6c3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We need to minimize this error function. Therefore, the factor of\n<span class=\"mathquill\">\\frac{1}{m}</span>\ncan be ignored. Now, replacing the value of\n<span class=\"mathquill\">\\hat{y},</span>\nwe get",
              "instructor_notes": ""
            },
            {
              "id": 440754,
              "key": "c634e2ce-0919-4e9c-adfc-cc688811bd16",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f7e881_f6/f6.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c634e2ce-0919-4e9c-adfc-cc688811bd16",
              "caption": "",
              "alt": "",
              "width": 308,
              "height": 66,
              "instructor_notes": null
            },
            {
              "id": 440752,
              "key": "24fccbec-85a9-45c5-b4c6-58ad7753d151",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, in order to minimize this error function, we need to take the derivatives with respect to\n<span class=\"mathquill\">w_1</span>\nand\n<span class=\"mathquill\">w_2</span>\nand set them equal to\n<span class=\"mathquill\">0.</span>\n\nUsing the chain rule, we get",
              "instructor_notes": ""
            },
            {
              "id": 440761,
              "key": "fbd68184-08a5-4ca8-97a6-a7a4bf7bec81",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f7eddf_f1/f1.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fbd68184-08a5-4ca8-97a6-a7a4bf7bec81",
              "caption": "",
              "alt": "",
              "width": 353,
              "height": 68,
              "instructor_notes": null
            },
            {
              "id": 440756,
              "key": "24247c17-e735-4f5b-8d49-ec6971d8cdcd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "and",
              "instructor_notes": ""
            },
            {
              "id": 440762,
              "key": "8215622c-8b89-45b7-a930-d3aa6c549636",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f7ee2a_f2/f2.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8215622c-8b89-45b7-a930-d3aa6c549636",
              "caption": "",
              "alt": "",
              "width": 329,
              "height": 68,
              "instructor_notes": null
            },
            {
              "id": 440759,
              "key": "7ab9f7cd-48ec-4ee5-9880-a46b088c3e99",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Setting the two equations to zero gives us the following system of two equations and two variables (where the variables are\n<span class=\"mathquill\">w_1</span>\nand\n<span class=\"mathquill\">w_2</span>).",
              "instructor_notes": ""
            },
            {
              "id": 464724,
              "key": "46fbb662-3662-49da-a843-f63d54185734",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a175b5f_codecogseqn-61/codecogseqn-61.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/46fbb662-3662-49da-a843-f63d54185734",
              "caption": "",
              "alt": "",
              "width": 333,
              "height": 66,
              "instructor_notes": null
            },
            {
              "id": 440764,
              "key": "d44b335f-e82a-4e00-a49c-37236037f732",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We can use any method to solve 2 equations and 2 variables. For example, if we multiply the first equation by\n<span class=\"mathquill\">\\sum_{i=1}^m x_i</span>,\nthe second one by\n<span class=\"mathquill\">m</span>,\nsubtract them to obtain a value for\n<span class=\"mathquill\">w_1</span>,\nand then replace this value in the first equation, we get the following:\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 440766,
              "key": "fc52614c-4fee-456a-b1f4-17712de60fdc",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f7f2ae_f4/f4.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fc52614c-4fee-456a-b1f4-17712de60fdc",
              "caption": "",
              "alt": "",
              "width": 390,
              "height": 110,
              "instructor_notes": null
            },
            {
              "id": 440767,
              "key": "0a61ca9b-2b6c-4119-9b31-2ff69aa7c354",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "That's our desired solution.\n\n### n-Dimensional solution\n\nNow, let's do this when our data has n dimensions, instead of 2. In order to do this, we'll introduce the following notation. Our matrix\n<span class=\"mathquill\">X</span>\ncontaining the data is the following, where each row is one of our datapoints, and\n<span class=\"mathquill\">x_0^{(i)} =1</span>\nto represent the bias.",
              "instructor_notes": ""
            },
            {
              "id": 440768,
              "key": "0c24e176-6291-48c0-8cb5-2673ecd22f68",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f7f63c_m/m.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0c24e176-6291-48c0-8cb5-2673ecd22f68",
              "caption": "",
              "alt": "",
              "width": 307,
              "height": 229,
              "instructor_notes": null
            },
            {
              "id": 440769,
              "key": "707be177-11b6-4b84-bd8a-bbefdf7b99d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Our labels are the vector",
              "instructor_notes": ""
            },
            {
              "id": 440770,
              "key": "6a296540-0609-48e7-9b23-ca2a4f9ec86b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f7f716_y/y.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6a296540-0609-48e7-9b23-ca2a4f9ec86b",
              "caption": "",
              "alt": "",
              "width": 122,
              "height": 129,
              "instructor_notes": null
            },
            {
              "id": 440771,
              "key": "1dffa1f5-1ec6-4f06-94e1-c9e03f68fcf2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "and our weight matrix is the following:",
              "instructor_notes": ""
            },
            {
              "id": 464842,
              "key": "f27b4566-b1cb-48ee-a81d-ddf167ba7a3a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a1b2275_codecogseqn-62/codecogseqn-62.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f27b4566-b1cb-48ee-a81d-ddf167ba7a3a",
              "caption": "",
              "alt": "",
              "width": 120,
              "height": 109,
              "instructor_notes": null
            },
            {
              "id": 440773,
              "key": "a52ffbe4-c1b7-4650-a1ae-3b9952686710",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And so the equation for the mean square error can be written as the following matrix product:\n\n<span class=\"mathquill\">E(W) = \\frac{1}{m} ((XW)^T - y^T) (XW - y)</span>.\n\nAgain, since we need to minimize it, we can forget about the factor of\n<span class=\"mathquill\">\\frac{1}{m}</span>, so expanding, we get\n\n<span class=\"mathquill\">E(W) = W^TX^TXW - (XW)^Ty - y^T(XW) + y^Ty</span>.\n\nNotice that in the sum above, the second and the third terms are the same, since it's the inner product of two vectors, which means it's the sum of the products of its coordinates. Therefore,\n\n<span class=\"mathquill\">E(W) = W^TX^TXW - 2(XW)^Ty + y^Ty</span>.\n\nNow, to minimize this, we need to take the derivative with respect to all values in the matrix\n<span class=\"mathquill\">W</span>. Using the chain rule, as we used above, we get the following:",
              "instructor_notes": ""
            },
            {
              "id": 440778,
              "key": "4fa1fbdf-ee42-43e3-b282-af759202abca",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f7fc57_e/e.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4fa1fbdf-ee42-43e3-b282-af759202abca",
              "caption": "",
              "alt": "",
              "width": 231,
              "height": 47,
              "instructor_notes": null
            },
            {
              "id": 440777,
              "key": "697258d4-d5fd-46a0-a694-becbcd1208f4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And in order to set this equal to zero, we need\n\n<span class=\"mathquill\">X^TXW - X^Ty = 0</span>,\nor equivalently,\n\n<span class=\"mathquill\">W = (X^TX)^{-1} X^T y</span>.\n\nThat's it, that's our closed form solution for\n<span class=\"mathquill\">W</span>!\n\nAs we stated in the video, this method will be expensive in real life, since finding the inverse of the matrix\n<span class=\"mathquill\">X^TX</span> is hard, if \n<span class=\"mathquill\">n</span>\nis large. That's why we go through the pain of doing gradient descent many times. But if our data is sparse, namely, if most of the entries of the matrix\n<span class=\"mathquill\">X</span>\nare zero, there are some very interesting algorithms which will find this inverse quickly, and that'll make this method useful in real life.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 262033,
          "key": "53cd8dbe-ad8e-4e33-ae39-06555472cdb7",
          "title": "Linear Regression Warnings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "53cd8dbe-ad8e-4e33-ae39-06555472cdb7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 262034,
              "key": "39235421-57ce-4500-b140-b17f82981002",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Linear Regression Warnings\nLinear regression comes with a set of implicit assumptions and is not the best model for every situation. Here are a couple of issues that you should watch out for.\n\n**Linear Regression Works Best When the Data is Linear**  \nLinear regression produces a straight line model from the training data. If the relationship in the training data is not really linear, you'll need to either make adjustments (transform your training data), add features (we'll come to this next), or use another kind of model.",
              "instructor_notes": ""
            },
            {
              "id": 262035,
              "key": "07c70950-8f22-4435-b8b8-802913fc798f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/58868097_quadraticlinearregression/quadraticlinearregression.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/07c70950-8f22-4435-b8b8-802913fc798f",
              "caption": "",
              "alt": null,
              "width": 541,
              "height": 435,
              "instructor_notes": null
            },
            {
              "id": 262036,
              "key": "95dc2c3a-c94f-4bd2-868b-2ba5502af182",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Linear Regression is Sensitive to Outliers**  \nLinear regression tries to find a 'best fit' line among the training data. If your dataset has some outlying extreme values that don't fit a general pattern, they can have a surprisingly large effect. \n\nIn this first plot, the model fits the data pretty well.",
              "instructor_notes": ""
            },
            {
              "id": 262037,
              "key": "6a0f99f8-e898-45a8-8bb9-481617cd0abe",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5886817f_lin-reg-no-outliers/lin-reg-no-outliers.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6a0f99f8-e898-45a8-8bb9-481617cd0abe",
              "caption": "",
              "alt": null,
              "width": 541,
              "height": 435,
              "instructor_notes": null
            },
            {
              "id": 262038,
              "key": "e5196063-f07f-4921-be7b-ced07e31d61a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "However, adding a few points that are outliers and don't fit the pattern really changes the way the model predicts. ",
              "instructor_notes": ""
            },
            {
              "id": 262039,
              "key": "495bada0-c139-415f-9df1-555e7f67d432",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588681bb_lin-reg-w-outliers/lin-reg-w-outliers.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/495bada0-c139-415f-9df1-555e7f67d432",
              "caption": "",
              "alt": null,
              "width": 541,
              "height": 435,
              "instructor_notes": null
            },
            {
              "id": 262041,
              "key": "fc421cb6-6178-4e41-bcc0-9c5a983ef610",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In most circumstances, you'll want a model that fits most of the data most of the time, so watch out for outliers!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 439324,
          "key": "f67c8f75-858e-499a-9a8b-52740ce067d1",
          "title": "Polynomial Regression",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f67c8f75-858e-499a-9a8b-52740ce067d1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461342,
              "key": "2b179b11-ce93-4eb4-9fe2-38a38bd1f10c",
              "title": "Polynomial Regression",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DBhWG-PagEQ",
                "china_cdn_id": "DBhWG-PagEQ.mp4"
              }
            }
          ]
        },
        {
          "id": 439325,
          "key": "3f69dcbd-dc3b-4e6d-a1cc-3257db6ce3c0",
          "title": "Regularization",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3f69dcbd-dc3b-4e6d-a1cc-3257db6ce3c0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461566,
              "key": "723e6df8-cda8-4789-9fdf-e7201d60312e",
              "title": "Regularization",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "PyFNIcsNma0",
                "china_cdn_id": "PyFNIcsNma0.mp4"
              }
            }
          ]
        },
        {
          "id": 439837,
          "key": "8fd474de-ebbd-423a-b890-03cfb91b00b6",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8fd474de-ebbd-423a-b890-03cfb91b00b6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461345,
              "key": "d175ca17-3d04-4c34-b00f-513fe96499ff",
              "title": "Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pyeojf0NniQ",
                "china_cdn_id": "pyeojf0NniQ.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}