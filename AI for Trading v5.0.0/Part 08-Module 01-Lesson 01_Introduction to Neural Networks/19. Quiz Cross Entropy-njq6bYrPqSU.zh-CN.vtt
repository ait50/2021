WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.137
简单总结一下 我们有两个模型

00:00:02.137 --> 00:00:05.009
左侧较差的模型和右侧较好的模型

00:00:05.009 --> 00:00:07.559
判断好坏的方法是

00:00:07.559 --> 00:00:11.730
根据模型 计算每个点出现所示颜色的概率

00:00:11.730 --> 00:00:14.759
将这些概率相乘 以便获得

00:00:14.759 --> 00:00:17.309
整个模型的概率 通过计算可以看到

00:00:17.309 --> 00:00:20.960
右侧模型的概率比左侧的高很多

00:00:20.960 --> 00:00:25.315
现在我们只需最大化这一概率

00:00:25.315 --> 00:00:29.690
但是概率是数字的乘积 而乘积很难计算

00:00:29.690 --> 00:00:32.820
或许计算四个数字的乘积看上去并不那么可怕

00:00:32.820 --> 00:00:35.642
但是如果有几千个数据点呢？

00:00:35.642 --> 00:00:38.914
那么就需要计算几千个数字的乘积

00:00:38.914 --> 00:00:41.594
所有数字都在 0 到 1 之间

00:00:41.594 --> 00:00:43.655
这个积会很小

00:00:43.655 --> 00:00:50.545
大概是 0.0000 几 肯定要离这些数字远点

00:00:50.545 --> 00:00:55.298
并且 如果计算几千个数字的积的过程中改变了其中一个数字

00:00:55.298 --> 00:00:57.630
那么乘积就会出现很大的变化

00:00:57.630 --> 00:01:02.642
总结下 我们不希望用到乘积来表示这个概率

00:01:02.642 --> 00:01:04.500
有什么比乘积更好的表示方法呢？

00:01:04.500 --> 00:01:07.265
问问我们的小伙伴

00:01:07.265 --> 00:01:11.805
乘积不好 但是求和不错 所以我们求和吧

00:01:11.805 --> 00:01:14.885
我们试着将这些积变成和

00:01:14.885 --> 00:01:19.939
我们需要找一个将积变成和的函数

00:01:19.938 --> 00:01:21.778
是什么函数呢？

00:01:21.780 --> 00:01:23.534
看来要做道测验了

00:01:23.534 --> 00:01:26.745
测验：下面哪个函数可以实现从乘积到求和的转换？

00:01:26.745 --> 00:01:31.765
是正弦 余弦 对数 还是指数函数？

00:01:31.765 --> 00:01:33.450
请将答案填在下方

