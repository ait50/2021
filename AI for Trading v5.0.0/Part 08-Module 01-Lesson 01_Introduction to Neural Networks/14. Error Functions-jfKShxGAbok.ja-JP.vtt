WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.669
これは、エラー関数の明らかな表現です

00:00:02.669 --> 00:00:04.139
私たちは山の頂上にいます

00:00:04.139 --> 00:00:06.870
エラレスト山です ここから降りたいのですが

00:00:06.870 --> 00:00:10.095
それは簡単ではありません  雲がかかっていて 山は非常に大きいため

00:00:10.095 --> 00:00:12.425
全体像がわからないからです

00:00:12.425 --> 00:00:15.080
下山のためにすることは 周りを見て

00:00:15.080 --> 00:00:18.234
歩いて行ける可能な方向をすべて検討することです

00:00:18.234 --> 00:00:21.429
そして もっとも多く降りられる方向を選びます

00:00:21.428 --> 00:00:23.669
ここではこの方向だと仮定しましょう

00:00:23.670 --> 00:00:26.100
そして その方向に歩き出します

00:00:26.100 --> 00:00:28.789
こうして高さを減らしました

00:00:28.789 --> 00:00:33.560
一歩踏み出すごとに このプロセスを繰り返して

00:00:33.560 --> 00:00:39.210
高さを減らしていき 山を完全に降りるまで つまり 高さを最小化するまで続けます

00:00:39.210 --> 00:00:43.558
この例では問題解決のために使用する主なメトリックは高さです

00:00:43.558 --> 00:00:45.533
この高さをエラーと呼ぶことにします

00:00:45.533 --> 00:00:48.129
エラーは その時自分たちがしていることがどの程度悪いかと

00:00:48.130 --> 00:00:51.234
理想的な解決策からどのくらい離れているかを教えてくれます

00:00:51.234 --> 00:00:54.490
また常に足を踏み出してエラーを減らしていけば

00:00:54.490 --> 00:00:57.715
最終的には問題を解決できます

00:00:57.715 --> 00:00:59.399
エラレスト山から下山できます

00:00:59.399 --> 00:01:00.655
こう思っている人がいるかもしれません

00:01:00.655 --> 00:01:03.085
待てよ 問題を解決できるとは限らないのでは と

00:01:03.085 --> 00:01:04.329
谷に はまったらどうしよう

00:01:04.328 --> 00:01:06.968
極小値だけど山のふもとでない場所に

00:01:06.968 --> 00:01:09.068
これはマシーンラーニングではよくあることであり

00:01:09.069 --> 00:01:11.870
このNanodegreeの後の方でさまざまな解決法を見ます

00:01:11.870 --> 00:01:14.259
注目すべきこととして 多くの場合

00:01:14.259 --> 00:01:18.129
極小値は問題に対するかなり良い解決策を与えてくれます

00:01:18.129 --> 00:01:20.734
この方法は 後で詳しく勉強しますが

00:01:20.733 --> 00:01:23.280
勾配降下法と呼ばれます

00:01:23.280 --> 00:01:25.424
では このアプローチで問題を解決してみましょう

00:01:25.424 --> 00:01:27.239
良いエラー関数とは何でしょうか

00:01:27.239 --> 00:01:30.634
コンピューターにやり方のまずさを教えるのはなんでしょうか

00:01:30.634 --> 00:01:33.864
ここに肯定的なエリアと否定的なエリアと直線があります

00:01:33.864 --> 00:01:38.385
問題は完璧な解決策からどのくらい離れているかをコンピューターにどのように教えるかです

00:01:38.385 --> 00:01:40.885
たぶん 誤りの数を数えることができます

00:01:40.885 --> 00:01:42.180
2つの誤りがあります

00:01:42.180 --> 00:01:44.810
これが高さです  つまりエラーです

00:01:44.810 --> 00:01:46.920
山を下りるためにしたのと同じように

00:01:46.920 --> 00:01:49.409
周囲を見回して

00:01:49.409 --> 00:01:52.665
エラーを少なくするために直線を動かせる方向を探します

00:01:52.665 --> 00:01:54.305
この方向に動かすとしましょう

00:01:54.305 --> 00:01:58.260
エラーの数が1に減り この方向に動かすと

00:01:58.260 --> 00:02:00.810
エラーの数はゼロに減ります

00:02:00.810 --> 00:02:04.049
これで終わりですね  まあ ほとんど

00:02:04.049 --> 00:02:06.030
このアプローチには小さな問題があります

00:02:06.030 --> 00:02:10.995
私たちのアルゴリズムでは ごく小さなステップを取り その理由は微積分です

00:02:10.995 --> 00:02:14.990
小さなステップは微分係数によって計算されるからです

00:02:14.990 --> 00:02:17.610
では ここでごく小さなステップを取るとどうなるでしょう

00:02:17.610 --> 00:02:23.631
初めに2つのエラーがあり 少しだけ動かしても 2つのエラーがあります

00:02:23.631 --> 00:02:26.574
次にもう少しだけ動かしても まだ2つのエラーがあります

00:02:26.574 --> 00:02:30.784
さらにもう少しだけ動かしても まだまだ2つのエラーがあります

00:02:30.783 --> 00:02:32.875
あまり多くのことはできません

00:02:32.875 --> 00:02:35.150
これは勾配降下法を使用して

00:02:35.150 --> 00:02:37.900
アステカのピラミッドをフラットステップで降りようとするようなものです

00:02:37.900 --> 00:02:39.949
2段目のここにいる場合

00:02:39.949 --> 00:02:42.609
2つのエラーがあり 周りのどこを見ても

00:02:42.609 --> 00:02:46.909
必ず2つのエラーがあるため混乱して どうしてよいかわからなくなります

00:02:46.908 --> 00:02:48.644
一方

00:02:48.645 --> 00:02:51.960
エラレスト山では高さの小さな違いを検出でき

00:02:51.960 --> 00:02:56.224
最も多く降りられる方向を見つけることができます

00:02:56.223 --> 00:03:00.449
数学用語では これは勾配降下法を行うためには

00:03:00.449 --> 00:03:04.818
エラー関数は離散ではなく連続でなければならないことを意味します

00:03:04.818 --> 00:03:06.375
エラレスト山は連続です

00:03:06.375 --> 00:03:09.680
位置の小さな変化は高さの小さな変化に変換されますが

00:03:09.680 --> 00:03:12.115
アステカのピラミッドはそうではありません

00:03:12.115 --> 00:03:15.699
2から1 そして1からゼロへハイジャンプしなければならないからです

00:03:15.699 --> 00:03:18.009
実際のところ エラー関数は

00:03:18.008 --> 00:03:20.549
微分可能である必要がありますが これについては後で説明します

00:03:20.550 --> 00:03:22.825
そこで ここでしなければならないことは

00:03:22.824 --> 00:03:26.484
連続のエラー関数を作成することであり この後 それを行います

00:03:26.485 --> 00:03:30.590
ここに6つのポイントがあり そのうちの4つは正しく分類されています

00:03:30.590 --> 00:03:33.360
2つの青と2つの赤です

00:03:33.360 --> 00:03:35.900
2つは正しく分類されていません

00:03:35.900 --> 00:03:40.710
一番左のこの赤いポイントといちばん右のこの青いポイントです

00:03:40.710 --> 00:03:44.074
エラー関数は大きなペナルティを

00:03:44.074 --> 00:03:46.469
2つの誤って分類されたポイントに割り当て

00:03:46.468 --> 00:03:50.150
4つの正しく分類されたポイントには小さなペナルティを割り当てます

00:03:50.150 --> 00:03:54.004
ここではポイントのサイズをペナルティとして表しています

00:03:54.003 --> 00:03:57.560
ペナルティはポイントが誤って分類されているときの境界からの大まかな

00:03:57.560 --> 00:04:02.938
距離であり ポイントが正しく分類されているときにはほぼゼロです

00:04:02.938 --> 00:04:06.405
クラスで後ほど エラーの式を学びます

00:04:06.405 --> 00:04:10.729
今のところは対応するポイントからエラーをすべて加えて 合計エラーを求めます

00:04:10.729 --> 00:04:11.990
大きな数になるのは

00:04:11.990 --> 00:04:15.240
2つの誤って分類されたポイントがエラーに大きな量を加えているからです

00:04:15.240 --> 00:04:19.509
ここでのアイデアは直線を動かして これらのエラーを減らすことです

00:04:19.509 --> 00:04:23.509
しかし今はできません  直線のパラメーターにごくわずかな変化しか加えることができず

00:04:23.509 --> 00:04:28.129
エラー関数にごくわずかな変化しか加えることができないからです

00:04:28.129 --> 00:04:29.149
直線を動かすと

00:04:29.149 --> 00:04:30.288
たとえば この方向に動かすと

00:04:30.288 --> 00:04:33.365
いくつかのエラーが減り いくつかはわずかに増えることがわかりますが

00:04:33.365 --> 00:04:35.389
一般に合計を考えると

00:04:35.389 --> 00:04:39.050
合計は小さくなります

00:04:39.050 --> 00:04:43.360
以前は誤って分類されていた2つのポイントが正しく分類されたためです

00:04:43.360 --> 00:04:46.774
このプロパティを持つエラー関数を構築できれば

00:04:46.774 --> 00:04:51.240
勾配降下法を使用して問題を解決できます

00:04:51.240 --> 00:04:52.995
これは全体像です

00:04:52.995 --> 00:04:54.345
私たちはエラレスト山の頂上に

00:04:54.345 --> 00:04:57.810
います非常に高いのはエラーが大きいためです

00:04:57.810 --> 00:05:03.639
見てのとおり エラーは高さであり 青と赤のエリアの合計です

00:05:03.639 --> 00:05:07.889
周りを見て最も多く降りられる方向を探します

00:05:07.889 --> 00:05:11.764
これはエラーを最も多く減らすために直線を動かす方向ということであり

00:05:11.764 --> 00:05:14.629
その方向に足を踏み出します

00:05:14.629 --> 00:05:18.838
山では一歩ずつ山を下り グラフではポイントを正しく分類することによって

00:05:18.838 --> 00:05:22.684
エラーを少しずつ減らします  それを繰り返します

00:05:22.684 --> 00:05:24.014
エラーを計算し

00:05:24.014 --> 00:05:27.959
周りを見て最も多く降りられる方向を探し

00:05:27.959 --> 00:05:32.365
その方向に足を踏み出すことで山を下っていきます

00:05:32.365 --> 00:05:35.430
左では高さを減らして

00:05:35.430 --> 00:05:38.250
山から下りることができ

00:05:38.250 --> 00:05:45.430
右ではエラーを可能な限り少ない値に減らして ポイントを正しく分類できました

00:05:45.430 --> 00:05:49.093
問題は子のエラー関数をどのように定義するかということです

00:05:49.093 --> 00:05:50.420
それが次にやることです

