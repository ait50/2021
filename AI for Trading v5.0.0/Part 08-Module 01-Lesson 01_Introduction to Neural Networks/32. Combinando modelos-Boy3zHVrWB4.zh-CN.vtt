WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.463
现在我来讲解一下如何创建这类非线性模型

00:00:03.463 --> 00:00:06.057
方法很简单

00:00:06.059 --> 00:00:12.060
我们可以把两个线性模型组合成一个非线性模型

00:00:12.060 --> 00:00:13.769
简而言之是这样的

00:00:13.769 --> 00:00:17.518
把两个模块叠加到一起 形成右侧的这个模型

00:00:17.518 --> 00:00:20.083
就是在多个模型之间进行运算

00:00:20.085 --> 00:00:24.160
好比说 “这条直线加上这条直线就成为了这个曲线”

00:00:24.160 --> 00:00:26.824
我来教你如何用数学方法实现这一点

00:00:26.824 --> 00:00:30.750
每个线性模型都占据了整个概率空间

00:00:30.750 --> 00:00:36.478
也就是说对于每个点 它都会给出一个是蓝点的概率

00:00:36.478 --> 00:00:39.179
例如 这个点是在蓝色区域

00:00:39.179 --> 00:00:43.890
它是蓝点的概率是 0.7

00:00:43.890 --> 00:00:47.250
这个点在第二个概率空间里也是位于蓝色区域

00:00:47.250 --> 00:00:52.170
它是蓝点的概率是 0.8

00:00:52.170 --> 00:00:53.353
现在的问题是

00:00:53.353 --> 00:00:55.890
如何将两者结合到一起？

00:00:55.890 --> 00:01:00.225
把两个数字结合到一起最简单的方法是将二者相加

00:01:00.225 --> 00:01:05.409
因此 0.8 + 0.7 = 1.5

00:01:05.409 --> 00:01:09.890
但是 结果看起来不像是概率 因为它大于 1

00:01:09.890 --> 00:01:15.915
概率必须在 0 到 1 之间 那该怎么办？

00:01:15.915 --> 00:01:20.980
如何将这个大于 1 的数转换成 0 到 1 之间的数？

00:01:20.980 --> 00:01:24.079
我们之前遇到过这种情形 有一个很实用的工具

00:01:24.078 --> 00:01:27.743
可以帮助我们将所有数转换为 0 到 1 之间的数

00:01:27.745 --> 00:01:30.234
它就是 sigmoid 函数

00:01:30.233 --> 00:01:32.780
我们将使用 sigmoid 函数

00:01:32.780 --> 00:01:36.858
我们将 1.5 输入 sigmoid 函数

00:01:36.858 --> 00:01:40.188
得到的值为 0.82

00:01:40.188 --> 00:01:44.567
这也是该点在合并的概率空间中为蓝点的概率

00:01:44.569 --> 00:01:47.299
于是我们得到了平面内的每个点的概率函数

00:01:47.299 --> 00:01:51.243
这也是我们合并两个模型的过程

00:01:51.242 --> 00:01:54.092
我们分别计算

00:01:54.093 --> 00:01:56.140
这两个模型所得到的概率

00:01:56.140 --> 00:01:59.334
然后将它们相加并调用 sigmoid 函数

00:01:59.334 --> 00:02:01.340
如果对求和过程进行加权呢？

00:02:01.340 --> 00:02:04.370
如果我们希望上面的模型

00:02:04.370 --> 00:02:07.849
对最终概率的影响比下面的模型大 该怎么办？

00:02:07.849 --> 00:02:11.569
就像这样 结果模型看起来更像顶部的模型

00:02:11.568 --> 00:02:15.698
我们可以添加权重

00:02:15.699 --> 00:02:22.355
例如 可以说“我要用第一个模型的 7 倍加上第二个模型”

00:02:22.354 --> 00:02:24.240
实际上 我可以随意添加权重

00:02:24.241 --> 00:02:29.574
例如 可以说 “第一个模型的 7 倍加上第二个模型的 5 倍”

00:02:29.574 --> 00:02:34.335
计算结果模型的方法是

00:02:34.335 --> 00:02:36.789
将第一个模型得到的概率乘以 7

00:02:36.788 --> 00:02:43.293
然后将第二个模型得到的概率乘以 5 也可以加上偏差

00:02:43.294 --> 00:02:45.526
例如偏差是 -6

00:02:45.526 --> 00:02:48.020
然后加到整个等式上

00:02:48.020 --> 00:02:52.735
结果变成 7 乘以这个加上 5 乘以这个减去 6

00:02:52.735 --> 00:02:54.914
结果是 2.9

00:02:54.913 --> 00:03:00.679
然后输入到 sigmoid 函数中 得到的结果是 0.95

00:03:00.680 --> 00:03:02.680
和之前的几乎一样 对吧？

00:03:02.680 --> 00:03:06.085
之前 我们有一条直线

00:03:06.085 --> 00:03:10.240
它是输入值乘以权重加上偏差的线性组合

00:03:10.240 --> 00:03:13.300
现在的模型是两个之前的模型乘以权重

00:03:13.300 --> 00:03:17.650
再加上某个偏差的线性组合

00:03:17.650 --> 00:03:18.905
所以几乎是完全一样的

00:03:18.905 --> 00:03:21.598
就像右侧的曲线模型

00:03:21.598 --> 00:03:25.817
是两个之前的线性模型的线性组合

00:03:25.818 --> 00:03:30.573
甚至可以看成两个模型之间的一条曲线

00:03:30.574 --> 00:03:32.069
这并不是巧合

00:03:32.068 --> 00:03:35.435
这就是构建神经网络的核心

00:03:35.435 --> 00:03:38.628
当然 我们也可以将其理解为

00:03:38.627 --> 00:03:43.227
对现有的线性模型进行线性组合 得到更复杂的新模型

00:03:43.229 --> 00:03:47.000
我们就是这样构建神经网络的

