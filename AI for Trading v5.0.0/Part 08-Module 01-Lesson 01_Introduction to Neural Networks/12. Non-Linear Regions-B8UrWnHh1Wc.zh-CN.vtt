WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.830
我们再仔细看看这个录取或拒绝学生的模型

00:00:04.830 --> 00:00:06.025
假设有另一位学生 4

00:00:06.025 --> 00:00:07.334
考试得了 9 分

00:00:07.333 --> 00:00:08.905
但平时成绩只有 1 分

00:00:08.906 --> 00:00:12.000
根据我们的模型 该学生被录取了

00:00:12.000 --> 00:00:15.525
因为他位于正区域

00:00:15.525 --> 00:00:17.804
但是我们不希望出现这种情况

00:00:17.803 --> 00:00:19.182
如果平时成绩很低

00:00:19.184 --> 00:00:22.190
那么不管考试分数有多高 该生都不应被录取

00:00:22.190 --> 00:00:25.565
所以我们的数据应该看上去是这样的

00:00:25.565 --> 00:00:28.574
这个模型更贴近实际 但是我们遇到了一个问题

00:00:28.574 --> 00:00:32.329
这些数据无法被一条直线分隔开来

00:00:32.329 --> 00:00:34.228
除了直线之外 还有哪些形状可供选择？

00:00:34.228 --> 00:00:37.231
或许是圆圈 这是可以的

00:00:37.231 --> 00:00:40.573
或许两条直线 这也可行

00:00:40.575 --> 00:00:42.240
或者是这样的曲线

00:00:42.240 --> 00:00:44.423
也可行

00:00:44.423 --> 00:00:46.109
我们仔细看一下这条曲线

00:00:46.109 --> 00:00:49.795
遗憾的是 这种情况下感知器算法不适用了

00:00:49.795 --> 00:00:53.408
我们需要开发更为复杂的算法来解决这个问题

00:00:53.408 --> 00:00:55.868
我们需要重新定义感知器算法

00:00:55.868 --> 00:01:00.000
使其能泛化到除直线以外的其他类型曲线

