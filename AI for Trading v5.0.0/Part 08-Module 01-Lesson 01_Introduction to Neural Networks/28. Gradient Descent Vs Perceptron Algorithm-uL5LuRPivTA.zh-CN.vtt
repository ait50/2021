WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.990
我们来对比感知器算法和梯度下降算法

00:00:03.990 --> 00:00:05.845
在梯度下降算法中

00:00:05.845 --> 00:00:09.535
我们得到权重 从 Wi 改为

00:00:09.535 --> 00:00:13.915
Wi + α (y -y-hat) Xi

00:00:13.915 --> 00:00:15.325
在感知器算法中

00:00:15.325 --> 00:00:17.253
并不是每个点都会改变权重

00:00:17.253 --> 00:00:18.960
只有分类错误的点才会

00:00:18.960 --> 00:00:21.385
如果 x 被误分类

00:00:21.385 --> 00:00:27.525
如果点的标签为正 我们会把 Xi 加上 Wi 来改变权重

00:00:27.525 --> 00:00:29.785
如果为负 就要减去

00:00:29.785 --> 00:00:32.327
现在问题是这两个是相同的吗？

00:00:32.327 --> 00:00:34.920
我们回忆下在感知器算法中

00:00:34.920 --> 00:00:37.350
标签是 0 和 1

00:00:37.350 --> 00:00:40.320
预测 Y-hat 也是 0 和 1

00:00:40.320 --> 00:00:43.060
如果点是正确分类的

00:00:43.060 --> 00:00:48.440
那么 y- y-hat 为 0 因为 y 等于 y-hat

00:00:48.440 --> 00:00:50.205
如果点为蓝色

00:00:50.205 --> 00:00:52.095
那么 y 等于 1

00:00:52.095 --> 00:00:53.220
如果是错误分类的

00:00:53.220 --> 00:00:55.950
那么预测为 y-hat = 0

00:00:55.950 --> 00:00:59.265
y-hat - y 等于 -1

00:00:59.265 --> 00:01:01.050
类似地 点标记为红色

00:01:01.050 --> 00:01:04.105
那么 y = 0 而且 y-hat = 1

00:01:04.105 --> 00:01:06.180
那么 y-hat - y 等于 1

00:01:06.180 --> 00:01:08.300
这可能不会立即很清晰

00:01:08.300 --> 00:01:10.035
不过如果你长时间注视着屏幕

00:01:10.035 --> 00:01:13.620
你会发现右侧和左侧完全相同

00:01:13.620 --> 00:01:15.175
唯一的不同在于左侧

00:01:15.175 --> 00:01:17.776
Y-hat 是 0 到 1 之间的任何数字

00:01:17.776 --> 00:01:19.650
而在右侧

00:01:19.650 --> 00:01:23.305
Y-hat 只能是数字 0 或 1

00:01:23.305 --> 00:01:25.175
非常有趣 对不对？

00:01:25.175 --> 00:01:28.055
我们来更加认真地学习梯度下降

00:01:28.055 --> 00:01:31.680
在感知器算法和梯度下降算法中

00:01:31.680 --> 00:01:36.570
这个被误分类的点让一条线段更加靠近

00:01:36.570 --> 00:01:40.770
因为最终它想要这条线段越过它 这样可以处于正确的一侧

00:01:40.770 --> 00:01:43.734
如果点被正确分类 会发生什么呢？

00:01:43.734 --> 00:01:47.315
感知器算法表示什么都不做

00:01:47.315 --> 00:01:49.575
在梯度下降算法中

00:01:49.575 --> 00:01:51.195
你可以改变权重

00:01:51.195 --> 00:01:52.830
可是如何做到呢？

00:01:52.830 --> 00:01:54.480
如果我们仔细观察

00:01:54.480 --> 00:01:56.640
这个点要求这条直线

00:01:56.640 --> 00:01:58.875
移动到更远的地方

00:01:58.875 --> 00:02:01.120
这样说得通 对不对？

00:02:01.120 --> 00:02:03.180
因为如果正确分类

00:02:03.180 --> 00:02:05.895
也就是说 蓝点位于蓝色区域

00:02:05.895 --> 00:02:08.385
可能更容易进入蓝色区域

00:02:08.385 --> 00:02:10.740
预测值更接近 1

00:02:10.740 --> 00:02:13.060
误差更小

00:02:13.060 --> 00:02:16.320
同样 红点位于红色区域

00:02:16.320 --> 00:02:19.590
这个点要求这条直线远离是说得通的

00:02:19.590 --> 00:02:22.925
这就是梯度下降算法的用途

00:02:22.925 --> 00:02:26.540
误分类的点要求直线更加靠近

00:02:26.540 --> 00:02:30.315
而正确分类的点要求直线远离

00:02:30.315 --> 00:02:33.240
这条直线结合所有点的要求 然后按照这种方式移动

00:02:33.240 --> 00:02:37.000
最后达到相当良好的解决方案

