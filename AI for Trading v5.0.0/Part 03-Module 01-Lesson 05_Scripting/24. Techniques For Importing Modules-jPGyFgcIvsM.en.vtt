WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.580
So far, you've imported modules with import followed by the module name,

00:00:05.580 --> 00:00:08.189
which makes all the classes of objects and

00:00:08.189 --> 00:00:12.059
functions of that module available via.notation.

00:00:12.060 --> 00:00:16.995
There are some other variance of importing that are useful in other situations.

00:00:16.995 --> 00:00:22.005
You can import an individual function or class from a module like this,

00:00:22.004 --> 00:00:24.480
from, the module name,

00:00:24.480 --> 00:00:26.609
import, the object name.

00:00:26.609 --> 00:00:30.975
This gives access only to defaultdict from the collections module.

00:00:30.975 --> 00:00:36.274
Defaultdict will be accessible with its own name without the module name before it.

00:00:36.274 --> 00:00:39.339
Trying to access collections or even calling

00:00:39.340 --> 00:00:43.465
collections.defaultdict will give a name error.

00:00:43.465 --> 00:00:48.130
Importing individual objects from a module means you only take

00:00:48.130 --> 00:00:52.465
what you need and you don't need to use.notation to access them.

00:00:52.465 --> 00:00:58.675
You can import multiple individual objects from a module by separating them with commas.

00:00:58.674 --> 00:01:03.819
This technique is very common when importing pieces from large libraries.

00:01:03.820 --> 00:01:05.739
And as you saw before,

00:01:05.739 --> 00:01:08.364
you can import a module and give it a different,

00:01:08.364 --> 00:01:11.229
usually shorter name, like this.

00:01:11.230 --> 00:01:14.469
If the name of a module is particularly long or

00:01:14.469 --> 00:01:18.054
if there's a clash with something with the same or similar name,

00:01:18.055 --> 00:01:21.220
renaming the module like this can be helpful.

00:01:21.219 --> 00:01:25.120
Check code examples in the documentation as these will often

00:01:25.120 --> 00:01:29.185
include a standard abbreviation if one is used for this module.

00:01:29.185 --> 00:01:34.750
Using an abbreviation that is consistent with others will make your code more readable.

00:01:34.750 --> 00:01:40.340
For example, the standard abbreviation for the multiprocessing module is MP.

00:01:40.340 --> 00:01:43.950
You can combine the previous two pieces of syntax to

00:01:43.950 --> 00:01:47.630
input an item from a module and change its name.

00:01:47.629 --> 00:01:49.469
Again, you'll be able to access

00:01:49.469 --> 00:01:53.954
only that individual item directly with its newly specified name.

00:01:53.954 --> 00:01:56.024
No.notation is needed.

00:01:56.025 --> 00:01:59.145
This can be useful if you have multiple objects

00:01:59.144 --> 00:02:02.729
with similar names from different packages in your namespace.

00:02:02.730 --> 00:02:07.425
For example, perhaps you want a CSV reader and JSON reader.

00:02:07.424 --> 00:02:12.064
You could import them from their respective modules and give them descriptive names.

00:02:12.064 --> 00:02:14.620
Another way of importing that you may see in

00:02:14.620 --> 00:02:18.685
other people's code but that you should not use is this.

00:02:18.685 --> 00:02:22.539
Using this asterisk will import every object from

00:02:22.539 --> 00:02:28.150
a module individually and allow you to access each of them directly via its name.

00:02:28.150 --> 00:02:32.784
The real problem with this is that modules may contain many objects,

00:02:32.784 --> 00:02:34.834
each of which has a name.

00:02:34.834 --> 00:02:38.020
Including all these names may overwrite or maybe

00:02:38.020 --> 00:02:41.695
overwritten by other names you're using in your program.

00:02:41.694 --> 00:02:44.650
Import star also makes it impossible for

00:02:44.650 --> 00:02:48.730
collaborators to find where an important object was defined.

00:02:48.729 --> 00:02:53.319
A reader can search for a definition of a function and not find it and

00:02:53.319 --> 00:02:57.594
they won't know which import star statement introduced a function.

00:02:57.594 --> 00:03:00.219
These problems can lead to a lot of confusion.

00:03:00.219 --> 00:03:03.655
Do not use from module name import asterisk.

00:03:03.655 --> 00:03:07.599
If you really want to use all the objects from the Random module,

00:03:07.599 --> 00:03:14.669
use the standard import random instead and access each of the objects with the.notation.

