WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:02.933
بالإضافة إلى قراءة البيانات من الملفات،

00:00:03.033 --> 00:00:07.033
يمكننا استيراد كود Python
من برامج نصية أخرى.

00:00:07.133 --> 00:00:11.167
هذا مفيد خصوصاً إذا كنت تعمل
على مشروع أكبر

00:00:11.267 --> 00:00:17.233
حيث تريد ترتيب الكود في ملفات متعددة
وإعادة استخدامه في تلك الملفات.

00:00:17.333 --> 00:00:19.400
إذا كان نص Python الذي تريد استيراده

00:00:19.500 --> 00:00:22.033
موجوداً في الدليل ذاته
الذي يحتوي البرنامج النصي،

00:00:22.133 --> 00:00:23.800
ما عليك سوى كتابة "import"،

00:00:23.900 --> 00:00:27.933
متبوعة باسم الملف من دون الملحق "py."

00:00:28.033 --> 00:00:31.533
تُكتب عبارات الاستيراد
في أعلى برنامج "Python" النصي

00:00:31.633 --> 00:00:33.533
وكل عبارة تكون في سطر مستقل.

00:00:33.633 --> 00:00:38.200
سيعمل "Python" حتى لو كانت عبارات
الاستيراد مضمنة لاحقاً داخل البرنامج النصي،

00:00:38.300 --> 00:00:41.767
لكن من الشائع كتابتها في الأعلى دائماً.

00:00:41.867 --> 00:00:45.767
يمكنك فقط استخدام ما استوردته
بعد هذه العبارة

00:00:45.867 --> 00:00:48.700
لذا، فإن كتابتها في البداية
يجعل الأمر أقل إرباكاً.

00:00:48.800 --> 00:00:52.200
كما أنه من الجيد أن يرى القارئ
ما يعتمد البرنامج النصي عليه

00:00:52.300 --> 00:00:54.467
قبل قراءة باقي الكود.

00:00:54.567 --> 00:00:56.733
لنبدأ بمثال بسيط للغاية.

00:00:56.833 --> 00:01:03.333
هنا، لدي ملف "Python" اسمه
"other_script.py" يطبع حاصل جمع 2 و3.

00:01:03.433 --> 00:01:06.167
وفي هذا الملف "demo.py"،

00:01:06.267 --> 00:01:09.000
قمتُ باستيراد other_script.py
ثم أضفت التعبير "(4)print".

00:01:09.100 --> 00:01:11.733
عندما نشغّل "demo.py"،

00:01:11.833 --> 00:01:17.767
تخبر عبارة الاستيراد هذه "Python" بتشغيل
الكود من ذلك الملف والذي يطبع الرقم 5،

00:01:17.867 --> 00:01:21.933
ثم تستمر بتنفيذ ما تبقى من الكود
في هذا الملف بطباعة الرقم 4.

00:01:22.033 --> 00:01:26.833
إذا كان الملف يحتوي بدلاً من ذلك
على السطر "num = 2+3"،

00:01:26.933 --> 00:01:30.500
وحاولنا الوصول إلى ذلك في ملف "demo.py"،

00:01:30.600 --> 00:01:35.233
فإن الإشارة إليه باستخدام اسم المتغيّر فقط
سيسبب خطأ برمجياً.

00:01:35.333 --> 00:01:38.333
للوصول إلى الكائنات
في "other_script.py"،

00:01:38.433 --> 00:01:41.833
علينا استخدام اسم الملف متبوعاً بنقطة،

00:01:41.933 --> 00:01:45.000
ثم اسم الكائن،
لنأمر "Python" بأن تبحث عن هذا الكائن

00:01:46.067 --> 00:01:48.333
في ملف "other_script" الذي استوردناه.

00:01:48.433 --> 00:01:51.300
والآن يمكننا الوصول إلى المتغيّرات بنجاح.

00:01:51.400 --> 00:01:53.233
عندما تشغّل "Python" البرنامج النصي،

00:01:53.333 --> 00:01:57.133
يكون لديها فحسب قدرة الوصول المباشر إلى
الكائنات المعرّفة في هذا البرنامج النصي.

00:01:57.233 --> 00:02:00.167
إحدى هذه الكائنات
هي وحدة نمطية تُدعى "other_script".

00:02:00.267 --> 00:02:04.467
الوحدة النمطية هي ملف يحتوى
على تعريفات وعبارات بلغة "Python".

00:02:04.567 --> 00:02:06.867
عندما نستورد ملف "Python" كهذا،

00:02:06.967 --> 00:02:10.933
فإنه ينشئ كائناً
يُدعى "other_script" نوعه "module".

00:02:11.033 --> 00:02:14.867
دعونا نستعرض مثالاً مفيداً أكثر
لاستيراد وحدة نمطية.

00:02:14.967 --> 00:02:20.033
هنا، لدينا ملف "Python"
يحتوي على دوال مفيدة نود استخدامها.

00:02:20.133 --> 00:02:25.600
دالة تُرجع متوسط قائمة ما، وأخرى تضيف
5 الرقم إلى كل عنصر في القائمة.

00:02:25.700 --> 00:02:28.100
يمكننا استيرادهما داخل "demo.py"،

00:02:28.200 --> 00:02:32.433
وكتابة "useful_functions"
ثم نقطة ثم اسم الدالة حتى نستخدمهما.

00:02:32.533 --> 00:02:35.367
لك أن تتخيل كم سيكون هذا مفيداً

00:02:35.467 --> 00:02:38.700
إذا كانت لدينا دوال عديدة
تُستخدم كثيراً في ملفات مختلفة.

00:02:38.800 --> 00:02:43.867
وبالرغم من أنه يبدو مزعجاً بعض الشيء
أن نضطر إلى كتابة اسم الملف الكامل

00:02:43.967 --> 00:02:46.033
كلما أردنا استخدام دالة منه،

00:02:46.133 --> 00:02:49.233
إلا أنه بإمكاننا جعل ذلك أكثر بساطة
إذا ما استخدمنا اسماً مستعاراً.

00:02:49.333 --> 00:02:53.800
هنا، صنعتُ اسماً مستعاراً
لوحدة "useful_function" النمطية وهو "uf".

00:02:53.900 --> 00:02:59.000
والآن، يمكنني فحسب كتابة "uf" بدلاً من اسم
الوحدة كاملاً عند استدعاء الدوال منها.

00:02:59.100 --> 00:03:02.367
هذا مفيد عندما تكون لدينا
كائنات نريد استيرادها

00:03:02.467 --> 00:03:04.733
من برامج "Python" نصية أخرى، كالدوال.

00:03:04.833 --> 00:03:06.967
لكن، ماذا لو تضمّن ذلك البرنامج النصي أيضاً

00:03:07.067 --> 00:03:12.133
عبارات قابلة للتنفيذ بالإضافة
إلى تعريفات الدوال ولا نريد استيرادها؟

00:03:12.233 --> 00:03:16.500
مثلاً، ماذا لو كان ملف
"usef_functions.py" يحتوي على كود

00:03:16.600 --> 00:03:20.900
في أسفل البرنامج النصي
يختبر دواله ويطبع النتائج؟

00:03:21.000 --> 00:03:26.333
هذا الكود جميل إذا نفّذنا
"useful_functions.py" لاختبار هذه الدوال،

00:03:26.433 --> 00:03:31.433
ولكنه غير مهم إذا كنا نحاول فقط
استخدام هذه الدوال في برنامج نصي آخر.

00:03:31.533 --> 00:03:35.500
في تلك الحالة يمكننا استخدام هذه العبارة
if __name__ = '__main__':

00:03:35.600 --> 00:03:40.333
بإدراج هذه العبارات
القابلة للتنفيذ داخل كتلة "if" هذه

00:03:40.433 --> 00:03:43.133
فإننا نأمر "Python"
بتنفيذ هذا الكود

00:03:43.233 --> 00:03:48.367
فقط عندما يكون البرنامج الرئيسي
الذي يتم تنفيذه هو "useful_functions.py".

00:03:48.467 --> 00:03:52.867
إذا شغّلنا هذا الملف سيتم تنفيذ الكود
الموجود داخل هذه الكتلة.

00:03:52.967 --> 00:03:55.167
لكن، إذا شغّلنا برنامجاً نصياً آخر

00:03:55.267 --> 00:03:59.733
قام فحسب باستيراد "useful_functions.py"،
فلن يتم تنفيذ هذا الكود.

00:03:59.833 --> 00:04:06.067
عموماً، من الجيد كتابة العبارات
القابلة للتنفيذ داخل كتلة "if name"،

00:04:06.167 --> 00:04:09.567
أو إدراجها في دالة تُدعى "main"

00:04:09.667 --> 00:04:11.767
ثم استدعاؤه داخل مربّع "if name".

00:04:11.867 --> 00:04:15.400
لعلكم تتساءلون عن ماهية
"name" و"main" هذه.

00:04:15.500 --> 00:04:17.600
كلما شغّلنا برنامجاً نصياً كهذا،

00:04:17.700 --> 00:04:22.133
تعيّن "Python"
متغيّراً داخلياً يُدعى "__name__"

00:04:22.233 --> 00:04:26.200
مع شرطتين سفليتين قبله وبعده لأي وحدة.

00:04:26.300 --> 00:04:29.900
هنا، بما أننا
نفّذنا الأمر "python demo.py"،

00:04:30.000 --> 00:04:33.900
تتعرف Python على هذه الوحدة
على أنها البرنامج الرئيسي

00:04:34.000 --> 00:04:38.700
وتُعيّن المتغيّر "__name__"
لتلك الوحدة ليكون السلسلة "main".

00:04:38.800 --> 00:04:42.200
لأي وحدة يتم استيرادها
في هذا البرنامج النصي،

00:04:42.300 --> 00:04:46.100
يتم تعيين متغيّر "__name__"
هذا ليكون اسم تلك الوحدة فقط.

