WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.889
我们来看看如何从文件中读取信息并放入 Python 中

00:00:04.889 --> 00:00:06.629
要读取文件

00:00:06.629 --> 00:00:08.294
首先需要打开文件

00:00:08.294 --> 00:00:12.240
为此 我们可以使用内置函数 open()

00:00:12.240 --> 00:00:14.789
我们在其中包含文件路径字符串

00:00:14.789 --> 00:00:19.414
以及想要指定的任何可选参数

00:00:19.414 --> 00:00:22.910
函数 open() 会返回一个文件对象 它是一个 Python 对象

00:00:22.910 --> 00:00:27.469
Python 通过该对象与文件本身交互

00:00:27.469 --> 00:00:31.714
在此示例中 我们将这个文件对象赋值给变量 f

00:00:31.714 --> 00:00:37.429
第二个可选参数指定打开文件的模式

00:00:37.429 --> 00:00:40.744
现在是 r 模式 即读取模式

00:00:40.744 --> 00:00:44.976
使用该模式是因为我们只想读取该文件

00:00:44.976 --> 00:00:47.554
我们不希望更改任何内容

00:00:47.554 --> 00:00:51.530
但是没必要在这里包含该参数

00:00:51.530 --> 00:00:56.054
因为如果未指定的话 默认模式就是该模式

00:00:56.054 --> 00:00:59.820
打开文件并创建文件对象后 

00:00:59.820 --> 00:01:04.140
我们可以使用方法 read() 访问该文件中的内容

00:01:04.140 --> 00:01:09.795
该 read() 方法会接受文件中包含的文本并放入字符串中

00:01:09.795 --> 00:01:15.810
在此示例中 我们将该方法返回的字符串赋值给变量 file_data

00:01:15.810 --> 00:01:19.650
当我们处理完文件 f 后 应该关闭它

00:01:19.650 --> 00:01:23.850
这样可以释放该文件占用的任何系统资源

00:01:23.849 --> 00:01:28.474
这个示例使用了文件 some_file.txt

00:01:28.474 --> 00:01:30.189
请务必注意 一旦不再需要打开的文件后

00:01:30.189 --> 00:01:34.584
始终要关闭这些文件

00:01:34.584 --> 00:01:37.959
如果我们打开很多文件 但是没有关闭这些文件

00:01:37.959 --> 00:01:43.059
我们会耗尽文件句柄 无法再打开新的文件

00:01:43.060 --> 00:01:46.150
在耗尽文件句柄之前到底可以打开多少文件

00:01:46.150 --> 00:01:49.795
取决于你的操作系统

00:01:49.795 --> 00:01:55.329
为了检验这一点 你可以尝试在 Python 中运行以下脚本

00:01:55.329 --> 00:01:59.094
到了某个时间点 遇到足够大的数字后

00:01:59.094 --> 00:02:00.700
你将遇到错误

00:02:00.700 --> 00:02:05.170
可以看出 在打开  7164 个文件后

00:02:05.170 --> 00:02:09.865
系统没有可用资源打开新的文件了

00:02:09.865 --> 00:02:14.784
为了避免这种情况 记得始终关闭不再需要的任何文件

00:02:14.784 --> 00:02:19.569
打开文件对象就像打开窗口并查看文件

00:02:19.569 --> 00:02:21.144
更准确地讲

00:02:21.145 --> 00:02:23.350
是一个宽只有一个字符的窗口

00:02:23.349 --> 00:02:27.474
并且始终从文件的开头开始

00:02:27.474 --> 00:02:31.169
这与阅读图书或文档完全不同

00:02:31.169 --> 00:02:34.309
阅读图书或文档时 你可以同时查看多个单词 甚至多页内容

00:02:34.310 --> 00:02:38.840
可以将文件看做有很多字符的长信息流

00:02:38.840 --> 00:02:43.205
文件对象可以按顺序一次查看一个字符

00:02:43.205 --> 00:02:45.455
除了读取文件之外

00:02:45.455 --> 00:02:47.585
还可以写入文件

00:02:47.585 --> 00:02:51.245
这样的话 你将更改文件的内容

00:02:51.245 --> 00:02:54.905
为此 必须以写入模式打开文件

00:02:54.905 --> 00:02:58.340
请注意 当你以写入模式打开文件时

00:02:58.340 --> 00:03:02.224
之前包含的任何内容都将被删除

00:03:02.224 --> 00:03:07.074
如果你想向现有文件中添加内容 但是不删除已有内容

00:03:07.074 --> 00:03:09.539
应该使用 append() 而不是 write()

00:03:09.539 --> 00:03:12.239
你可以查看相应的 Python 文档

00:03:12.240 --> 00:03:16.170
详细了解可以在哪些模式下打开文件

00:03:16.169 --> 00:03:20.444
因为我们处在写入模式下 并且我不想删除文件中的内容

00:03:20.444 --> 00:03:22.229
所以我们使用另一个文件

00:03:22.229 --> 00:03:24.584
如果文件不存在

00:03:24.585 --> 00:03:26.504
Python 将为你创建一个文件

00:03:26.504 --> 00:03:29.400
现在我们可以像这样写入该文件

00:03:29.400 --> 00:03:34.275
操作完毕后 我们要做个良好公民 关闭该文件

00:03:34.275 --> 00:03:41.000
从这里可以看出 Python 创建了另一个文件 其中包含文本“Hello World!”

