WEBVTT
Kind: captions
Language: pt-BR

00:00:00.433 --> 00:00:04.600
Vamos ver como ler informações
de um arquivo no Python.

00:00:05.367 --> 00:00:06.633
Para ler de um arquivo,

00:00:06.833 --> 00:00:08.333
primeiro precisamos abri-lo,

00:00:08.700 --> 00:00:12.233
o que podemos fazer
com a função integrada "open".

00:00:12.800 --> 00:00:15.467
Incluímos uma string com o caminho
para o arquivo,

00:00:16.067 --> 00:00:19.333
junto com todos os parâmetros
opcionais que queremos especificar.

00:00:19.833 --> 00:00:22.400
A função "open" retorna
um objeto de arquivo

00:00:22.667 --> 00:00:24.200
que é um objeto Python,

00:00:24.467 --> 00:00:27.300
pelo qual o Python interage
com o próprio arquivo.

00:00:27.867 --> 00:00:31.367
Aqui atribuímos esse objeto
de arquivo à variável "f".

00:00:32.100 --> 00:00:34.067
Este segundo parâmetro
opcional

00:00:34.267 --> 00:00:37.133
especifica o modo
como abrimos o arquivo.

00:00:37.900 --> 00:00:40.567
Neste caso "R"
ou "somente leitura".

00:00:41.067 --> 00:00:44.700
Estamos usando esse modo,
pois só queremos ler do arquivo.

00:00:45.267 --> 00:00:47.567
Não queremos alterar
nenhum conteúdo.

00:00:47.833 --> 00:00:52.000
Esse parâmetro não é realmente
necessário para incluirmos aqui,

00:00:52.533 --> 00:00:56.000
já que o modo padrão é "somente
leitura" quando não especificado.

00:00:56.467 --> 00:00:59.833
Uma vez que abrimos um arquivo
e criamos um objeto de arquivo,

00:01:00.167 --> 00:01:04.000
podemos usar o método de leitura
para acessar o conteúdo do arquivo.

00:01:04.467 --> 00:01:07.767
Esse método de leitura
pega o texto do arquivo

00:01:08.133 --> 00:01:09.733
e o coloca em uma string.

00:01:10.200 --> 00:01:13.400
Aqui atribuímos a string retornada
desse método

00:01:13.733 --> 00:01:15.600
para a variável "file_data".

00:01:16.233 --> 00:01:19.567
Quando terminarmos
com o arquivo "f", devemos fechá-lo.

00:01:20.067 --> 00:01:23.700
Isso libera todos os recursos
do sistema ocupados pelo arquivo.

00:01:24.233 --> 00:01:28.467
Aqui temos um exemplo que usa
esse arquivo, "some_file.txt".

00:01:29.000 --> 00:01:32.667
É importante lembrar de sempre
fechar os arquivos que abrimos

00:01:32.933 --> 00:01:34.867
quando não precisamos mais deles.

00:01:34.901 --> 00:01:37.900
Se abrimos muitos arquivos
sem fechá-los,

00:01:38.200 --> 00:01:40.133
podemos ficar
sem os identificadores de arquivo

00:01:40.167 --> 00:01:42.933
e não poderemos abrir
novos arquivos.

00:01:43.467 --> 00:01:45.800
O número de arquivos
que você pode abrir

00:01:45.834 --> 00:01:47.700
antes de ficar
sem os identificadores

00:01:47.734 --> 00:01:49.967
depende
do seu sistema operacional.

00:01:50.167 --> 00:01:51.300
Para se convencer,

00:01:51.334 --> 00:01:54.133
você pode tentar executar
o seguinte script em Python.

00:01:56.800 --> 00:01:59.300
Em algum momento, para um número
suficientemente grande,

00:01:59.334 --> 00:02:00.900
você receberá um erro.

00:02:00.934 --> 00:02:05.033
Podemos ver que
com 7.164 arquivos abertos,

00:02:05.467 --> 00:02:08.133
o sistema já não tinha
recursos disponíveis

00:02:08.167 --> 00:02:09.933
para abrir novos arquivos.

00:02:10.200 --> 00:02:11.300
Para evitar isso,

00:02:11.334 --> 00:02:14.900
é sempre uma boa ideia fechar
os arquivos que não precisa mais.

00:02:15.100 --> 00:02:16.467
Abrir um objeto de arquivo

00:02:16.501 --> 00:02:19.467
é como abrir uma janela
para procurar um arquivo.

00:02:20.033 --> 00:02:21.233
Para ser mais preciso,

00:02:21.267 --> 00:02:24.100
é uma janela que tem
apenas um caractere de largura

00:02:24.400 --> 00:02:27.367
e sempre começa
no início do arquivo.

00:02:27.767 --> 00:02:31.100
Isso é muito diferente de ler
um livro ou um documento,

00:02:31.134 --> 00:02:34.567
onde você pode olhar várias palavras
ou mesmo páginas de uma só vez.

00:02:34.933 --> 00:02:38.767
Em vez disso, pense no arquivo
como um longo fluxo de caracteres.

00:02:39.167 --> 00:02:41.033
O objeto arquivo
pode olhar apenas

00:02:41.067 --> 00:02:43.067
um caractere ao mesmo tempo
e ordem.

00:02:43.533 --> 00:02:45.433
Além de ler de um arquivo,

00:02:45.633 --> 00:02:47.600
você também pode escrever
em um arquivo,

00:02:47.900 --> 00:02:51.033
caso no qual você mudará
o conteúdo do arquivo.

00:02:51.733 --> 00:02:54.867
Para fazer isso, você deve abrir
o arquivo no modo de escrita.

00:02:55.367 --> 00:02:58.500
Tenha cuidado. Quando você abre
um arquivo no modo de escrita,

00:02:58.900 --> 00:03:02.233
tudo o que ele continha
anteriormente será excluído.

00:03:02.567 --> 00:03:05.400
Se você estiver interessado
em adicionar a um arquivo existente

00:03:05.434 --> 00:03:07.100
sem excluir seu conteúdo,

00:03:07.467 --> 00:03:09.567
você deve usar acrescentar
em vez de escrever.

00:03:09.967 --> 00:03:13.433
Você pode visitar a documentação
do Python para mais informações

00:03:13.633 --> 00:03:16.133
sobre os diferentes modos
de abrir um arquivo.

00:03:16.500 --> 00:03:18.000
Já que estamos
no modo de escrita

00:03:18.034 --> 00:03:20.533
e não quero excluir
o que está neste arquivo,

00:03:20.567 --> 00:03:22.100
vamos usar outro.

00:03:22.733 --> 00:03:26.367
Se o arquivo não existe,
o Python vai criá-lo para você.

00:03:26.900 --> 00:03:29.333
Agora podemos escrever
em um arquivo como este,

00:03:29.800 --> 00:03:32.967
e depois que terminarmos
vamos fechá-lo como bons cidadãos.

00:03:35.833 --> 00:03:38.733
Aqui você pode ver que o Python
criou outro arquivo

00:03:38.767 --> 00:03:40.767
que contém o texto
"Hello World!".

