WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.580
到目前为止 你已经学会导入模块 方法是输入 import 然后是模块名称

00:00:05.580 --> 00:00:08.189
这样就可以用点记法

00:00:08.189 --> 00:00:12.059
使用该模块中的所有对象和模块

00:00:12.060 --> 00:00:16.995
还有适合其他情形的一些其他导入方式

00:00:16.995 --> 00:00:22.005
你可以像这样从模块中导入单个函数或类

00:00:22.004 --> 00:00:24.480
输入 from 模块名称

00:00:24.480 --> 00:00:26.609
import 对象名称

00:00:26.609 --> 00:00:30.975
这样只能访问 collections 模块中的 defaultdict

00:00:30.975 --> 00:00:36.274
可以直接使用 defaultdict 的名称访问它 无需在前面加上模块名称

00:00:36.274 --> 00:00:39.339
尝试访问 collections

00:00:39.340 --> 00:00:43.465
甚至调用 collections.defaultdict() 将出现 NameError

00:00:43.465 --> 00:00:48.130
从模块中导入单个对象意味着只获取所需的对象

00:00:48.130 --> 00:00:52.465
并且不需要使用点记法来访问这些对象

00:00:52.465 --> 00:00:58.675
你可以导入某个模块的多个对象 用英文逗号分隔即可

00:00:58.674 --> 00:01:03.819
导入大型库的多个对象时 经常会用到这种技巧

00:01:03.820 --> 00:01:05.739
正如你之前所看到的

00:01:05.739 --> 00:01:08.364
可以导入一个模块并设定一个不同的名称

00:01:08.364 --> 00:01:11.229
通常更简短 就像这样

00:01:11.230 --> 00:01:14.469
如果模块名称非常长

00:01:14.469 --> 00:01:18.054
或者与相同或相似的名称有冲突

00:01:18.055 --> 00:01:21.220
像这样重命名模块很有用

00:01:21.219 --> 00:01:25.120
请参阅文档中的代码示例

00:01:25.120 --> 00:01:29.185
因为这些代码经常包含标准缩写（如果该模块有缩写的话）

00:01:29.185 --> 00:01:34.750
使用与他人的缩写保持一致的缩写将使你的代码更容易读懂

00:01:34.750 --> 00:01:40.340
例如 multiprocessing 模块的标准缩写是 mp

00:01:40.340 --> 00:01:43.950
你可以结合使用之前的两种语法

00:01:43.950 --> 00:01:47.630
输入某个模块中的某项并更改其名称

00:01:47.629 --> 00:01:49.469
同样 你将只能使用新指定的名称

00:01:49.469 --> 00:01:53.954
直接访问该项目

00:01:53.954 --> 00:01:56.024
不需要点记法

00:01:56.025 --> 00:01:59.145
如果你的命名空间内有多个名称相似

00:01:59.144 --> 00:02:02.729
来自不同软件包的对象 这样会很方便

00:02:02.730 --> 00:02:07.425
例如 或许你需要一个 CSV 阅读器和一个 JSON 阅读器

00:02:07.424 --> 00:02:12.064
你可以从各自的模块中导入这两个阅读器 并设定描述性名称

00:02:12.064 --> 00:02:14.620
你可能在其他人的代码中见过另一种导入方式

00:02:14.620 --> 00:02:18.685
但是你不能使用这种方式

00:02:18.685 --> 00:02:22.539
使用星号将单独导入模块中的每个对象

00:02:22.539 --> 00:02:28.150
并且使你能够通过对象名称直接访问每个对象

00:02:28.150 --> 00:02:32.784
但真正的问题是模块可能包含很多对象

00:02:32.784 --> 00:02:34.834
每个对象都有一个名称

00:02:34.834 --> 00:02:38.020
包含所有这些名称可能会替换你在程序中使用的其他名称

00:02:38.020 --> 00:02:41.695
或被这些名称替换

00:02:41.694 --> 00:02:44.650
import * 使协作者无法找到

00:02:44.650 --> 00:02:48.730
导入对象的定义位置

00:02:48.729 --> 00:02:53.319
阅读器可以搜索函数定义并找到定义

00:02:53.319 --> 00:02:57.594
但是不知道哪个 import * 语句引入了函数

00:02:57.594 --> 00:03:00.219
这些问题会让人很困惑

00:03:00.219 --> 00:03:03.655
请勿使用“from 模块名称 import *”语句

00:03:03.655 --> 00:03:07.599
如果你的确想要使用 random 模块中的所有对象

00:03:07.599 --> 00:03:14.669
请使用标准的 import random 语句 并用点记法访问每个对象

