WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.955
如果你打开终端并输入 python

00:00:02.955 --> 00:00:04.950
应该会看到这样的结果

00:00:04.950 --> 00:00:08.464
这是 python 交互式解释器

00:00:08.464 --> 00:00:11.935
你可以在这里输入命令 直接与 Python 交互

00:00:11.935 --> 00:00:13.394
只需输入代码

00:00:13.394 --> 00:00:17.634
按下 Enter 键 输出将出现在下一行

00:00:17.635 --> 00:00:22.080
可以在此处每次尝试一些 Python 代码

00:00:22.079 --> 00:00:26.234
注意我不需要输出类型就能看到结果

00:00:26.234 --> 00:00:28.875
在解释器中 提示符中的最后一行的值

00:00:28.875 --> 00:00:31.695
将自动输出

00:00:31.695 --> 00:00:35.210
如果有多行需要输出值

00:00:35.210 --> 00:00:36.825
依然需要手动输出

00:00:36.825 --> 00:00:39.495
如果你开始定义函数

00:00:39.494 --> 00:00:45.155
你会发现提示符窗口发生了变化 表示这是一个连续的行

00:00:45.155 --> 00:00:50.024
在定义函数时 你需要自己进行缩进

00:00:50.024 --> 00:00:53.699
解释器的不足之处是修改代码比较麻烦

00:00:53.700 --> 00:00:55.410
如果你在定义该函数时出错了

00:00:55.409 --> 00:00:58.439
或者忘记缩进函数的主体部分

00:00:58.439 --> 00:01:02.085
你无法用鼠标点击光标

00:01:02.085 --> 00:01:05.250
需要使用箭头键来回移动

00:01:05.250 --> 00:01:09.254
转到要修改的行

00:01:09.254 --> 00:01:11.969
有必要了解一些实用的快捷键

00:01:11.969 --> 00:01:15.474
以便快速转到一行的开头或结尾

00:01:15.474 --> 00:01:21.454
注意 我可以引用之前在解释器中定义的任何对象

00:01:21.454 --> 00:01:25.875
一个实用技巧是使用上下箭头键

00:01:25.875 --> 00:01:29.545
在交互式提示符窗口中循环浏览最近的命令

00:01:29.545 --> 00:01:34.599
这样可以重新运行或调整已经尝试的代码

00:01:34.599 --> 00:01:37.114
要退出 python 交互式解释器

00:01:37.114 --> 00:01:41.280
输入命令 exit()

00:01:41.280 --> 00:01:46.379
或者在 Mac 或 Linux 上按下 Ctrl+D 在 Windows 上按下 Ctrl+Z

00:01:46.379 --> 00:01:51.579
实际上有一个比默认 python 解释器更好用的替代工具

00:01:51.579 --> 00:01:55.900
即 IPython 它具有很多其他功能

00:01:55.900 --> 00:01:58.675
例如 Tab 补齐功能 它可以为你补充完整的单词

00:01:58.674 --> 00:02:02.590
或者如果有多个选项 显示有哪些选项

00:02:02.590 --> 00:02:07.570
这样可以查看某个对象有哪些可用的方法

00:02:07.569 --> 00:02:12.715
另一个实用功能是问号 可以用来获取关于特定对象的详细信息

00:02:12.715 --> 00:02:17.400
我可以快速查看这个函数的作用 不用打开文档

00:02:17.400 --> 00:02:20.110
还可以使用感叹号执行系统 shell 命令

00:02:20.110 --> 00:02:26.050
一些常见命令甚至不需要感叹号

00:02:26.050 --> 00:02:29.590
你可以在下面的注释中详细了解 IPython

00:02:29.590 --> 00:02:35.045
解释器非常有用 可以用来实验和测试 python 代码

00:02:35.044 --> 00:02:38.134
并且不止实验作用

00:02:38.134 --> 00:02:40.479
在使用 Python 时 我还会使用解释器

00:02:40.479 --> 00:02:43.000
快速调查或修改文件

