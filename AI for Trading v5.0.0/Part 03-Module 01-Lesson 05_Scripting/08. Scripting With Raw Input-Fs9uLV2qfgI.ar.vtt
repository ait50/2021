WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:03.667
الآن بما أن بيئة برنامجك المحلية
أصبحت مهيّأة بالكامل،

00:00:03.767 --> 00:00:06.033
فقد حان الوقت لتجربة إدخالات مختلفة.

00:00:06.133 --> 00:00:08.500
يمكن للبرامج أن تصبح أكثر تشويقاً

00:00:08.600 --> 00:00:11.667
عندما يكون بإمكانها التفاعل
مع المعلومات الخارجية.

00:00:11.767 --> 00:00:14.900
لنحاول أولاً الحصول
على إدخالات بسيطة من المستخدم.

00:00:15.000 --> 00:00:16.533
إليكم ما أعنيه.

00:00:16.633 --> 00:00:20.000
يطالب هذا البرنامج المستخدم بإدخال اسم،

00:00:20.100 --> 00:00:25.500
ويستقبل ذاك الإدخال على هيئة سلسلة
"string" لاستخدامه في تعليماته البرمجية.

00:00:26.833 --> 00:00:33.067
دالة الإدخال "input" هذه هي ما
يتلقى إدخال المستخدم على هيئة سلسلة،

00:00:33.167 --> 00:00:38.733
وهي تتلقى وسيطة اختيارية
يمكنك استخدامها لعرض رسالة للمستخدم.

00:00:38.833 --> 00:00:42.533
وبما أن دالة "input"
تترجم الإدخال على أنه سلسلة،

00:00:42.633 --> 00:00:53.167
فسيتعين عليك أن تضمّن النتيجة داخل
"int" أو "float" إذا أردت استخدامها كعدد.

00:00:53.267 --> 00:00:59.333
إذا لم تفعل ذلك وحاولت استخدام الإدخال
على أنه عدد، فستظهر لك رسالة خطأ.

00:00:59.433 --> 00:01:03.967
هنا قمت بتضمين "input"
في عبارة "int" وأضفت الرقم 20 إليها.

00:01:04.067 --> 00:01:08.567
لكن ماذا لو أدخل المستخدم عدداً غير صحيح؟

00:01:08.667 --> 00:01:14.367
يمكنك تضمين "Input" في عبارة "float"
للتأكد من قبول الأعداد غير الصحيحة كذلك.

00:01:14.467 --> 00:01:16.200
لكن ماذا لو كنت بحاجة إلى عدد صحيح،

00:01:16.300 --> 00:01:21.033
كأن تضرب بها سلسلة
لتكررها عدداً معيناً من المرات؟

00:01:21.133 --> 00:01:24.533
لن يصلح هذا مع العدد الحر "float"
حتى لو كان عدداً صحيحاً.

00:01:24.633 --> 00:01:27.433
يمكننا في الواقع تضمين "int" هذه
داخل "float"

00:01:27.533 --> 00:01:30.033
ثم تحويلها إلى عدد صحيح "int" هكذا.

00:01:30.133 --> 00:01:31.933
حسناً، هذا مقبول.

00:01:32.033 --> 00:01:36.867
من الواضح أن تخيل ومعالجة
جميع الحالات المحتملة لإدخالات المستخدم

00:01:36.967 --> 00:01:38.900
من الممكن أن يصبح معقداً بسرعة.

00:01:39.000 --> 00:01:41.067
لقد تطرقنا إلى بعض الحالات هنا،

00:01:41.167 --> 00:01:43.300
لكن هنالك الكثير من الحالات الأخرى

00:01:43.400 --> 00:01:46.500
التي لم نتطرق إليها
والتي قد تؤدي إلى المزيد من الأخطاء.

00:01:46.600 --> 00:01:50.033
سنتعلم طريقة أفضل للتعامل
مع هذه السيناريوهات في القسم التالي.

00:01:50.133 --> 00:01:52.167
قبل انتقالنا إلى التمارين،

00:01:52.267 --> 00:01:55.533
إليكم طريقة أخرى لتفسير إدخال المستخدم.

00:01:55.633 --> 00:02:01.267
"eval" هي دالة مضمنة تقوم بتقييم سلسلة
"string" على أنها سطر من لغة "Python".

00:02:01.367 --> 00:02:05.000
يمكنك حتى تضمين متغيرات في السلسلة هكذا.

00:02:05.100 --> 00:02:09.133
دعونا الآن نكتب بعض البرامج النصية المسلية
التي تتفاعل مع إدخالات المستخدم.

