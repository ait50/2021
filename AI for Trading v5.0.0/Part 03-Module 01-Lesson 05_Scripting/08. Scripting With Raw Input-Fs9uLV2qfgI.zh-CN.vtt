WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.765
你已经设置好本地编程环境

00:00:03.765 --> 00:00:06.150
现在该尝试不同的输入了

00:00:06.150 --> 00:00:08.625
当程序能够与外部信息交互时

00:00:08.625 --> 00:00:11.789
会变得非常有趣

00:00:11.789 --> 00:00:15.024
首先 我们尝试获取用户的原始输入

00:00:15.025 --> 00:00:16.663
也就是说

00:00:16.663 --> 00:00:20.115
这个程序会提示用户输入一个名字

00:00:20.114 --> 00:00:25.519
然后将该输入当做字符串用在代码中

00:00:26.850 --> 00:00:33.195
这个函数 input 会接受用户的输入并转换为字符串

00:00:33.195 --> 00:00:38.859
它有一个可选参数 用于指定显示给用户的提示

00:00:38.859 --> 00:00:42.664
因为函数 input 将输入解析为字符串

00:00:42.664 --> 00:00:53.320
所以如果你想将整数或浮点数当做数字 则需要用 int 或 float 封装该数字

00:00:53.320 --> 00:00:59.479
如果不这么做并尝试将输入当做数字 你将遇到错误

00:00:59.479 --> 00:01:04.049
在此示例中 我用 int 封装输入并使其加 20

00:01:04.049 --> 00:01:08.670
如果用户输入非整型数字呢？

00:01:08.670 --> 00:01:14.484
你可以将其封装为 float 以涵盖非整型数字

00:01:14.484 --> 00:01:16.319
如果需要整型呢

00:01:16.319 --> 00:01:21.154
例如使字符串乘以一个整数以便重复一定次数

00:01:21.155 --> 00:01:24.635
使用浮点型就不行 即使该数字是整型数字

00:01:24.635 --> 00:01:27.550
我们实际上可以用 float 封装这个 int

00:01:27.549 --> 00:01:30.170
然后像这样将其转换为 int

00:01:30.170 --> 00:01:32.055
可以了

00:01:32.055 --> 00:01:34.335
很明显 如果要考虑用户输入的每种情形

00:01:34.334 --> 00:01:39.019
代码很快就变得复杂起来

00:01:39.019 --> 00:01:41.099
我们处理了某些情形

00:01:41.099 --> 00:01:46.644
但是还有很多其他情形没有考虑到 并且会导致更多错误

00:01:46.644 --> 00:01:50.174
我们将在下个部分了解处理这些情形的更好方式

00:01:50.174 --> 00:01:52.325
在转到练习部分之前

00:01:52.325 --> 00:01:55.680
再介绍解析用户输入的另一种方式

00:01:55.680 --> 00:02:01.360
eval() 是一个内置函数 并将字符串评估为一行 Python

00:02:01.359 --> 00:02:05.099
甚至可以像这样在字符串中包含变量

00:02:05.099 --> 00:02:09.120
现在我们将编写一些与用户输入交互的有趣脚本

