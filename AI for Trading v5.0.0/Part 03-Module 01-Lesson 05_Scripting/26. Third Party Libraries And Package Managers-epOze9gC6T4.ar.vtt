WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:01.933
مقارنة بمعظم اللغات،

00:00:02.033 --> 00:00:04.500
لدى "Python" مكتبة قياسية ضخمة.

00:00:04.600 --> 00:00:07.667
بل إن الناس يقولون
"إن "Python" ترد جاهزة من المصنع"

00:00:07.767 --> 00:00:12.067
لأنها تأتي مزودة بالمكتبات
التي تحتاج إليها لمباشرة العمل.

00:00:12.167 --> 00:00:16.533
إلا أن المكتبة القياسية لا تحتوي
على كل شيء قد تحتاج إليه.

00:00:16.633 --> 00:00:21.367
فبعض المهام متخصصة للغاية لدرجة تجعل
شملها في المكتبة القياسية غير ممكن.

00:00:21.467 --> 00:00:25.667
لحسن الحط، توجد عشرات الآلاف
مكتبات الجهات الأخرى

00:00:25.767 --> 00:00:27.767
المكتوبة من قبل مطورين مستقلين.

00:00:27.867 --> 00:00:32.800
لكن كيف نحصل على هذه الحزم
إن لم تكن مشمولة في "Python" نفسها؟

00:00:32.900 --> 00:00:35.367
يمكننا تثبيت المكتبات باستخدام "pip"،

00:00:35.467 --> 00:00:38.833
وهو مدير حزم مشمول في "Python 3".

00:00:38.933 --> 00:00:44.200
"pip" هو مدير حزم قياسية لـ"Python"،
لكنه ليس الوحيد.

00:00:44.300 --> 00:00:47.300
أحد البدائل ذات الشعبية هو "Anaconda"

00:00:47.400 --> 00:00:50.433
المصمم تحديداً لأغراض علم البيانات.

00:00:50.533 --> 00:00:54.467
سنستخدم "pip" هنا، وهو معيار عام.

00:00:54.567 --> 00:00:57.367
لنستخدم "pip" لتثبيت هذه المكتبة

00:00:57.467 --> 00:01:01.667
التي تُستخدم للتعامل مع المناطق الزمنية،
وهي مهمة معقدة للغاية.

00:01:01.767 --> 00:01:04.633
سيقوم هذا الأمر بتحميل وتثبيت الحزمة

00:01:04.733 --> 00:01:07.567
لجعلها متاحة للاستيراد في برامجنا.

00:01:07.667 --> 00:01:11.000
بعد التثبيت
يمكننا استيراد حزم مزودة من جهات أخرى

00:01:11.100 --> 00:01:15.333
باستخدام بناء الجمل ذاته المستخدم
للاستيراد من المكتبة القياسية.

00:01:15.433 --> 00:01:17.500
سأستورد في هذا المثال

00:01:17.600 --> 00:01:21.800
حزمة التعامل مع المناطق الزمنية
إلى جانب "datetime" من المكتبة القياسية.

00:01:21.900 --> 00:01:25.167
من المتّبع وضع عبارات الاستيراد

00:01:25.267 --> 00:01:29.700
لمكتبات الجهات الأخرى
بعد عبارة الاستيراد من المكتبة القياسية.

00:01:29.800 --> 00:01:32.667
يخزّن هذا المثال الوقت الحالي

00:01:32.767 --> 00:01:38.800
حسب التوقيت العالمي المتناسق أو الـ"UTC"
في المتغير "now"،

00:01:38.900 --> 00:01:42.267
ومن ثم يحوّل هذا الوقت إلى "IST"

00:01:42.367 --> 00:01:46.633
أي توقيت الهند الرسمي،
ويخزن ذلك في المتغير "ist_now".

00:01:46.733 --> 00:01:51.600
تعتمد برامج "Python" الكبيرة أحياناً
على العديد من حزم الجهات الأخرى.

00:01:51.700 --> 00:01:54.200
ولتسهيل مشاركة تلك البرامج،

00:01:54.300 --> 00:02:00.300
كثيراً ما يقوم المبرمجون بسرد تبعيات
المشروع في ملف يدعى "requierments.txt".

00:02:00.400 --> 00:02:04.700
هذا مثال لملف "requierments.txt".

00:02:04.800 --> 00:02:09.700
يتضمن كل سطر في الملف
اسم حزمة ورقم الإصدار الخاص بها.

00:02:09.800 --> 00:02:14.700
رقم الاصدار اختياري من الناحية العملية،
لكن ينبغي إدراجه عادة.

00:02:14.800 --> 00:02:19.100
قد تطرأ تغييرات دقيقة أو كبيرة
على المكتبات ما بين إصدار وآخر،

00:02:19.200 --> 00:02:22.033
لذا فمن المهم استخدام
اصدارات المكتبة نفسها

00:02:22.133 --> 00:02:25.267
التي استخدمها مصممو البرنامج
عند كتابتهم له.

00:02:25.367 --> 00:02:31.567
يمكنك استخدام "pip" لتثبيت جميع تبعيات
المشروع دفعة واحدة باستخدام هذا الأمر.

