WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.279
在 Python 中 我们可以通过一些方式处理异常

00:00:02.279 --> 00:00:06.504
以避免异常始终使程序崩溃

00:00:06.504 --> 00:00:10.929
我们回顾下这个示例 该示例会接受用户输入

00:00:10.929 --> 00:00:13.038
我们发现 当我们运行这段代码时

00:00:13.038 --> 00:00:17.740
如果用户输入无法转换为整型 就会出错

00:00:17.739 --> 00:00:21.759
我们实际上可以使用 try 语句处理这种错误

00:00:21.760 --> 00:00:22.998
在 try 语句中

00:00:22.998 --> 00:00:26.310
try 块中的代码会首先运行

00:00:26.309 --> 00:00:30.429
如果 Python 在运行这段代码时遇到任何异常

00:00:30.429 --> 00:00:33.323
它将跳到 except 块中的代码

00:00:33.323 --> 00:00:36.460
如果我运行这段代码并输入单词 ten
12
00:00:36,460 --&gt; 00:00:41,475
它会输出“That's not a valid number!”并继续转到代码的剩余部分

00:00:41.475 --> 00:00:44.024
无论程序是否在这个 try 块中遇到异常

00:00:44.024 --> 00:00:47.350
都会继续运行

00:00:47.350 --> 00:00:52.594
例如 如果我在这个 try 语句之后添加一行代码 这行代码会输出尝试输入的值

00:00:52.594 --> 00:00:55.859
你将发现在两种情况下都输出了这个结果

00:00:55.859 --> 00:01:00.344
如果我们希望代码继续运行 直到用户输入有效数字

00:01:00.344 --> 00:01:03.329
我们可以使用 while 循环

00:01:03.329 --> 00:01:07.283
并且当 try 块中的所有代码成功执行后退出循环

00:01:07.284 --> 00:01:12.160
在此示例中 程序不断接受输入 直到我输入有效数字

00:01:12.159 --> 00:01:14.084
如果我输入有效数字

00:01:14.084 --> 00:01:17.844
try 块中的这个语句不会抛出异常

00:01:17.844 --> 00:01:21.465
因此它移到下一行并退出循环

00:01:21.465 --> 00:01:23.549
但是 因为它退出了循环

00:01:23.549 --> 00:01:25.670
因此从未输出尝试输入的值

00:01:25.670 --> 00:01:30.150
如果我们希望无论是什么情况 都运行 try 语句之后的最后一行代码

00:01:30.150 --> 00:01:33.830
可以使用该语句的一个可选组件 即 finally 块

00:01:33.829 --> 00:01:37.590
现在 当程序在任何条件下退出这个 try 语句

00:01:37.590 --> 00:01:41.540
将会输出 Attempted Input

00:01:41.540 --> 00:01:43.215
无论是有 break 语句 return 语句

00:01:43.215 --> 00:01:48.150
还是出现导致程序在 except 块中崩溃的错误

00:01:48.150 --> 00:01:51.405
你可以在下面的注释中了解详情

00:01:51.405 --> 00:01:55.765
finally 块适合清理代码中的操作

00:01:55.765 --> 00:01:58.409
在这节课的稍后阶段 当我们尝试在 try 语句中打开一个文件时

00:01:58.409 --> 00:02:01.310
我们将使用 finally 块关闭该文件

