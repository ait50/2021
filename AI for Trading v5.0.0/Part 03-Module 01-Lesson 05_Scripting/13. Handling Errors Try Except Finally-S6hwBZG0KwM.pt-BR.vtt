WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.200
No Python, há maneiras de lidar
com exceções

00:00:03.234 --> 00:00:06.500
para que nem sempre causem falhas
no programa quando ocorrerem.

00:00:06.534 --> 00:00:10.567
Vamos voltar a este exemplo
que recebeu uma entrada do usuário.

00:00:11.067 --> 00:00:13.033
Vimos isso quando executamos
esse código,

00:00:13.233 --> 00:00:15.900
ocorreu um erro
quando o usuário introduziu algo

00:00:15.934 --> 00:00:17.867
que não pode ser
convertido em um "Int".

00:00:17.901 --> 00:00:21.200
Podemos lidar com esse erro
usando a instrução "try".

00:00:21.833 --> 00:00:23.100
Na instrução "try",

00:00:23.134 --> 00:00:26.367
o código dentro do bloco "try"
é executado pela primeira vez

00:00:26.600 --> 00:00:28.900
e se o Python executar
qualquer exceção,

00:00:28.934 --> 00:00:30.667
enquanto estiver executando
esse bloco,

00:00:30.701 --> 00:00:33.300
ele irá pular para o código
no bloco "Except".

00:00:33.334 --> 00:00:36.600
Aqui, se eu executar este código
e digitar a palavra "dez",

00:00:36.867 --> 00:00:39.133
ele exibe
"esse não é um número válido"

00:00:39.167 --> 00:00:41.100
e vai
para o resto do código.

00:00:41.567 --> 00:00:43.233
O programa continua
em execução

00:00:43.267 --> 00:00:47.267
ou não é executado em uma exceção
durante o bloco "try".

00:00:47.533 --> 00:00:51.067
Por exemplo, se tenho uma linha
após essa instrução "try"

00:00:51.101 --> 00:00:52.867
que exibe a tentativa de entrada,

00:00:52.901 --> 00:00:55.633
você verá isso exibido
nos dois casos.

00:00:56.067 --> 00:00:58.000
Se queremos que este código
continue funcionando

00:00:58.034 --> 00:01:00.433
até o usuário inserir
um número válido,

00:01:00.700 --> 00:01:03.100
podemos usar um loop "while"
e pausar o loop

00:01:03.134 --> 00:01:06.567
se todo o código no bloco "try"
for executado com êxito.

00:01:07.300 --> 00:01:10.033
Aqui, o programa continua recebendo
uma entrada

00:01:10.067 --> 00:01:12.200
até eu inserir
um número válido.

00:01:12.234 --> 00:01:14.000
Se eu inserir
um número válido,

00:01:14.567 --> 00:01:17.767
esta instrução no bloco "try"
não cria uma exceção.

00:01:18.100 --> 00:01:21.367
Então se move para a próxima linha
onde se separa do loop.

00:01:21.633 --> 00:01:23.533
No entanto,
uma vez que pausamos o loop,

00:01:23.567 --> 00:01:25.633
ele nunca exibe
a tentativa de entrada.

00:01:25.667 --> 00:01:27.233
Se quisermos
que esta última linha

00:01:27.267 --> 00:01:30.500
sempre seja executada
após a instrução "try",

00:01:30.534 --> 00:01:33.867
existe um componente opcional
da instrução "try" que podemos usar.

00:01:33.901 --> 00:01:37.433
Por fim, a tentativa de entrada
será exibida

00:01:37.467 --> 00:01:39.900
quando o programa estiver saindo
desta instrução "try"

00:01:39.934 --> 00:01:43.267
em qualquer condição,
se há uma instrução de pausa,

00:01:43.301 --> 00:01:46.833
instrução de retorno ou erro
que faça o programa falhar

00:01:46.867 --> 00:01:48.433
dentro do bloco "except".

00:01:48.467 --> 00:01:51.033
Você pode ler mais sobre isso
nas notas.

00:01:51.733 --> 00:01:55.300
O último bloco é útil
para limpar ações no seu código.

00:01:55.900 --> 00:01:57.133
Mais à frente,

00:01:57.167 --> 00:01:59.000
usaremos isso
para fechar um arquivo

00:01:59.034 --> 00:02:01.500
depois de tentar abrir um
na instrução "try".

