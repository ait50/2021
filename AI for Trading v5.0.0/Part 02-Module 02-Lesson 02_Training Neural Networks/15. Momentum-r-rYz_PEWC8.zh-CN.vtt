WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.870
这是另一个解决局部最低点的问题

00:00:03.870 --> 00:00:07.230
方法是用动量和决心快速行动

00:00:07.230 --> 00:00:10.618
如果在局部最低点卡住

00:00:10.618 --> 00:00:16.559
可以翻过驼峰找到更低的最低点

00:00:16.559 --> 00:00:20.310
我们看看正常的梯度下降流程

00:00:20.309 --> 00:00:23.728
它可以使我们一直抵达这里 没问题

00:00:23.730 --> 00:00:29.065
现在我们想翻过这座山坡 但是现在梯度为 0 或太小

00:00:29.065 --> 00:00:31.454
所以不会提供好的步长

00:00:31.454 --> 00:00:33.270
如果我们看看之前的步长呢？

00:00:33.270 --> 00:00:37.109
例如前几个步长的平均值

00:00:37.109 --> 00:00:39.270
如果取平均值

00:00:39.270 --> 00:00:43.435
形成的方向将促使我们前进到山坡上

00:00:43.435 --> 00:00:46.530
平均值似乎有点夸张 因为 10 个步长前采取的步长

00:00:46.530 --> 00:00:50.484
与上一步采取的步长关系不大

00:00:50.484 --> 00:00:52.170
例如可以选择

00:00:52.170 --> 00:00:54.394
前三个或四个步长的平均值

00:00:54.393 --> 00:00:57.509
甚至更好的是 我们可以衡量每步

00:00:57.509 --> 00:01:02.420
上一步作用最大 再前面的作用越来越小

00:01:02.420 --> 00:01:05.849
这时候就要引入动量这一概念

00:01:05.849 --> 00:01:10.260
动量是在 0 到 1 之间的常量 β

00:01:10.260 --> 00:01:16.230
它与步长的关系如下：上一步乘以 1

00:01:16.230 --> 00:01:20.140
再上一步乘以 β

00:01:20.140 --> 00:01:22.849
再上上步乘以 β平方

00:01:22.849 --> 00:01:25.950
再前面的乘以 β立方 等等

00:01:25.950 --> 00:01:28.530
这样的话 很久之前发生的步长

00:01:28.530 --> 00:01:32.079
比近期发生的步长作用要小

00:01:32.078 --> 00:01:34.393
可以看到这样可以让我们翻过驼峰

00:01:34.394 --> 00:01:37.454
但是 当我们抵达全局最低点后

00:01:37.453 --> 00:01:41.722
依然会让我们超过一点点 但是程度不大

00:01:41.724 --> 00:01:43.847
看起来似乎比较模糊

00:01:43.846 --> 00:01:46.668
但是使用动量的算法在实际中似乎运作的很好

