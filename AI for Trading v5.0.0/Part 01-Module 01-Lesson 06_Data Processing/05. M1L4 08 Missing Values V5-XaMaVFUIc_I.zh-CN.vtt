WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.910
到目前为止 我们都将股价当做连续的时间序列数据

00:00:05.910 --> 00:00:13.169
例如 股票的结束日数据每天各占一行 实际上是这样吗？

00:00:13.169 --> 00:00:18.314
这是 2017 年 5 月的 Facebook 股价走势图

00:00:18.315 --> 00:00:21.750
可以看到 每五个样本凑成一块

00:00:21.750 --> 00:00:26.500
然后有一个缺口 然后又是一个数据块 等等

00:00:26.500 --> 00:00:29.690
我们看看这个月的日历

00:00:29.690 --> 00:00:33.585
每个数据块都对应工作日

00:00:33.585 --> 00:00:38.509
这些缺口对应的是收盘后的周末

00:00:38.509 --> 00:00:42.594
两个月之后是 7 月 出现相似的规律

00:00:42.594 --> 00:00:44.094
但在开头

00:00:44.094 --> 00:00:46.250
似乎缺少了一个日期

00:00:46.250 --> 00:00:49.884
这一天是美国的独立日

00:00:49.884 --> 00:00:52.684
所以数据缺口可能是因为周末

00:00:52.685 --> 00:00:56.620
节假日或其他导致市场关闭的日期

00:00:56.619 --> 00:00:59.524
你可能会疑问 为何这很重要？

00:00:59.524 --> 00:01:02.879
毕竟如果我们忽略这些缺少数据的日期

00:01:02.880 --> 00:01:06.530
从交易天数的角度来说 数据依然是连续的

00:01:06.530 --> 00:01:09.460
如果你将价格数据看做简单的序列

00:01:09.459 --> 00:01:12.524
并忽略时间戳

00:01:12.525 --> 00:01:15.070
那么不需要担心这些缺口

00:01:15.069 --> 00:01:17.619
假设你要计算每日回报

00:01:17.620 --> 00:01:22.320
用每天的价格减去前一天的价格

00:01:22.319 --> 00:01:25.484
即前一个交易日

00:01:25.484 --> 00:01:28.179
如果追求更稳健的交易方式

00:01:28.180 --> 00:01:31.125
最好不要忽略缺少的日期

00:01:31.125 --> 00:01:33.105
即使市场关闭了

00:01:33.105 --> 00:01:38.215
其他事件可能会影响到开盘时的股价

00:01:38.215 --> 00:01:41.490
例如 企业宣告 新闻报道

00:01:41.489 --> 00:01:43.439
地理政治事件 自然灾害

00:01:43.439 --> 00:01:46.325
任何一个事件都可能会影响股价

00:01:46.325 --> 00:01:49.189
两个交易日之间的期限越长

00:01:49.189 --> 00:01:51.679
越有可能发生突发事件

00:01:51.680 --> 00:01:55.250
所以 你可以通过除以任何两个

00:01:55.250 --> 00:01:59.094
样本之间的实际天数 来标准化回报

00:01:59.094 --> 00:02:01.685
这种做法在某些应用中可行

00:02:01.685 --> 00:02:05.045
但是可能会降低实际上很巨大的差异

00:02:05.045 --> 00:02:09.110
或者你可以尝试在做出交易决策时

00:02:09.110 --> 00:02:13.510
直接利用这些样本之间不规则缺口的信息

00:02:13.509 --> 00:02:16.965
小结下

00:02:16.965 --> 00:02:22.248
周末 节假日和其他事件可能会导致市场在某些日期关闭

00:02:22.248 --> 00:02:25.430
这些日期在股市数据中可能会缺失

00:02:25.430 --> 00:02:27.610
你可以选择忽略这些缺口

00:02:27.610 --> 00:02:32.885
标准化它们或根据需要去处理它们

00:02:32.884 --> 00:02:38.269
需要注意的另一种缺口是

00:02:38.270 --> 00:02:43.390
收盘和第二天开盘之间的时间

00:02:43.389 --> 00:02:49.429
市场通常允许在开盘前和收盘后进行交易

00:02:49.430 --> 00:02:52.004
少数交易者会在这段时间交易

00:02:52.004 --> 00:02:53.810
所以成交量很低

00:02:53.810 --> 00:02:57.310
但是这些交易依然能影响股价

00:02:57.310 --> 00:03:02.240
此外 当股票在多个证交所上市时

00:03:02.240 --> 00:03:08.180
它的股价可能会在另一个时间在另一个证交所发生变化

00:03:08.180 --> 00:03:10.849
当某个市场开盘时

00:03:10.848 --> 00:03:12.889
该股票的价格可能与

00:03:12.889 --> 00:03:16.539
该市场在前一天收盘时的价格不一样

00:03:16.539 --> 00:03:20.239
同样 根据你使用价格信息的方式

00:03:20.240 --> 00:03:23.105
你可能不需要关注这些差异

00:03:23.104 --> 00:03:28.104
但是这些差异可以提供额外的交易线索

00:03:28.104 --> 00:03:31.699
上市和合并等重大企业行为

00:03:31.699 --> 00:03:35.869
会带来更明显的缺值情况

00:03:35.870 --> 00:03:42.344
例如 假设你要分析从 2000 年到 2016 年的股票数据

00:03:42.344 --> 00:03:45.340
Google 从2004 年才上市

00:03:45.340 --> 00:03:48.675
之前还没有这支股票

00:03:48.675 --> 00:03:50.385
该怎么办？

00:03:50.384 --> 00:03:53.299
如果必须要有一个值

00:03:53.300 --> 00:03:57.740
你可以使用相同的 OHLC 价

00:03:57.740 --> 00:04:02.570
回填从 Google 上市日期到分析开始日期

00:04:02.569 --> 00:04:04.379
之间的OHLC

00:04:04.379 --> 00:04:07.560
由于这些日期没有发生实际交易

00:04:07.560 --> 00:04:09.784
所以可以将成交量设为 0

00:04:09.784 --> 00:04:11.859
但是可能没必要这么做

00:04:11.860 --> 00:04:13.430
并且有误导性

00:04:13.430 --> 00:04:18.079
你还可以保留一个有效的股票代码列表

00:04:18.079 --> 00:04:23.814
形成完整的股票历史记录 这个列表每天都有变化

00:04:23.814 --> 00:04:29.569
更极端的情况是企业从证交所退市

00:04:29.569 --> 00:04:35.680
原因可能是破产了或被一家私有投资者完全收购了

00:04:35.680 --> 00:04:41.240
戴尔在 2013 年通过买回它的所有公开股票变成私有公司

00:04:41.240 --> 00:04:45.805
从此以后 再也没有任何戴尔股票的记录了

00:04:45.805 --> 00:04:50.275
如果你在此日期持有戴尔股票 该股票将变成私有

00:04:50.274 --> 00:04:52.554
并不是说你失去了投资金额

00:04:52.555 --> 00:04:55.540
戴尔会支付你的股份

00:04:55.540 --> 00:04:59.300
所以认为价格降到 0 是不对的

00:04:59.300 --> 00:05:03.110
一种修正方法是用最后一个已知股价填充

00:05:03.110 --> 00:05:07.220
一直到你的分析期限结束的日期

00:05:07.220 --> 00:05:10.819
或者 如果你模拟这段期限的交易

00:05:10.819 --> 00:05:13.699
你可以强制在该日期卖出股票

00:05:13.699 --> 00:05:17.474
并在之后的期限中从股票市场删除戴尔

00:05:17.475 --> 00:05:20.510
最终如何处理这些有误导性的值

00:05:20.509 --> 00:05:23.829
完全取决于你将如何处理数据

00:05:23.829 --> 00:05:25.519
但是完全忽略它们

00:05:25.519 --> 00:05:27.529
可能不是正确的选择

