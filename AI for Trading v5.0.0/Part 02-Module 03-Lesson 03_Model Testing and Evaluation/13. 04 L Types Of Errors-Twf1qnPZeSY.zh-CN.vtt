WEBVTT
Kind: captions
Language: zh-CN

00:00:00.150 --> 00:00:01.690
我们来聊聊实际生活的例子

00:00:01.690 --> 00:00:04.445
有时我们在生活中会犯两种错误

00:00:04.445 --> 00:00:08.019
第一种是用苍蝇拍来杀死哥斯拉龙

00:00:08.019 --> 00:00:09.959
这是非常愚蠢的错误

00:00:09.960 --> 00:00:13.260
它过度简化了我们要解决的问题

00:00:13.259 --> 00:00:15.960
另一种是用火箭筒杀死苍蝇

00:00:15.960 --> 00:00:17.269
这也非常不实际

00:00:17.269 --> 00:00:20.579
它过度复杂化了我们要解决的问题

00:00:20.579 --> 00:00:25.139
在机器学习中 我们也非常容易犯这两种错误

00:00:25.140 --> 00:00:28.929
当我们过度简化问题时 我们称之为欠拟合

00:00:28.929 --> 00:00:33.090
过度复杂化时 称之为过拟合

00:00:33.090 --> 00:00:36.175
我们更详细地认识一下过拟合和欠拟合

00:00:36.174 --> 00:00:38.484
先看这样一个分类问题

00:00:38.484 --> 00:00:42.015
我们需要找到一个属性 将左边的集合

00:00:42.015 --> 00:00:43.994
与右边的集合分开

00:00:43.994 --> 00:00:45.744
看起来解决方法很简单

00:00:45.744 --> 00:00:47.784
右边的集合元素都是狗

00:00:47.784 --> 00:00:51.214
左边的集合元素都不是

00:00:51.215 --> 00:00:53.015
如果我们过度简化它会怎样？

00:00:53.015 --> 00:00:56.314
假如我们说右边的都是动物

00:00:56.314 --> 00:00:58.724
而左边的都不是动物

00:00:58.725 --> 00:01:00.770
那么我们的模型就太简单了

00:01:00.770 --> 00:01:04.542
而且可以看出我们已在训练集中犯了一个错误

00:01:04.542 --> 00:01:07.433
因为猫被错误地分类到了左边

00:01:07.433 --> 00:01:10.566
这种过度简化成为欠拟合

00:01:10.566 --> 00:01:14.920
它的一个特点是训练集的拟合不够好

00:01:14.920 --> 00:01:18.519
我们称这种类型为偏差引起的误差

00:01:18.519 --> 00:01:21.629
我们会犯的另一个错误是过度复杂化模型

00:01:21.629 --> 00:01:25.479
这次我们不将右边的集合描述为狗

00:01:25.480 --> 00:01:28.920
而是摇着尾巴的狗 这看起来在训练集中

00:01:28.920 --> 00:01:33.439
的拟合效果会很好 但直觉告诉我们这样做不对

00:01:33.439 --> 00:01:35.890
在出现一个新实例时你就明白了

00:01:35.890 --> 00:01:38.469
例如这里这只狗

00:01:38.469 --> 00:01:42.129
逻辑告诉我们这只狗应该属于右边的集合

00:01:42.129 --> 00:01:44.381
但由于这只狗没有摇尾巴

00:01:44.381 --> 00:01:47.868
此模型会错误地将它分类到左边的集合

00:01:47.868 --> 00:01:52.920
此错误称为过拟合 也就是说此模型太过具体

00:01:52.920 --> 00:01:57.070
它的一个特点是它在训练集中表现良好

00:01:57.069 --> 00:02:00.639
但它趋向于记住而不是学习数据的特点

00:02:00.640 --> 00:02:02.980
因此在测试集上的表现不好

00:02:02.980 --> 00:02:05.890
我们称这种错误为方差引起的误差

00:02:05.890 --> 00:02:07.079
从技术层面来说

00:02:07.079 --> 00:02:10.210
在回归示例中 可以看到下面这样的欠拟合

00:02:10.210 --> 00:02:12.170
看看左边的点

00:02:12.169 --> 00:02:13.659
看起来这些点的正确模型

00:02:13.659 --> 00:02:16.310
是像这样的二次方程

00:02:16.310 --> 00:02:19.259
我们可以尝试将它拟合成一条直线 但效果不太好

00:02:19.259 --> 00:02:21.019
因为它太简单了

00:02:21.020 --> 00:02:23.540
此模型在训练集上的效果不好

00:02:23.539 --> 00:02:25.849
这是欠拟合的示例

00:02:25.849 --> 00:02:29.469
那么 如果我们尝试拟合一个大角度的多项式呢

00:02:29.469 --> 00:02:30.349
就像这一个？

00:02:30.349 --> 00:02:34.289
这个多项式在训练集上的表现很好 完美拟合了点

00:02:34.289 --> 00:02:36.979
但它似乎并非最佳答案

00:02:36.979 --> 00:02:40.679
它记住了训练集 但未能找到训练集的

00:02:40.680 --> 00:02:43.819
良好属性 以很好地泛化到测试集

00:02:43.819 --> 00:02:46.550
所以即使它在训练集上的表现很好

00:02:46.550 --> 00:02:48.795
但在测试集上的效果会很差

00:02:48.795 --> 00:02:50.919
这是过拟合的例子

00:02:50.919 --> 00:02:53.459
我们也会在分类模型中看到欠拟合

00:02:53.460 --> 00:02:53.820
在这里 红色点

00:02:53.819 --> 00:02:57.989
和蓝色点似乎很好地被这条二次曲线分隔开了

00:02:57.990 --> 00:03:01.320
如果我们用直线的话 此模型不能正确地拟合点

00:03:01.319 --> 00:03:02.668
会出现欠拟合

00:03:02.668 --> 00:03:05.830
如果我们尝试拟合到非常复杂的曲线

00:03:05.830 --> 00:03:08.570
最终会得到一个太过复杂的模型

00:03:08.569 --> 00:03:11.099
它在测试集上的效果会很差

00:03:11.099 --> 00:03:13.340
会出现过拟合

00:03:13.340 --> 00:03:14.700
那么我们简单总结一下

00:03:14.699 --> 00:03:18.539
一方面 我们获得高偏差误差或欠拟合

00:03:18.539 --> 00:03:20.329
这里我们过度简化了问题

00:03:20.330 --> 00:03:23.890
我们的模型太简单 无法捕捉到数据的复杂性

00:03:23.889 --> 00:03:28.509
另一方面 我们获得高方差误差或过拟合

00:03:28.509 --> 00:03:32.850
我们在这里过度复杂化了问题 我们的模型太复杂

00:03:32.850 --> 00:03:35.937
以至于记住了数据 而非学习了它

00:03:35.937 --> 00:03:38.401
而中间的是最佳模型

00:03:38.401 --> 00:03:40.022
在训练数据方面

00:03:40.022 --> 00:03:43.849
高偏差模型因为太简单而欠拟合

00:03:43.849 --> 00:03:46.840
高方差模型趋向于完美拟合训练数据

00:03:46.840 --> 00:03:48.259
因为它完全匹配了每个点

00:03:48.259 --> 00:03:51.219
最终 最佳模型对训练数据的拟合刚刚好

00:03:51.219 --> 00:03:53.250
然后 在测试数据方面

00:03:53.250 --> 00:03:56.050
高偏差模型的效果会很差

00:03:56.050 --> 00:03:58.027
高方差模型也是

00:03:58.026 --> 00:04:00.829
而最佳模型在测试数据上的效果较好

