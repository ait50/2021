WEBVTT
Kind: captions
Language: pt-BR

00:00:00.143 --> 00:00:01.689
No último vídeo,

00:00:01.722 --> 00:00:05.115
criamos este Pandas Series
de uma lista de mercado.

00:00:05.148 --> 00:00:09.116
Agora, como acessamos
ou modificamos seus elementos?

00:00:09.149 --> 00:00:11.990
Uma grande vantagem
do objeto do Series

00:00:12.023 --> 00:00:14.239
é que ele nos permite
acessar dados

00:00:14.272 --> 00:00:15.903
de múltiplas maneiras.

00:00:15.936 --> 00:00:19.553
Uma maneira é acessar elementos
com seus rótulos de índice.

00:00:19.586 --> 00:00:22.282
Isto acessa
a quantidade de ovos

00:00:22.315 --> 00:00:25.444
usando o rótulo "ovos"
entre colchetes.

00:00:25.477 --> 00:00:27.453
Podemos conseguir
múltiplos elementos

00:00:27.486 --> 00:00:30.245
fornecendo uma lista
de rótulos de índice.

00:00:30.278 --> 00:00:32.470
Outra maneira
de acessar elementos

00:00:32.503 --> 00:00:34.287
é por índices numéricos,

00:00:34.320 --> 00:00:38.514
bem parecido com o acesso
a elementos em arrays NumPy.

00:00:38.547 --> 00:00:41.090
Aqui, conseguimos
a quantidade do primeiro item,

00:00:41.123 --> 00:00:43.988
ovos, usando 0 como índice.

00:00:44.021 --> 00:00:45.964
Agora vamos pegar
o último elemento

00:00:45.997 --> 00:00:47.934
com o índice -1.

00:00:47.967 --> 00:00:50.430
E, novamente,
podemos pegar múltiplos itens

00:00:50.463 --> 00:00:53.296
usando uma lista
de índices numéricos.

00:00:53.527 --> 00:00:57.378
Para remover qualquer
ambiguidade de referência

00:00:57.411 --> 00:01:01.126
em um rótulo de índice
ou índice numérico,

00:01:01.159 --> 00:01:05.576
o Pandas Series tem
dois atributos, loc e iloc,

00:01:05.609 --> 00:01:08.136
para indicar explicitamente
o que queremos dizer.

00:01:08.169 --> 00:01:11.242
O atributo loc
representa um local

00:01:11.275 --> 00:01:13.107
e é usado para indicar
explicitamente

00:01:13.140 --> 00:01:15.868
que estamos usando
um índice rotulado.

00:01:15.901 --> 00:01:16.929
De forma parecida,

00:01:16.962 --> 00:01:20.863
o atributo iloc representa
um local integer

00:01:20.896 --> 00:01:23.255
e é usado para indicar
explicitamente

00:01:23.288 --> 00:01:25.968
que estamos usando
um índice numérico.

00:01:26.001 --> 00:01:29.425
O Pandas Series também é mutável
como os arrays NumPy,

00:01:29.458 --> 00:01:32.611
ou seja, podemos mudar
os elementos de um Series

00:01:32.644 --> 00:01:34.820
depois de ela
ter sido criada.

00:01:34.853 --> 00:01:37.429
Vamos mudar o número de ovos
que precisamos comprar

00:01:37.462 --> 00:01:39.094
na lista de mercado.

00:01:39.127 --> 00:01:41.063
Vamos ver a lista de mercado
novamente.

00:01:41.096 --> 00:01:44.601
Podemos mudar
o número de ovos de 30 para 2

00:01:44.634 --> 00:01:47.379
reatribuindo
o elemento assim.

00:01:47.412 --> 00:01:51.756
Agora podemos ver que os dados
para os ovos foram modificados.

00:01:51.789 --> 00:01:54.750
Podemos também apagar
itens de um Pandas

00:01:54.783 --> 00:01:56.999
usando o método drop.

00:01:57.032 --> 00:01:58.904
Este método remove
um elemento

00:01:58.937 --> 00:02:02.162
com o rótulo dado
do Pandas Series.

00:02:02.195 --> 00:02:05.162
Como pode ver,
"maçãs" não está mais incluída

00:02:05.195 --> 00:02:07.667
no Series retornado
por este método.

00:02:07.700 --> 00:02:08.788
No entanto,

00:02:08.821 --> 00:02:12.142
isto deixa os elementos
do Series deslocados.

00:02:12.175 --> 00:02:16.311
Ou seja, isto aqui retornou
apenas o Series modificado

00:02:16.344 --> 00:02:20.505
e não mudou a original,
como pode ver aqui.

00:02:20.538 --> 00:02:24.267
Podemos organizar isso
e mudar o Series original

00:02:24.300 --> 00:02:27.373
configurando o parâmetro inplace
como verdadeiro.

00:02:27.406 --> 00:02:31.366
Agora, veja que o método drop
modificou o Series em si

00:02:31.399 --> 00:02:34.031
em vez de retornar outro Series
com a modificação.

