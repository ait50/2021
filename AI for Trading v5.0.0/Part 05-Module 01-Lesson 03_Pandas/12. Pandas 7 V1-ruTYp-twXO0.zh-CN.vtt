WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.190
处理数据时 你很可能要用不同来源的数据库

00:00:05.190 --> 00:00:10.765
Pandas 允许我们把不同格式的数据库加载到 DataFrame 中

00:00:10.765 --> 00:00:17.955
最常见的数据存储格式是 CSV 也即逗号分隔型取值格式

00:00:17.954 --> 00:00:23.659
我们可以用函数 read_csv 把 CSV 文件加载到 DataFrame 中

00:00:23.660 --> 00:00:27.079
我们来把谷歌股票数据加载到 DataFrame 中

00:00:27.079 --> 00:00:33.320
该文件源自雅虎财经 包含了 2004 年 8 月 19 日

00:00:33.320 --> 00:00:37.230
到 2017 年 10 月 13 日的谷歌股票数据

00:00:37.229 --> 00:00:42.879
这个 DataFrame 有 3313 行 7 列

00:00:42.880 --> 00:00:44.650
我们来看里面的股票数据

00:00:44.649 --> 00:00:48.299
这是个相当大的数据集

00:00:48.299 --> 00:00:52.184
Pandas 自动给 DataFrame 添加了数字行索引

00:00:52.185 --> 00:00:57.920
并用 CSV 文件里的名称来给列标签赋值

00:00:57.920 --> 00:01:00.880
处理像这样的大数据集时

00:01:00.880 --> 00:01:03.350
不要一头扎进数据集里

00:01:03.350 --> 00:01:06.670
先看看前几行数据会很有帮助

00:01:06.670 --> 00:01:10.600
我们可以用方法 head 来观察前五行

00:01:10.599 --> 00:01:15.659
也可以用方法 tail 来观察最后五行数据

00:01:15.659 --> 00:01:18.629
这两个方法都接受一个整数参数

00:01:18.629 --> 00:01:22.039
方便你指定要返回的行数

00:01:22.040 --> 00:01:25.470
比如 我可以像这样访问最后八行

00:01:25.469 --> 00:01:27.594
或像这样访问前两行

00:01:27.594 --> 00:01:32.304
我们快速检查一下数据集里是否有 NaN 值

00:01:32.305 --> 00:01:36.090
为此 我们可以依次调用方法 isnull 和 any

00:01:36.090 --> 00:01:40.445
检查有没有哪一列具有 NaN 值

00:01:40.444 --> 00:01:43.064
从这里可以看出 没有缺失数据

00:01:43.064 --> 00:01:45.204
在处理大数据集时

00:01:45.204 --> 00:01:48.750
先获取数据集的统计信息会很有帮助

00:01:48.750 --> 00:01:52.150
Pandas 提供的方法 descirbe

00:01:52.150 --> 00:01:55.655
可以返回 DataFrame 各列的描述性统计数据

00:01:55.655 --> 00:02:00.575
需要的话 我们也可以像这样只对一列应用方法 describe

00:02:00.575 --> 00:02:04.010
同理 你也可以用 Pandas 提供的各种统计函数

00:02:04.010 --> 00:02:07.815
查看任一种统计数据

00:02:07.814 --> 00:02:09.449
我们来看些例子

00:02:09.449 --> 00:02:12.609
这里给出了各列的最大值

00:02:12.610 --> 00:02:15.195
这里给出了各列的平均值

00:02:15.194 --> 00:02:18.704
这里给出了某一列的最小值

00:02:18.705 --> 00:02:22.500
还有一项重要的统计数据 即数据相关性

00:02:22.500 --> 00:02:26.879
我们可以用方法 corr 来获取各列的相关性

00:02:26.879 --> 00:02:29.599
最后 我们来看看方法 groupby

00:02:29.599 --> 00:02:33.814
该方法可以分组数据 从而提炼出多种信息

00:02:33.814 --> 00:02:35.729
接下来

00:02:35.729 --> 00:02:38.764
我们要加载一个虚构公司的数据

00:02:38.764 --> 00:02:44.229
数据包含了公司 1990 到 1992 年的信息

00:02:44.229 --> 00:02:47.454
每一年都记录着员工姓名、

00:02:47.455 --> 00:02:49.300
员工所在部门、

00:02:49.300 --> 00:02:51.790
员工年龄以及年薪

00:02:51.789 --> 00:02:55.419
现在我们用方法 groupby 来提炼一些信息

00:02:55.419 --> 00:02:59.699
我们来计算公司每年的薪资支出

00:02:59.699 --> 00:03:03.419
为此 我们可以按年份对数据进行分组

00:03:03.419 --> 00:03:07.289
然后用方法 sum 把所有员工的薪资加起来

00:03:07.289 --> 00:03:11.909
该公司 1990 年的薪资支出为 15 万美元

00:03:11.909 --> 00:03:17.835
1991 年的支出为 16.2 万美元 1992 年的支出为 17.4 万美元

00:03:17.835 --> 00:03:20.795
如果想知道每年的平均薪资

00:03:20.794 --> 00:03:25.809
可以把上一步的方法 sum 改成 mean

00:03:25.810 --> 00:03:31.640
现在我们来研究各员工五年的总薪资

00:03:31.639 --> 00:03:37.504
为此 我们可以按姓名对数据进行分组 然后把各年的薪资加起来

00:03:37.504 --> 00:03:42.329
现在我们来看各部门每年的薪资分布

00:03:42.330 --> 00:03:45.750
为此 我们可以按年份和部门对数据进行分组

00:03:45.750 --> 00:03:49.020
然后统计各组的薪资总和

00:03:49.020 --> 00:03:51.105
我们可以看到

00:03:51.104 --> 00:03:55.019
1990 年 行政部薪资支出为 5.5 万美元

00:03:55.020 --> 00:03:59.325
人力资源部的支出为 5 万美元 研发部的支出为 4.8 万美元

00:03:59.324 --> 00:04:06.129
1992 年 行政部的薪资支出为 12.2 万美元 以此类推

