WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.560
上一个视频中

00:00:01.560 --> 00:00:04.935
我们为杂货表创建了这么个 Pandas 序列

00:00:04.934 --> 00:00:08.875
那我们要如何访问或修改其中的元素呢？

00:00:08.875 --> 00:00:11.970
序列对象的一大优势在于

00:00:11.970 --> 00:00:15.570
允许我们以多种方法访问数据

00:00:15.570 --> 00:00:19.344
比如借助索引标签来访问元素

00:00:19.344 --> 00:00:25.125
这里在方括号中填写标签 eggs 就能访问鸡蛋数量了

00:00:25.125 --> 00:00:30.109
要访问多个元素 只需提供一个索引标签列表即可

00:00:30.109 --> 00:00:34.104
我们也可以用数字索引来访问元素

00:00:34.104 --> 00:00:38.074
这与我们访问 NumPy 数组元素的方法十分类似

00:00:38.075 --> 00:00:41.115
这里 我们以 0 为索引

00:00:41.115 --> 00:00:43.775
访问了第一项 eggs (鸡蛋) 的数量

00:00:43.774 --> 00:00:47.689
现在 我们用索引 -1 来访问最后一个元素

00:00:47.689 --> 00:00:53.219
跟之前一样 我们也可以用一个数字索引列表来访问多个项

00:00:53.219 --> 00:00:58.759
为了避免我们在指明索引标签

00:00:58.759 --> 00:01:00.945
和数字标签时有歧义

00:01:00.945 --> 00:01:04.415
Pandas 序列给出了两个属性 loc 以及 iloc

00:01:04.415 --> 00:01:07.745
来明确我们的意思

00:01:07.745 --> 00:01:11.005
属性 loc 表示位置

00:01:11.004 --> 00:01:15.515
用于指明我们用的是标签索引

00:01:15.515 --> 00:01:18.459
同理 属性 iloc

00:01:18.459 --> 00:01:20.719
则表示整数位置

00:01:20.719 --> 00:01:25.635
用于指明我们用的是数字索引

00:01:25.635 --> 00:01:29.310
Pandas 序列和 NumPy 数组一样是可变的

00:01:29.310 --> 00:01:34.555
也就是说 序列创建后我们仍可以改变其中的元素

00:01:34.555 --> 00:01:38.770
我们来修改杂货表里要购入的鸡蛋数

00:01:38.769 --> 00:01:40.795
这是刚才的杂货表

00:01:40.795 --> 00:01:47.019
我们可以将鸡蛋数从 30 改为 2 只需像这样为元素重新赋值即可

00:01:47.019 --> 00:01:51.364
现在 我们可以看到鸡蛋的数据已经改好了

00:01:51.364 --> 00:01:56.625
我们还可以用方法 drop 来删除 Pandas 序列里的项

00:01:56.625 --> 00:02:01.834
该方法会删除 Pandas 序列中与给定标签对应的元素

00:02:01.834 --> 00:02:07.379
你可以发现 经该方法返回后 序列里就没有苹果了

00:02:07.379 --> 00:02:11.789
不过元素移除并不是在原序列中进行的

00:02:11.789 --> 00:02:16.219
也就是说 这里返回的是经过修改的序列

00:02:16.219 --> 00:02:20.194
但不会改变原序列 如图

00:02:20.194 --> 00:02:22.289
我们也可以直接修改原序列

00:02:22.289 --> 00:02:26.969
只需将参数 inplace 设为 True 即可

00:02:26.969 --> 00:02:29.780
注意 现在方法 drop

00:02:29.780 --> 00:02:34.400
修改的就是原序列了 而不是将修改后的版本以另一个序列的形式返回出来

