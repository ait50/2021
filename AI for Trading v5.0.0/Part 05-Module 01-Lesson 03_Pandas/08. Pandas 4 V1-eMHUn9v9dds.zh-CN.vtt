WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.530
Pandas 的第二种主要数据结构为 DataFrame 

00:00:04.530 --> 00:00:08.089
DataFrame 是一个二维对象 其行与列都有标签

00:00:08.089 --> 00:00:11.974
也可以存放多种数据类型

00:00:11.974 --> 00:00:14.109
如果你熟悉 Excel 的话

00:00:14.109 --> 00:00:17.710
你可以把 DataFrame 想成一个十分强大的电子表格

00:00:17.710 --> 00:00:23.214
我们可以手动创建 Pandas DataFrame 也可以从文件中把数据加载进来

00:00:23.214 --> 00:00:27.399
我们先讲怎么用包含多个 Pandas 序列的字典

00:00:27.399 --> 00:00:29.679
手动创建 DataFrame 

00:00:29.679 --> 00:00:34.340
首先 创建字典 然后将字典传递给 Pandas 的函数 DataFrame

00:00:34.340 --> 00:00:37.970
这个字典包含了 Alice 和 Bob 两人

00:00:37.969 --> 00:00:41.039
在某个网上商店里的购物车

00:00:41.039 --> 00:00:46.399
每个序列都含有物品价格和物品名标签

00:00:46.399 --> 00:00:50.239
现在确认一下 items 的数据类型是字典

00:00:50.240 --> 00:00:52.085
创建好字典

00:00:52.085 --> 00:00:56.609
就可以把字典传递给函数 DataFrame 从而生成 DataFrame 了

00:00:56.609 --> 00:00:59.405
记住 使用函数 DataFrame 时

00:00:59.405 --> 00:01:02.524
D 和 F 都要大写

00:01:02.524 --> 00:01:04.614
这里需要注意几点

00:01:04.614 --> 00:01:09.015
第一 我们可以看到 这个 DataFrame 是以表格的形式呈现的

00:01:09.015 --> 00:01:14.515
它很像一张电子表格 其中行与列的标签加粗了

00:01:14.515 --> 00:01:18.379
第二 DataFrame 的行标签

00:01:18.379 --> 00:01:22.780
取自各序列的索引标签

00:01:22.780 --> 00:01:28.379
DataFrame 的列标签则取自字典的键

00:01:28.379 --> 00:01:33.424
列以字母顺序排列 而不是字典给出的顺序

00:01:33.424 --> 00:01:36.235
稍后我们会看到

00:01:36.234 --> 00:01:39.549
如果从文件里把数据载入 DataFrame 情况就不是如此了

00:01:39.549 --> 00:01:44.524
最后 注意 DataFrame 里的 NaN 值

00:01:44.525 --> 00:01:46.990
NaN 的意思是非数字

00:01:46.989 --> 00:01:49.929
Pandas 用 NaN 来表示

00:01:49.930 --> 00:01:53.210
某索引下的某一行没有值

00:01:53.209 --> 00:01:56.664
比如 Alice 这一列

00:01:56.665 --> 00:02:00.025
我们可以发现索引 watch 处为 NaN

00:02:00.025 --> 00:02:06.020
因为字典的 Alice 序列没有一个叫 watch 的项

00:02:06.019 --> 00:02:08.454
在创建 DataFrame 时

00:02:08.455 --> 00:02:12.645
只要某一列的某个索引没有值

00:02:12.645 --> 00:02:14.485
Pandas 就会在该处放置一个 NaN

00:02:14.485 --> 00:02:18.215
如果我们要把这些数据输入到机器学习算法中

00:02:18.215 --> 00:02:21.104
那就得先把 NaN 值移除

00:02:21.104 --> 00:02:22.619
稍后的视频

00:02:22.620 --> 00:02:26.585
会讲解怎么处理 NaN 值并清理数据

00:02:26.585 --> 00:02:30.110
现在我们先不管 DataFrame 里的这些值

00:02:30.110 --> 00:02:33.280
在上述例子中 我们用字典创建了一个 Pandas DataFrame 

00:02:33.280 --> 00:02:37.710
其中 字典由 Pandas 序列组成 序列有明确的索引标签

00:02:37.710 --> 00:02:40.610
但如果我们不提供索引标签

00:02:40.610 --> 00:02:44.945
在创建 DataFrame 时 Pandas 就会用数字行索引

00:02:44.944 --> 00:02:48.659
我们用同样的数据来创建一个不带索引标签的字典

00:02:48.659 --> 00:02:54.069
可以看到 Pandas 为 DataFrame 建立的行索引是从 0 开始的

00:02:54.069 --> 00:02:56.924
就像 NumPy 为其数组建立的索引一样

00:02:56.925 --> 00:02:59.330
和 Pandas 序列一样

00:02:59.330 --> 00:03:03.785
我们也可以用属性从 DataFrame 中提取信息

00:03:03.784 --> 00:03:07.810
我们来输出刚才那个 DataFrame shopping_carts 中的一些信息

00:03:07.810 --> 00:03:09.640
我们可以用这些属性从 DataFrame 中获取索引标签

00:03:09.639 --> 00:03:14.214
列标签和数据

00:03:14.215 --> 00:03:18.599
我们还可以用同样的属性来获取 DataFrame 的形状信息

00:03:18.599 --> 00:03:23.500
这个 DataFrame 有两个维度 共有五行两列

00:03:23.500 --> 00:03:25.939
总大小为 10

00:03:25.939 --> 00:03:28.550
在创建 DataFrame shopping_carts 时

00:03:28.550 --> 00:03:32.260
我们把整个字典 items 传递给了函数 DataFrame

00:03:32.259 --> 00:03:37.149
但有时候你只对数据的某一部分感兴趣

00:03:37.150 --> 00:03:40.250
Pandas 允许我们选择要放入 DataFrame 的数据部分

00:03:40.250 --> 00:03:44.544
要实现该操作 我们可以用关键字 columns 和 index

00:03:44.544 --> 00:03:46.299
来看些例子

00:03:46.300 --> 00:03:50.090
这是只加载了 Bob 购物车的 DataFrame 

00:03:50.090 --> 00:03:55.164
而这只选出了 Alice 和 Bob 的一些物品

00:03:55.164 --> 00:04:00.304
这个只从 Alice 购物车中选出了部分物品

00:04:00.305 --> 00:04:06.200
你还可以手动用列表或数组字典创建 DataFrame 

00:04:06.199 --> 00:04:08.669
操作和之前一样

00:04:08.669 --> 00:04:13.934
先创建字典 然后将字典传递给函数 DataFrame

00:04:13.935 --> 00:04:15.580
但是

00:04:15.580 --> 00:04:20.514
字典里的所有列表或数组长度必须相同

00:04:20.514 --> 00:04:23.550
这个字典里的数据是整数和浮点数

00:04:23.550 --> 00:04:28.935
注意 由于我们创建的数据字典没有索引标签

00:04:28.935 --> 00:04:34.050
Pandas 在创建 DataFrame 时 会自动使用数字行索引

00:04:34.050 --> 00:04:39.835
但我们也可以在函数 DataFrame 里用关键字 index 来添加标签

00:04:39.834 --> 00:04:43.079
最后一个手动创建 Pandas DataFrame 的方法

00:04:43.079 --> 00:04:47.034
是输入一个 Python 字典列表

00:04:47.035 --> 00:04:50.985
来看这个例子 这里还是没有索引标签

00:04:50.985 --> 00:04:53.710
所以 Pnadas 会把数字行索引放这儿

00:04:53.709 --> 00:04:56.884
假设我们要用这个 DataFrame 

00:04:56.884 --> 00:05:00.545
来存放某家商店的货物库存量

00:05:00.545 --> 00:05:04.870
将索引标签重命名为 store 1 和 store 2

