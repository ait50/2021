WEBVTT
Kind: captions
Language: en

00:00:00.100 --> 00:00:02.840
Now I'm going to show you another set of data that won't work out quite so

00:00:02.840 --> 00:00:06.580
perfectly, but you can see how k-means clustering is still.

00:00:06.580 --> 00:00:10.100
And the type of data that I'll use in this example is uniform points.

00:00:10.100 --> 00:00:11.690
This is what uniform points look like.

00:00:11.690 --> 00:00:13.430
It's just scattered everywhere.

00:00:13.430 --> 00:00:16.810
So I wouldn't look at this and say there's clear clusters in here that I want to

00:00:16.810 --> 00:00:21.000
pick out, but I might still want to be able to describe that, say, these points

00:00:21.000 --> 00:00:24.700
over here are all more similar to each other than these points over there.

00:00:24.700 --> 00:00:28.430
And k-means clustering could be one way of mathematically describing that,

00:00:28.430 --> 00:00:29.710
that fact about the data.

00:00:29.710 --> 00:00:33.660
So I don't a priori have a number of centroids that I know I want to use here,

00:00:33.660 --> 00:00:35.400
so I'll use two.

00:00:35.400 --> 00:00:37.200
Seems like a reasonable number.

00:00:37.200 --> 00:00:38.040
One, two.

00:00:38.040 --> 00:00:40.390
And then let's see what happens in this case.

00:00:40.390 --> 00:00:41.950
Few points are going to be reassigned.

00:00:41.950 --> 00:00:42.740
Move the centroids.

00:00:42.740 --> 00:00:46.780
If you can see that there's a few more little adjustments here.

00:00:46.780 --> 00:00:52.560
But in the end, it basically just ends up splitting the data along this axis.

00:00:52.560 --> 00:00:56.930
If I try this again, depending on the exact initial conditions that I have and

00:00:56.930 --> 00:00:59.470
the exact details of how these points are allocated,

00:00:59.470 --> 00:01:02.080
I can come up with something that looks a little bit different.

00:01:02.080 --> 00:01:02.980
So you can see here that I

00:01:02.980 --> 00:01:05.519
ended up splitting the data vertically rather than horizontally.

00:01:05.519 --> 00:01:08.360
And the way you should think about this is the initial placement of

00:01:08.360 --> 00:01:13.360
the centroids is usually pretty random and very important.

00:01:13.360 --> 00:01:16.410
And so depending on what exactly the initial conditions are,

00:01:16.410 --> 00:01:20.770
you can get clustering in the end that looks totally different.

00:01:20.770 --> 00:01:22.750
Now, this might seem like a big problem, but

00:01:22.750 --> 00:01:26.150
there is one pretty powerful way to solve it.

00:01:26.150 --> 00:01:27.020
So let's talk about that.

