WEBVTT
Kind: captions
Language: zh-CN

00:00:00.240 --> 00:00:02.820
答案是肯定的 我证明给你看

00:00:02.820 --> 00:00:07.228
假设你把一个聚类中心点置于这两组数据之间

00:00:07.228 --> 00:00:09.110
而将另外两个点置于这里

00:00:09.110 --> 00:00:11.380
它们的具体位置并不重要

00:00:11.380 --> 00:00:15.520
你会发现 在分配步骤中

00:00:15.520 --> 00:00:20.330
这条线左边的所有数据都会被分配给左边的聚类中心

00:00:20.330 --> 00:00:21.262
因此

00:00:21.262 --> 00:00:25.142
这个点就可使橡皮筋总长度达到最小值

00:00:25.142 --> 00:00:27.410
因此这个聚类会非常稳定

00:00:27.410 --> 00:00:28.400
但这边的两个中心点

00:00:28.400 --> 00:00:33.500
则要“瓜分”右边的数据

00:00:33.500 --> 00:00:36.350
它们会争夺同样的数据点

00:00:36.350 --> 00:00:39.920
最终将右侧的空间分割成两部分

00:00:39.920 --> 00:00:44.456
这将是一个稳定解 因为在分配步骤中 数据不发生任何改变

00:00:44.456 --> 00:00:47.350
这个点仍与所有这些数据相对应

00:00:47.350 --> 00:00:49.380
而这些点与这些数据相对应

00:00:49.380 --> 00:00:51.498
这叫做局部最小值

00:00:51.498 --> 00:00:54.960
它取决于聚类中心点的最初设定

00:00:54.960 --> 00:00:58.710
如果你在最初的假设中选择了这三个聚类中心

00:00:58.710 --> 00:01:00.600
你很难离开这些点

00:01:00.600 --> 00:01:04.300
因此 我们必须意识到 在聚类中

00:01:04.300 --> 00:01:07.200
这是一个局部的爬山算法

00:01:07.200 --> 00:01:10.600
它可以为你提供一个次优解 如果你对它再次进行拆分

00:01:10.600 --> 00:01:11.520
就可以得到更好的解

00:01:11.520 --> 00:01:14.110
显然 在有三个聚类中心的情况下

00:01:14.110 --> 00:01:18.250
我们希望一个点在这里 另一个在这里 还有一个在右侧

