WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:03.210
One of the things that's immediately apparent once I start assigning my

00:00:03.210 --> 00:00:07.200
centroids, with these colored regions, is how all the points are going to

00:00:07.200 --> 00:00:10.790
be associated with one of the centroids, with one of the clusters.

00:00:10.790 --> 00:00:14.120
So you can see that the blue is probably already in reasonably good shape.

00:00:15.140 --> 00:00:18.060
I would say that we got a little bit lucky in where the,

00:00:18.060 --> 00:00:19.760
the initial centroid was placed.

00:00:19.760 --> 00:00:22.950
It looks like it's pretty close to the, the center of this blob of data.

00:00:22.950 --> 00:00:25.960
With the red and the green it looks like they're sitting kind of right on top of

00:00:25.960 --> 00:00:28.680
each other in the same cluster.

00:00:28.680 --> 00:00:32.580
So, let's watch as K-means starts to sort out this situation and

00:00:32.580 --> 00:00:34.690
get all the clusters properly allocated.

00:00:34.690 --> 00:00:36.080
So, I hit Go.

00:00:36.080 --> 00:00:40.210
The first thing that it does is it tells me explicitly which cluster each one of

00:00:40.210 --> 00:00:41.720
these points will fall into.

00:00:41.720 --> 00:00:44.940
So you see, we have a few blue that fall into the wrong cluster over here.

00:00:44.940 --> 00:00:47.150
And then, of course, the red and the green.

00:00:47.150 --> 00:00:51.170
So this is the association step is all the points are being associated with

00:00:51.170 --> 00:00:52.850
the nearest centroid.

00:00:52.850 --> 00:00:55.480
And then the next thing that I'll do is I'm going to update the centroid.

00:00:55.480 --> 00:00:59.440
So now, this is going to move the centroids to the,

00:00:59.440 --> 00:01:02.570
the mean of all of the associated points.

00:01:02.570 --> 00:01:05.519
So in particular, I, I expect this green point to be

00:01:05.519 --> 00:01:08.850
pulled over to the right by the fact that we have so many points over here.

00:01:08.850 --> 00:01:10.030
So let's update.

00:01:10.030 --> 00:01:11.590
Now this is starting to look much better.

00:01:11.590 --> 00:01:13.120
If we were to just leave everything as is,

00:01:13.120 --> 00:01:15.920
you can see how the clustering was before.

00:01:15.920 --> 00:01:20.210
So now all these points that use to be green are now about to become red.

00:01:20.210 --> 00:01:22.090
And likewise with a few blue points over here.

00:01:22.090 --> 00:01:26.360
You can see how even just in one step from this bad initial condition,

00:01:26.360 --> 00:01:29.460
we've already started to capture the structure in the data pretty well.

00:01:29.460 --> 00:01:31.030
So I'm going to reassign the points.

00:01:31.030 --> 00:01:34.590
Iterate through this again to reassign each point to the nearest centroid.

00:01:34.590 --> 00:01:37.080
And now things are starting to look very, very consistent.

00:01:37.080 --> 00:01:38.700
There's probably just one, one or

00:01:38.700 --> 00:01:41.900
two more iterations before we have the centroid's right at the middle of

00:01:41.900 --> 00:01:45.840
the clusters so I update and reassign points.

00:01:45.840 --> 00:01:47.810
No points have changed so

00:01:47.810 --> 00:01:51.070
this is the final clustering that would be assigned by k-means clustering.

00:01:51.070 --> 00:01:54.310
So in three or four steps, using this algorithm, I assigned every point to

00:01:54.310 --> 00:01:57.410
a cluster and it worked in a really beautiful way for this example.

