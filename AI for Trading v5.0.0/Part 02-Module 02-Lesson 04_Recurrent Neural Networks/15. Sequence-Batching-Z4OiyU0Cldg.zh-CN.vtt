WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.889
对于我来说 构建网络最困难的一个部分之一是进行正确的批处理

00:00:04.889 --> 00:00:09.175
这更像是一个编程挑战 而非特定的深度学习问题

00:00:09.175 --> 00:00:14.278
所以在这里我将带你了解 RNN 的批处理工作

00:00:14.278 --> 00:00:17.849
我们使用数据序列训练 RNN 比如文本、

00:00:17.849 --> 00:00:20.565
股价、音频等

00:00:20.565 --> 00:00:24.597
通过取一个序列 并将其拆分成多个较短的序列

00:00:24.597 --> 00:00:28.890
我们可以利用矩阵运算来提高训练的效率

00:00:28.890 --> 00:00:34.020
事实上 RNN 是对多个序列并行进行训练的

00:00:34.020 --> 00:00:35.880
我们来看一个简单的例子

00:00:35.880 --> 00:00:38.579
从 1 到 12 的数字序列

00:00:38.579 --> 00:00:41.810
我们可以将它们作为一个序列传递给 RNN

00:00:41.810 --> 00:00:46.590
为了更好地训练 我们可以将它拆分成两部分 传入两个序列

00:00:46.590 --> 00:00:50.054
批量大小对应于我们使用的序列数

00:00:50.054 --> 00:00:52.914
所以在这里我们说批量大小为 2

00:00:52.914 --> 00:00:54.960
除批量大小外 我们还要选择

00:00:54.960 --> 00:00:57.658
馈送给网络的序列的长度

00:00:57.658 --> 00:01:01.070
例如 我们考虑使用 3 作为序列长度

00:01:01.070 --> 00:01:03.240
那么 我们传入网络的

00:01:03.240 --> 00:01:06.719
第一批数据将是每个小序列的前 3 个值

00:01:06.719 --> 00:01:11.474
下一批将包含之后的三个值 依次类推 直到到达数据的末尾

00:01:11.474 --> 00:01:16.590
我们可以保留一个批量的隐藏状态 并在下一批的开头使用它

00:01:16.590 --> 00:01:21.954
这样每个小序列的序列信息将在不同批量之间传递

00:01:21.953 --> 00:01:27.000
接下来你将看到如何实际构建循环网络 加油

