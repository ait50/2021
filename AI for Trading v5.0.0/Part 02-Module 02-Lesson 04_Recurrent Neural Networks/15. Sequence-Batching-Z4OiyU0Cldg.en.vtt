WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.889
One of the most difficult parts of building networks for me is getting the batches right.

00:00:04.889 --> 00:00:09.175
It's more of a programming challenge than anything deep learning specific.

00:00:09.175 --> 00:00:14.278
So here I'm going to walk you through how batching works for RNN.

00:00:14.278 --> 00:00:17.849
With RNNs we're training on sequences of data like text,

00:00:17.849 --> 00:00:20.565
stock values, audio etc.

00:00:20.565 --> 00:00:24.597
By taking a sequence and splitting it into multiple shorter sequences,

00:00:24.597 --> 00:00:28.890
we can take advantage of matrix operations to make training more efficient.

00:00:28.890 --> 00:00:34.020
In the fact, the RNN is training on multiple sequences in parallel.

00:00:34.020 --> 00:00:35.880
Let's look at a simple example,

00:00:35.880 --> 00:00:38.579
a sequence of numbers from 1 to 12.

00:00:38.579 --> 00:00:41.810
We can pass these into an RNN as one sequence.

00:00:41.810 --> 00:00:46.590
What's better. We could split it in half and pass in two sequences.

00:00:46.590 --> 00:00:50.054
The batch size corresponds to the number of sequences we're using.

00:00:50.054 --> 00:00:52.914
So here we'd say the batch size is 2.

00:00:52.914 --> 00:00:54.960
Along with the batch size we also choose

00:00:54.960 --> 00:00:57.658
the length of the sequences we feed to the network.

00:00:57.658 --> 00:01:01.070
For example, let's consider using a sequence length of 3.

00:01:01.070 --> 00:01:03.240
Then the first batch of data we pass into

00:01:03.240 --> 00:01:06.719
the network are the first 3 values in each mini sequence.

00:01:06.719 --> 00:01:11.474
The next batch contains the next three values and so on until we run out of data.

00:01:11.474 --> 00:01:16.590
We can retain the hidden state from one batch and use it at the start of the next batch.

00:01:16.590 --> 00:01:21.954
This way the sequence information is transferred across batches for each mini sequence.

00:01:21.953 --> 00:01:27.000
Next up you'll see how to actually build a recurrent network. Cheers.

