WEBVTT
Kind: captions
Language: pt-BR

00:00:00.062 --> 00:00:03.550
Neste notebook, construiremos
uma RNN de caracteres.

00:00:03.583 --> 00:00:06.223
Treinaremos isso na obra
"Anna Karenina",

00:00:06.256 --> 00:00:09.264
que é um livro ótimo,
mas triste.

00:00:09.297 --> 00:00:13.565
A ideia por trás disso
é passar um caractere por vez

00:00:13.598 --> 00:00:15.726
na rede neural recorrente.

00:00:15.759 --> 00:00:17.853
Faremos isso
com um monte de texto

00:00:17.886 --> 00:00:21.878
e, ao final, a rede poderá gerar
novos textos

00:00:21.911 --> 00:00:23.630
um caractere por vez.

00:00:23.663 --> 00:00:25.285
E esta é a estrutura geral.

00:00:25.318 --> 00:00:28.963
Temos os caracteres de input
e queremos codificá-los com one-hot.

00:00:28.996 --> 00:00:32.588
Esse vetor one-hot será passado
para uma camada oculta recorrente,

00:00:32.621 --> 00:00:35.342
que tem dois outputs.

00:00:35.375 --> 00:00:37.512
Primeiro ela produz
um output de RNN

00:00:37.545 --> 00:00:38.927
e um estado oculto,

00:00:38.960 --> 00:00:41.551
que continuará mudando
e alimentará a camada oculta

00:00:41.584 --> 00:00:43.888
no próximo instante de tempo
da sequência.

00:00:43.921 --> 00:00:46.976
Vimos algo parecido
no último exemplo de código.

00:00:47.009 --> 00:00:49.529
A camada recorrente rastreia
o estado oculto

00:00:49.562 --> 00:00:53.456
e o output vai para a camada
completamente conectada final.

00:00:53.489 --> 00:00:54.926
A camada de output linear

00:00:54.959 --> 00:00:57.372
produzirá uma séria
de pontuações de classe.

00:00:57.405 --> 00:00:59.863
O output será do tamanho
do vetor de input

00:00:59.896 --> 00:01:01.768
e podemos aplicar
uma função softmax

00:01:01.801 --> 00:01:05.743
para obter uma distribuição
de probabilidade de um caractere.

00:01:05.776 --> 00:01:09.959
Esta rede se baseia na postagem
do Andrej Karpathy sobre RNNs,

00:01:09.992 --> 00:01:11.248
que você encontra aqui.

00:01:11.281 --> 00:01:15.088
É uma postagem ótima, e aqui
você pode ler mais sobre as RNNs.

00:01:15.121 --> 00:01:18.264
Este notebook é dividido
em pequenos exercícios

00:01:18.297 --> 00:01:19.871
que você poderá implementar.

00:01:19.904 --> 00:01:23.663
Para cada exercício,
haverá uma solução a ser consultada.

00:01:23.696 --> 00:01:26.591
Recomendo abrir o notebook
do exercício em uma janela

00:01:26.624 --> 00:01:28.304
e assistir aos vídeos
em outra.

00:01:28.337 --> 00:01:30.390
Assim conseguirá
trabalhar junto comigo.

00:01:30.423 --> 00:01:34.839
Vamos começar carregando
e vendo os dados de texto.

00:01:34.872 --> 00:01:37.335
Carrego o arquivo
da obra "Anna Karenina"

00:01:37.368 --> 00:01:40.255
e imprimo
os primeiros 100 caracteres.

00:01:40.288 --> 00:01:45.018
Os caracteres são letras, espaços
e caracteres de novas linhas.

00:01:45.051 --> 00:01:46.734
Vemos a primeira linha:

00:01:46.767 --> 00:01:48.421
"As famílias felizes
se parecem;

00:01:48.454 --> 00:01:51.573
as famílias infelizes são infelizes
cada uma à sua maneira."

00:01:51.606 --> 00:01:55.026
Quero transformar o texto
em tokens numéricos.

00:01:55.059 --> 00:01:58.086
Isso porque a rede só aprende
com dados numéricos,

00:01:58.119 --> 00:02:00.552
então queremos mapear
cada caractere do texto

00:02:00.585 --> 00:02:02.495
para um índice único.

00:02:02.528 --> 00:02:04.207
Primeiro, com o texto,

00:02:04.240 --> 00:02:07.495
podemos criar um vocabulário único
como um set.

00:02:07.528 --> 00:02:09.767
Os sets são estruturas
de dados do Python

00:02:09.800 --> 00:02:13.248
que observam cada caractere
do texto,

00:02:13.281 --> 00:02:16.623
os separam em uma string
e se livram das repetições.

00:02:16.656 --> 00:02:20.351
Então chars será um conjunto
com caracteres únicos.

00:02:20.384 --> 00:02:23.656
Isso às vezes é chamado
de "vocabulário".

00:02:23.689 --> 00:02:27.894
Depois criamos um dicionário
com o vocabulário dos caracteres

00:02:27.927 --> 00:02:31.593
que mapeia os caracteres
para um inteiro único,

00:02:31.626 --> 00:02:35.512
atribuindo um valor numérico
para cada um dos caracteres

00:02:35.545 --> 00:02:38.079
e os colocando
no dicionário int2char.

00:02:38.112 --> 00:02:39.565
Depois faço o contrário,

00:02:39.598 --> 00:02:43.558
temos um dicionário que vai
dos inteiros para os caracteres.

00:02:43.591 --> 00:02:47.461
Os dicionários são compostos
por pares de chaves-valor.

00:02:47.494 --> 00:02:50.245
No caso do int2char,
as chaves serão os inteiros

00:02:50.278 --> 00:02:53.013
e os valores,
caracteres string.

00:02:53.046 --> 00:02:56.213
No caso do char2int,
as chaves serão os caracteres

00:02:56.246 --> 00:02:59.413
e os valores,
os inteiros únicos.

00:02:59.446 --> 00:03:03.149
Isso nos dá uma maneira
de codificar o texto como números.

00:03:03.182 --> 00:03:05.182
Aqui eu faço isso:

00:03:05.215 --> 00:03:08.773
codifico cada caractere no texto
como um inteiro.

00:03:08.806 --> 00:03:10.957
Isso cria um texto codificado

00:03:10.990 --> 00:03:13.792
e, assim como imprimi
os primeiros 100 caracteres antes,

00:03:13.825 --> 00:03:16.634
podemos imprimir os primeiros
100 valores codificados.

00:03:16.667 --> 00:03:19.089
Observando o comprimento
dos caracteres únicos,

00:03:19.122 --> 00:03:21.895
veremos que existem 83
caracteres únicos no texto.

00:03:21.928 --> 00:03:24.472
Os valores codificados
seguem esse intervalo.

00:03:24.505 --> 00:03:26.744
Também vemos
valores repetidos aqui,

00:03:26.777 --> 00:03:30.415
como 82, 82, 82 e 19, 19.

00:03:30.448 --> 00:03:34.311
Se voltarmos ao texto,
vemos que o 82 repetido

00:03:34.344 --> 00:03:36.222
é este caractere
de nova linha,

00:03:36.255 --> 00:03:38.518
e que 19
pode representar "appy".

00:03:38.551 --> 00:03:40.143
O codificador
está funcionando,

00:03:40.176 --> 00:03:43.769
e agora queremos transformá-lo
em vetores one-hot

00:03:43.802 --> 00:03:45.968
que a RNN poderá usar
como input,

00:03:46.001 --> 00:03:47.855
assim como no diagrama
inicial.

00:03:47.888 --> 00:03:51.350
Aqui eu escrevi uma função
que pega um array codificado

00:03:51.383 --> 00:03:53.238
e o transforma
em um vetor one-hot

00:03:53.271 --> 00:03:55.013
de comprimento especificado.

00:03:55.046 --> 00:03:58.309
Mostrarei o que isso faz
com um exemplo abaixo.

00:03:58.342 --> 00:04:01.317
Eu fiz uma pequena
sequência de teste - 3, 5, 1 -

00:04:01.350 --> 00:04:04.150
e o comprimento do vetor
que especifiquei será 8.

00:04:04.183 --> 00:04:07.597
Passamos a sequência de teste
e a quantidade de rótulos esperados

00:04:07.630 --> 00:04:09.589
para a função one-hot.

00:04:09.622 --> 00:04:13.974
Vemos que o resultado
é um array de três vetores one-hot.

00:04:14.007 --> 00:04:16.278
Os vetores têm comprimento
igual a 8,

00:04:16.311 --> 00:04:20.775
e os índices 3, 5 e 1
estão nas codificações respectivas.

00:04:20.808 --> 00:04:23.180
Para o vocabulário
com 83 caracteres,

00:04:23.213 --> 00:04:25.709
teremos vetores bem maiores.

00:04:25.742 --> 00:04:28.566
Temos as funções
de pré-processamento

00:04:28.599 --> 00:04:30.078
e os dados no lugar.

00:04:30.111 --> 00:04:33.108
A primeira tarefa
será pegar os caracteres codificados

00:04:33.141 --> 00:04:35.014
e transformá-los em minilotes,

00:04:35.047 --> 00:04:36.886
que serão fornecidos
para a rede.

00:04:36.919 --> 00:04:38.757
Conforme já mencionamos antes,

00:04:38.790 --> 00:04:43.441
a ideia é executar múltiplas
sequências pela rede por vez,

00:04:43.474 --> 00:04:46.727
na qual um minilote de dados
contém várias sequências.

00:04:47.343 --> 00:04:49.602
Eis um exemplo de sequência.

00:04:49.635 --> 00:04:51.908
Se configurarmos
um tamanho de lote igual a 2,

00:04:51.941 --> 00:04:54.478
dividiremos os dados
em dois lotes,

00:04:54.511 --> 00:04:56.732
então teremos as janelas
de sequência

00:04:56.765 --> 00:04:59.551
que especificam o tamanho
das sequências.

00:04:59.584 --> 00:05:01.697
Temos comprimento
de sequência igual a 3,

00:05:01.730 --> 00:05:03.719
então a janela
terá 3 de largura.

00:05:03.752 --> 00:05:06.866
Para o tamanho de lote de 2
e comprimento de sequência de 3,

00:05:06.899 --> 00:05:09.395
estes valores constituirão
o primeiro minilote.

00:05:09.428 --> 00:05:13.011
Movemos a janela em 3
para obtermos o próximo minilote.

00:05:13.044 --> 00:05:15.967
Cada minilote terá a dimensão
do tamanho de lote

00:05:16.000 --> 00:05:17.557
por comprimento de sequência.

00:05:17.590 --> 00:05:19.857
Neste caso, temos uma janela
de 2x3

00:05:19.890 --> 00:05:22.865
no array codificado
que passamos para a rede.

00:05:22.898 --> 00:05:26.317
Se descermos, veremos
instruções mais específicas.

00:05:26.350 --> 00:05:30.242
A primeira coisa que faremos
será pegar um array codificado,

00:05:30.275 --> 00:05:32.033
descartando qualquer valor

00:05:32.066 --> 00:05:35.337
que não se adeque
aos minilotes completos.

00:05:35.370 --> 00:05:39.530
Remodelamos o array em números
de linhas do tamanho do lote.

00:05:39.563 --> 00:05:42.835
Quando tivermos os dados do lote,
criaremos uma janela

00:05:42.868 --> 00:05:45.866
que itera pelos lotes
um comprimento de sequência por vez

00:05:45.899 --> 00:05:47.410
para obter os minilotes.

00:05:47.443 --> 00:05:51.249
Aqui está o código esqueleto.
O array será um dado codificado.

00:05:51.282 --> 00:05:54.327
Temos tamanho de lote
e comprimento de sequência.

00:05:54.360 --> 00:05:56.774
Basicamente,
criamos um input X

00:05:56.807 --> 00:06:00.314
com comprimento de sequência
ou número de instantes como largura

00:06:00.347 --> 00:06:03.711
e o tamanho de lote como altura.
Isso constituirá os dados de input,

00:06:03.744 --> 00:06:05.833
mas também precisaremos
fornecer alvos.

00:06:05.866 --> 00:06:10.418
Os alvos Y desta rede
serão como os caracteres de input X,

00:06:10.451 --> 00:06:12.597
mas alterados em 1.

00:06:12.630 --> 00:06:16.100
Isso porque queremos que a rede
preveja o próximo caractere

00:06:16.133 --> 00:06:18.093
em uma sequência de input.

00:06:18.126 --> 00:06:22.477
Teremos a sequência de input X
e os alvos Y alterados em 1.

00:06:22.510 --> 00:06:24.826
Por fim, quando chamarmos
get_batches,

00:06:24.859 --> 00:06:27.427
criaremos um gerador
que itera pelo array

00:06:27.460 --> 00:06:30.611
e retorna X e Y
com o comando yield.

00:06:30.644 --> 00:06:33.771
A implementação da função
será por sua conta.

00:06:33.804 --> 00:06:36.802
Há mais informações
sobre como fazer isso no notebook,

00:06:36.835 --> 00:06:40.102
e há alguns códigos abaixo
para que você teste a implementação.

00:06:40.135 --> 00:06:41.946
É assim que deverá
ficar o seu lote

00:06:41.979 --> 00:06:43.615
depois que executar o código.

00:06:43.648 --> 00:06:46.316
Se precisar de ajuda
ou quiser ver a minha solução,

00:06:46.349 --> 00:06:48.900
confira o vídeo de solução
a seguir.

