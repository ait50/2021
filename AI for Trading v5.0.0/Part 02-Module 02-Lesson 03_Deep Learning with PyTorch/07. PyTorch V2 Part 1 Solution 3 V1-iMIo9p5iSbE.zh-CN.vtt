WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.690
好了这是习题答案视频

00:00:03.690 --> 00:00:06.960
在这道题里 我们要使用

00:00:06.960 --> 00:00:11.905
在这里定义的 weights 和 features 计算这个多层网络的输出

00:00:11.905 --> 00:00:14.160
流程和之前的单层神经网络

00:00:14.160 --> 00:00:16.770
很相似

00:00:16.770 --> 00:00:20.370
传入 features 和权重矩阵

00:00:20.370 --> 00:00:21.630
即第一个权重矩阵

00:00:21.630 --> 00:00:24.945
进行矩阵乘法运算

00:00:24.945 --> 00:00:27.840
这是 torch.mm + b1

00:00:27.840 --> 00:00:32.220
获得隐藏层 h 的值

00:00:32.220 --> 00:00:37.880
现在我们可以使用值 h

00:00:37.880 --> 00:00:39.500
作为网络下一层级的输入

00:00:39.500 --> 00:00:42.590
用这些隐藏值 h 与

00:00:42.590 --> 00:00:45.380
第二个权重矩阵 w2 进行矩阵乘法运算

00:00:45.380 --> 00:00:48.880
加上偏差项 得出输出

00:00:48.880 --> 00:00:52.100
PyTorch 能够

00:00:52.100 --> 00:00:54.920
轻松实现

00:00:54.920 --> 00:00:58.480
在 NumPy 数组和 Torch 张量之间的转换

00:00:58.480 --> 00:01:00.470
这样很方便 因为很多时候

00:01:00.470 --> 00:01:05.120
你需要使用 NumPy 准备和预处理数据

00:01:05.120 --> 00:01:07.640
然后将数据传入网络中

00:01:07.640 --> 00:01:11.170
因此 你需要

00:01:11.170 --> 00:01:12.750
在数据所采用的 NumPy 数组

00:01:12.750 --> 00:01:17.015
和网络所使用的 Torch 张量之间建立联系

00:01:17.015 --> 00:01:18.560
所以

00:01:18.560 --> 00:01:25.115
我们可以使用 torch.from_numpy 从 NumPy 数组中获取张量

00:01:25.115 --> 00:01:28.910
我在这里创建了一个 4x3 随机数组

00:01:28.910 --> 00:01:31.160
然后通过该数组创建一个 Torch 张量

00:01:31.160 --> 00:01:35.280
方法是调用 .from_numpy 并传入数组

00:01:35.280 --> 00:01:37.565
这样就能为我们创建张量

00:01:37.565 --> 00:01:38.960
这就是 PyTorch 中的张量

00:01:38.960 --> 00:01:43.565
我们可以对其使用各种 Torch 方法

00:01:43.565 --> 00:01:45.595
并最终用在神经网络里

00:01:45.595 --> 00:01:47.080
还可以反过来

00:01:47.080 --> 00:01:50.330
我们可以传入一个张量

00:01:50.330 --> 00:01:54.620
例如这里的 Torch 张量 b

00:01:54.620 --> 00:01:57.085
并使用 b.numpy 将其转回 NumPy 数组

00:01:57.085 --> 00:01:59.000
要注意的一点是

00:01:59.000 --> 00:02:04.595
内存会在 NumPy 数组和这个 Torch 张量之间共享

00:02:04.595 --> 00:02:07.820
也就是说 如果你对 NumPy 数组或张量

00:02:07.820 --> 00:02:11.840
执行任何原地操作

00:02:11.840 --> 00:02:13.825
就会更改对方的值

00:02:13.825 --> 00:02:19.130
例如 如果我们原地乘以 2

00:02:19.130 --> 00:02:22.220
意味着我们将更改内存中的值

00:02:22.220 --> 00:02:24.850
并且不创建新的张量

00:02:24.850 --> 00:02:29.930
那么我们就会更改 NumPy 数组中的值

00:02:29.930 --> 00:02:32.190
这是我们的 NumPy 数组

00:02:32.190 --> 00:02:34.115
一开始是这样的

00:02:34.115 --> 00:02:37.070
将其转换为 Torch 张量

00:02:37.070 --> 00:02:39.245
在这里进行原地乘法运算

00:02:39.245 --> 00:02:42.560
更改了这个张量的值

00:02:42.560 --> 00:02:44.510
再回来看看 NumPy 数组

00:02:44.510 --> 00:02:46.345
发现值变了

00:02:46.345 --> 00:02:49.550
在进行转换时要注意这一点

00:02:49.550 --> 00:02:53.330
这样的话 当你对张量进行操作时

00:02:53.330 --> 00:02:56.840
发现 NumPy 数组也改变了不会吓一跳

00:02:56.840 --> 00:02:58.600
下个视频见！

