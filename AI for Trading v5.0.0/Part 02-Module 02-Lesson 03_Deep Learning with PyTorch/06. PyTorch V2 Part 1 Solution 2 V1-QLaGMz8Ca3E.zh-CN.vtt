WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.375
这是答案视频

00:00:03.375 --> 00:00:08.700
在这道练习中 我要求你使用矩阵乘法计算网络的输出

00:00:08.700 --> 00:00:12.060
之所以要使用矩阵乘法

00:00:12.060 --> 00:00:16.605
是因为与单独相乘和求和相比 矩阵乘法更高效

00:00:16.605 --> 00:00:18.300
但是要进行矩阵乘法运算

00:00:18.300 --> 00:00:21.405
我们需要更改 weights 张量的大小

00:00:21.405 --> 00:00:24.690
所以 我们输入 weights.view(5, 1)

00:00:24.690 --> 00:00:31.305
它会将 weights 张量的形状变成 5 行 1 列

00:00:31.305 --> 00:00:34.970
features 的形状是 1 行 5 列

00:00:34.970 --> 00:00:37.145
现在可以进行矩阵乘法运算了

00:00:37.145 --> 00:00:42.985
乘法和加法运算 变做一步完成

00:00:42.985 --> 00:00:45.105
然后与偏差项相加

00:00:45.105 --> 00:00:46.300
传入激活函数中

00:00:46.300 --> 00:00:49.130
获得输出

00:00:49.130 --> 00:00:51.560
就像我之前提到的

00:00:51.560 --> 00:00:55.310
你可以将这些简单神经网络堆叠成一个多层神经网络

00:00:55.310 --> 00:00:57.680
使网络能够发现数据中的规律和联系

00:00:57.680 --> 00:01:02.255
变得更强大

00:01:02.255 --> 00:01:06.410
现在 weights 不再是一个简单的向量

00:01:06.410 --> 00:01:08.270
而是一个矩阵

00:01:08.270 --> 00:01:13.745
这些是输入向量 x_1 x_2 x_3

00:01:13.745 --> 00:01:16.790
看做 x 向量 它们是特征

00:01:16.790 --> 00:01:23.695
然后是将输入与中间层级中的一个隐藏单元相连的权重

00:01:23.695 --> 00:01:25.865
这个中间层级通常称为隐藏层 隐藏层有隐藏单元

00:01:25.865 --> 00:01:29.135
这个隐藏层有 2 个单元

00:01:29.135 --> 00:01:32.370
特征（输入）

00:01:32.370 --> 00:01:34.370
是行向量

00:01:34.370 --> 00:01:37.040
与这里的第一列相乘

00:01:37.040 --> 00:01:39.275
获得输出

00:01:39.275 --> 00:01:41.485
即 h_1 的值

00:01:41.485 --> 00:01:44.840
然后使 features 与第二列相乘

00:01:44.840 --> 00:01:48.625
获得 h_2 的值

00:01:48.625 --> 00:01:53.240
从数学角度来说 将这些看做矩阵和向量并进行线性代数运算

00:01:53.240 --> 00:01:56.930
要获得这个隐藏层的值

00:01:56.930 --> 00:02:00.855
我们在特征向量（x_1 到 x_n）

00:02:00.855 --> 00:02:02.505
和权重矩阵之间

00:02:02.505 --> 00:02:04.605
进行矩阵乘法

00:02:04.605 --> 00:02:06.780
然后和之前一样

00:02:06.780 --> 00:02:08.150
将这些值传入激活函数里

00:02:08.150 --> 00:02:11.690
或者不传入激活函数里

00:02:11.690 --> 00:02:14.955
直接获取网络的原始输出

00:02:14.955 --> 00:02:18.560
我在这里生成了一些数据

00:02:18.560 --> 00:02:22.430
即一些特征 随机权重矩阵和偏差项

00:02:22.430 --> 00:02:26.500
你将使用这些数据计算多层网络的输出

00:02:26.500 --> 00:02:30.820
这个网络有 3 个输入特征

00:02:30.820 --> 00:02:32.990
两个隐藏单元和一个输出单元

00:02:32.990 --> 00:02:35.000
我在这里列出来了

00:02:35.000 --> 00:02:41.025
我们将创建三个特征 即这个 features 向量

00:02:41.025 --> 00:02:44.085
使 n_input = 3

00:02:44.085 --> 00:02:48.195
形状是这样的 有两个隐藏单元和一个输出单元

00:02:48.195 --> 00:02:53.260
使用这些值创建权重矩阵现在由你来计算

00:02:53.260 --> 00:02:58.235
这个多层网络的输出

00:02:58.235 --> 00:03:01.895
你可以使用之前为网络输出和隐藏层

00:03:01.895 --> 00:03:06.670
定义的激活函数加油！

