WEBVTT
Kind: captions
Language: pt-BR

00:00:00.539 --> 00:00:04.022
Neste vídeo vou ensinar a carregar
dados de imagem.

00:00:04.056 --> 00:00:06.526
Vai ser muito útil

00:00:06.559 --> 00:00:08.962
quando você estiver fazendo
projetos de verdade.

00:00:08.995 --> 00:00:11.524
Antes nós usamos o MNIST
e o Fashion-MNIST.

00:00:11.557 --> 00:00:13.708
Eles são conjuntos de dados
úteis

00:00:13.741 --> 00:00:15.916
para testar suas redes.

00:00:16.171 --> 00:00:18.648
Mas agora vamos usar
imagens grandes,

00:00:18.681 --> 00:00:20.390
como as de câmeras
de smartphone,

00:00:20.423 --> 00:00:22.775
como as que você vai usar
em seus projetos

00:00:22.808 --> 00:00:25.121
de redes
de aprendizagem profunda.

00:00:25.753 --> 00:00:28.870
Vamos usar um conjunto de fotos
de cães e gatos.

00:00:28.903 --> 00:00:30.168
Muito fofo.

00:00:30.202 --> 00:00:31.845
Elas vieram do Kaggle.

00:00:31.878 --> 00:00:34.491
Se quiserem saber mais,
basta clicar no link.

00:00:34.525 --> 00:00:37.657
Repare que as imagens
são muito maiores,

00:00:37.690 --> 00:00:38.935
têm resolução melhor

00:00:38.968 --> 00:00:41.780
e estão vindo em tamanhos
e formatos diferentes

00:00:41.813 --> 00:00:44.576
daquelas que vimos
no MNIST e no Fashion-MNIST.

00:00:45.062 --> 00:00:49.197
O primeiro passo é carregá-las
com o PyTorch.

00:00:49.231 --> 00:00:50.791
Depois disso,

00:00:50.824 --> 00:00:53.829
você pode treinar uma rede
com as imagens.

00:00:54.478 --> 00:00:56.726
A maneira mais fácil
de carregar dados de imagem

00:00:56.759 --> 00:00:58.416
é fazendo
datasets.ImageFolder.

00:00:58.449 --> 00:01:01.128
Isso é do torchvision,
o módulo de conjunto de dados.

00:01:01.162 --> 00:01:05.484
Basicamente você passa
o caminho do seu conjunto de dados,

00:01:05.517 --> 00:01:07.483
para a pasta
onde seus dados estão,

00:01:07.692 --> 00:01:09.025
na pasta de imagens,

00:01:09.058 --> 00:01:11.385
o que nos dá algumas
transformações, como já dissemos.

00:01:11.418 --> 00:01:14.494
Vou dar mais detalhes
sobre isso a seguir.

00:01:15.359 --> 00:01:16.667
Bem, a pasta de imagens

00:01:16.700 --> 00:01:19.365
espera que arquivos
e diretórios se pareçam com isto,

00:01:19.398 --> 00:01:22.433
com um diretório-raiz
que guarda todos os seus dados.

00:01:22.466 --> 00:01:25.533
Cada classe diferente
tem sua própria pasta.

00:01:25.828 --> 00:01:29.340
Neste caso temos duas classes,
"cão" e "gato".

00:01:29.373 --> 00:01:31.921
Temos duas pastas,
"cão" e "gato".

00:01:31.988 --> 00:01:35.656
Se tivéssemos mais classes,
como as 10 do MNIST,

00:01:35.689 --> 00:01:39.562
haveria uma pasta
para cada uma delas, certo?

00:01:39.595 --> 00:01:41.629
Essas são nossas classes,
ou rótulos.

00:01:41.662 --> 00:01:45.504
Dentro de cada pasta específica
de classe,

00:01:45.538 --> 00:01:48.621
temos imagens que pertencem
a essa classe.

00:01:48.957 --> 00:01:51.479
Na pasta de cães teremos
todas as fotos de cães

00:01:51.512 --> 00:01:53.814
e na de gatos,
todas as fotos de gatos.

00:01:54.133 --> 00:01:56.346
Se você estiver
no espaço de trabalho,

00:01:56.379 --> 00:01:57.859
os dados já devem estar lá.

00:01:57.892 --> 00:01:59.853
Se estiver
no seu computador local,

00:01:59.886 --> 00:02:01.854
pode pegar os dados
clicando aqui.

00:02:01.888 --> 00:02:05.273
Também já dividi tudo
em conjuntos de treino e de teste.

00:02:05.497 --> 00:02:07.135
Quando carregar
a pasta de imagens,

00:02:07.168 --> 00:02:09.381
vai precisar definir
algumas transformações.

00:02:09.414 --> 00:02:13.188
Ou seja, você vai ter
que mudar o tamanho, recortar,

00:02:13.221 --> 00:02:15.053
pode fazer várias coisas.

00:02:15.086 --> 00:02:18.924
Tipicamente, você terá que
converter um tensor de PyTorch

00:02:18.957 --> 00:02:21.918
e carregar
como uma imagem Pillow.

00:02:22.146 --> 00:02:24.689
É preciso transformar
a imagem em um tensor.

00:02:25.027 --> 00:02:27.210
Depois você combina
essas transformações

00:02:27.243 --> 00:02:28.765
em um pipeline
de transformações,

00:02:28.798 --> 00:02:30.507
usando transform.compose.

00:02:30.540 --> 00:02:34.873
Se você quiser redimensionar
sua imagem para 255 por 255,

00:02:34.906 --> 00:02:37.294
digite transforms.Resize(255)

00:02:37.328 --> 00:02:40.547
e depois selecione a parte central
e recorte

00:02:40.580 --> 00:02:42.738
com um tamanho
de 224 por 224.

00:02:43.103 --> 00:02:45.101
Depois você a converte
em um tensor.

00:02:45.135 --> 00:02:47.265
Use essas transformações.

00:02:47.298 --> 00:02:50.019
Passe isso
para a pasta de imagens

00:02:50.423 --> 00:02:53.831
para definir as transformações
realizadas em suas imagens.

00:02:54.548 --> 00:02:58.311
Depois de obter o conjunto de dados
de sua pasta de imagens

00:02:58.376 --> 00:02:59.980
que definem suas transformações,

00:03:00.013 --> 00:03:01.677
passe isso para o dataloader.

00:03:01.710 --> 00:03:04.497
Daqui você pode definir
o tamanho do seu lote.

00:03:04.530 --> 00:03:06.834
É o número de imagens
que você tem por lote

00:03:06.867 --> 00:03:09.284
e por loop através
desse dataloader.

00:03:09.533 --> 00:03:13.141
Depois você pode fazer coisas como
definir shuffle para "True".

00:03:13.174 --> 00:03:14.556
O que o shuffle faz

00:03:14.589 --> 00:03:18.027
é embaralhar seus dados
a cada nova epoch.

00:03:18.467 --> 00:03:20.786
Isso é muito útil

00:03:20.819 --> 00:03:22.783
porque quando você treina
sua rede,

00:03:22.817 --> 00:03:26.227
nós preferimos que,
na 2ª vez em que ela vasculhe,

00:03:26.260 --> 00:03:28.493
ela veja as imagens
em outra ordem,

00:03:28.526 --> 00:03:30.982
na 3ª vez, as imagens
estão em outra ordem.

00:03:31.015 --> 00:03:34.605
É melhor do que aprender
a mesma ordem o tempo todo,

00:03:34.638 --> 00:03:37.124
porque isso pode introduzir
estranhezas

00:03:37.157 --> 00:03:39.745
no que sua rede aprende
com seus dados.

00:03:40.268 --> 00:03:44.347
Tente se lembrar que o dataloader
que você pega aqui,

00:03:44.380 --> 00:03:46.177
o próprio objeto dataloader,

00:03:46.210 --> 00:03:47.736
é um gerador.

00:03:47.769 --> 00:03:50.304
Ou seja,
para tirar dados dele,

00:03:50.337 --> 00:03:51.940
é preciso passar um loop,

00:03:51.973 --> 00:03:53.097
um loop for,

00:03:53.130 --> 00:03:57.344
ou então, usando iter,
transformá-lo em um iterador.

00:03:57.377 --> 00:04:00.972
Depois é só chamar next
para retirar os dados.

00:04:01.538 --> 00:04:04.280
O que está acontecendo aqui
neste loop for,

00:04:04.313 --> 00:04:07.159
neste
for images, labels in dataloader

00:04:07.192 --> 00:04:09.013
é que o loop vira um iterador.

00:04:09.046 --> 00:04:11.678
Cada vez que ele executa
o loop, ele chama next.

00:04:11.711 --> 00:04:14.507
O loop é um jeito
de automatizar isso.

00:04:15.027 --> 00:04:16.791
A sua tarefa

00:04:16.824 --> 00:04:18.582
será definir
as transformações,

00:04:18.615 --> 00:04:20.034
criar sua pasta de imagens

00:04:20.067 --> 00:04:23.267
e passar essa pasta para criar
um dataloader.

00:04:24.036 --> 00:04:25.592
Se você fizer tudo certo,

00:04:25.625 --> 00:04:28.908
você deve ver uma imagem
parecida com esta.

00:04:29.574 --> 00:04:32.539
Esse é o jeito básico
de carregar seus dados.

00:04:32.572 --> 00:04:35.504
Você também pode fazer
o chamado "aumento de dados".

00:04:35.537 --> 00:04:39.553
Isso significa que você quer
introduzir aleatoriedades

00:04:39.586 --> 00:04:41.590
em seus próprios dados.

00:04:42.010 --> 00:04:45.127
Imagine que você tem imagens.

00:04:45.160 --> 00:04:48.436
Você pode fazer uma translação
do ponto onde um gato aparece.

00:04:48.469 --> 00:04:50.706
Você pode girar ou redimensionar
o gato.

00:04:50.739 --> 00:04:52.842
Você pode recortar
coisas diferentes,

00:04:52.875 --> 00:04:55.267
pode espelhar horizontal
ou verticalmente.

00:04:55.300 --> 00:04:58.876
Isso ajuda sua rede
a generalizar,

00:04:58.909 --> 00:05:02.529
porque ela vê essas imagens
em escala diferente,

00:05:02.562 --> 00:05:04.903
em outras orientações,
e assim por diante.

00:05:04.936 --> 00:05:09.041
Isso ajuda muito
sua rede a treinar

00:05:09.074 --> 00:05:14.273
e acaba levando a uma maior precisão
nos testes de validação.

00:05:15.282 --> 00:05:17.930
Eu vou deixar você definir
as transformações

00:05:17.963 --> 00:05:19.089
para treinar os dados.

00:05:19.122 --> 00:05:20.973
Você deve fazer
o aumento de dados,

00:05:21.006 --> 00:05:23.408
onde você vai
aleatoriamente recortar,

00:05:23.441 --> 00:05:26.057
redimensionar e girar
suas imagens

00:05:26.091 --> 00:05:30.013
e também vai definir transformações
para o conjunto de dados teste.

00:05:30.046 --> 00:05:33.519
Lembre que, quando for testar,
durante a validação,

00:05:33.552 --> 00:05:36.710
é melhor não fazer
aumento de dados.

00:05:36.743 --> 00:05:38.764
Basicamente,
o que você vai fazer

00:05:38.797 --> 00:05:42.177
é redimensionar e recortar
a parte central das imagens.

00:05:42.210 --> 00:05:44.902
Isso porque você quer
que sua validação

00:05:44.935 --> 00:05:49.200
seja parecida com o estado final
do seu modelo.

00:05:49.233 --> 00:05:50.702
Depois de treinar os dados,

00:05:50.735 --> 00:05:53.233
você vai enviar imagens
de cães e gatos.

00:05:53.266 --> 00:05:56.582
É melhor que seu conjunto validado
se pareça bastante

00:05:56.615 --> 00:05:59.909
com as imagens de entrada
que você vai acabar tendo.

00:06:00.734 --> 00:06:02.142
Se fizer tudo certo,

00:06:02.175 --> 00:06:04.593
vai ver exemplos
de treinamento como esses.

00:06:04.626 --> 00:06:06.698
Dá para ver que as imagens
estão giradas.

00:06:06.731 --> 00:06:08.712
Seu exemplo-teste
deve ficar assim.

00:06:08.745 --> 00:06:11.296
Estão proporcionalmente
dimensionadas

00:06:11.329 --> 00:06:12.976
e não estão giradas.

00:06:13.574 --> 00:06:15.152
Depois de carregar os dados,

00:06:15.185 --> 00:06:18.678
tente construir uma rede
baseada no que aprendeu,

00:06:18.879 --> 00:06:22.362
uma rede que possa classificar
gatos e cães do conjunto de dados.

00:06:22.395 --> 00:06:25.908
Devo avisar que este é um desafio
muito difícil,

00:06:25.941 --> 00:06:27.755
que provavelmente
não vai dar certo.

00:06:27.788 --> 00:06:29.940
Não se esforce demais.

00:06:30.848 --> 00:06:33.267
Antes você usou o MNIST
e o Fashion-MNIST.

00:06:33.483 --> 00:06:36.298
São imagens muito simples,
certo?

00:06:36.331 --> 00:06:40.769
São pequenas, 20 por 28,
todas em escala de cinza.

00:06:41.049 --> 00:06:43.933
Mas essas imagens
de gatos e cães são bem maiores.

00:06:43.966 --> 00:06:46.971
São coloridas,
então há 3 canais de cor.

00:06:47.004 --> 00:06:51.694
De modo geral será muito difícil
construir um classificador

00:06:51.727 --> 00:06:52.907
que possa fazer isso

00:06:52.940 --> 00:06:55.700
usando só uma rede
completamente conectada.

00:06:56.400 --> 00:06:59.017
A seguir, vou mostrar como usar
uma rede pré-treinada

00:06:59.050 --> 00:07:03.641
para fazer um modelo que consiga
classificar essas imagens. Abraços!

