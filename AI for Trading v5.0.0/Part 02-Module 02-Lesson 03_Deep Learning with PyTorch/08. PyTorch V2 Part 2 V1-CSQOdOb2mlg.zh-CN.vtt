WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.205
欢迎回来

00:00:02.205 --> 00:00:05.100
在此 notebook 和下面的视频中

00:00:05.100 --> 00:00:11.280
我将介绍在 PyTorch 中构建神经网络的另一种方式

00:00:11.280 --> 00:00:14.820
在上个 notebook 中 我介绍了

00:00:14.820 --> 00:00:18.465
如何使用张量和矩阵乘法计算网络的输出

00:00:18.465 --> 00:00:21.510
PyTorch 有一个很强大的模块 叫做 nn

00:00:21.510 --> 00:00:26.160
其中包含大量类 方法和函数

00:00:26.160 --> 00:00:31.050
使我们能够非常高效地构建大型神经网络

00:00:31.050 --> 00:00:32.580
为了演示它的功能

00:00:32.580 --> 00:00:35.145
我们将使用数据库 MNIST

00:00:35.145 --> 00:00:39.920
MNIST 包含了很多灰阶手写数字图像

00:00:39.920 --> 00:00:41.270
0 1 2 3 4

00:00:41.270 --> 00:00:43.350
一直到 9 

00:00:43.350 --> 00:00:47.570
每个图像都是 28 x 28 像素

00:00:47.570 --> 00:00:51.970
我们的目标是识别图像中的数字

00:00:51.970 --> 00:00:55.700
这个数据库由这些图像组成

00:00:55.700 --> 00:00:59.620
并且用图像中的数字加以标注

00:00:59.620 --> 00:01:01.380
1 标注为 1

00:01:01.380 --> 00:01:03.120
2 标注为 2

00:01:03.120 --> 00:01:05.435
我们可以向网络提供

00:01:05.435 --> 00:01:09.290
这些图像和正确的标签

00:01:09.290 --> 00:01:15.680
网络将学习判断图像中的数字是多少

00:01:15.680 --> 00:01:19.010
我们可以通过 torchvision 软件包获取该数据库

00:01:19.010 --> 00:01:23.575
torchvision 是 PyTorch 配套的软件包

00:01:23.575 --> 00:01:26.420
它能提供很多实用工具 例如数据库和模型

00:01:26.420 --> 00:01:29.990
有助于我们解决计算机视觉问题

00:01:29.990 --> 00:01:35.300
我们可以运行此单元格并下载和加载 MNIST 数据库

00:01:35.300 --> 00:01:38.930
它将返回一个对象 我称之为 trainloader

00:01:38.930 --> 00:01:43.625
使用 iter 将 trainloader 变成迭代器

00:01:43.625 --> 00:01:45.650
从而从中获取数据

00:01:45.650 --> 00:01:48.260
或者在 for 循环里使用它

00:01:48.260 --> 00:01:51.890
从这个生成器里获取图像

00:01:51.890 --> 00:01:55.669
代码是

00:01:55.669 --> 00:01:57.635
for image, label in trainloader

00:01:57.635 --> 00:02:00.500
要注意的一点是 当我创建 trainloader 时

00:02:00.500 --> 00:02:03.170
我将批次大小设成了 64

00:02:03.170 --> 00:02:07.580
这样的话 每次我们都会

00:02:07.580 --> 00:02:12.205
从数据加载器里获得 64 个图像和标签

00:02:12.205 --> 00:02:16.520
查看这些图像的形状和大小后

00:02:16.520 --> 00:02:20.620
会发现有 64 个图像 大小是1x28x28

00:02:20.620 --> 00:02:25.325
因此有一个颜色通道 表明是灰阶图像

00:02:25.325 --> 00:02:31.090
图像形状是 28 x 28 像素

00:02:31.090 --> 00:02:37.085
标签的形状是 64 它是一个向量 包含 64 个元素

00:02:37.085 --> 00:02:39.980
每个图像对应一个标签

00:02:39.980 --> 00:02:42.980
这是数字 4 的图像

00:02:42.980 --> 00:02:44.825
我们将使用

00:02:44.825 --> 00:02:48.215
之前学习的方法构建多层神经网络

00:02:48.215 --> 00:02:52.850
初始化权重矩阵和偏差向量

00:02:52.850 --> 00:02:59.575
并使用它们计算这个多层网络的输出

00:02:59.575 --> 00:03:05.310
具体而言 我们要构建的网络有 784 个输入单元

00:03:05.310 --> 00:03:08.280
256 个隐藏单元和 10 个输出单元

00:03:08.280 --> 00:03:09.720
10 个输出单元是指

00:03:09.720 --> 00:03:12.065
每个类别对应一个单元

00:03:12.065 --> 00:03:14.320
784 个输入单元的原因是

00:03:14.320 --> 00:03:17.740
这种网络

00:03:17.740 --> 00:03:21.825
称为完全连接网络或密集网络

00:03:21.825 --> 00:03:25.945
输入可以看做是一个向量

00:03:25.945 --> 00:03:29.920
图像是 28 x 28 

00:03:29.920 --> 00:03:34.300
但是我们要向网络里输入一个向量

00:03:34.300 --> 00:03:39.100
因此我们需要将这个 28 x 28 图像转换成向量

00:03:39.100 --> 00:03:41.935
28 x 28 = 784

00:03:41.935 --> 00:03:46.295
当我们将这个 28 x 28 图像扁平化为向量时

00:03:46.295 --> 00:03:50.610
向量的长度将是 784 个元素

00:03:50.610 --> 00:03:53.570
我们需要转换每批数据

00:03:53.570 --> 00:03:56.540
即将 64 x 1 x 28 x 28

00:03:56.540 --> 00:04:03.090
转换为另一个张量 形状为 64 x 784

00:04:03.090 --> 00:04:07.010
这就是将要输入到网络中的张量

00:04:07.010 --> 00:04:09.155
来吧 试试这个练习

00:04:09.155 --> 00:04:12.380
创建一个网络 有 784 个输入单元

00:04:12.380 --> 00:04:17.180
256 个隐藏单元和 10 个输出单元

00:04:17.180 --> 00:04:23.270
你要自己随机生成初始权重和偏差矩阵加油！

