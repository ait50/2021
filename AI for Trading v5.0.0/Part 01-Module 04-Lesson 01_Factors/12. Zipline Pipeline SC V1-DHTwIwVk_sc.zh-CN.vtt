WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.529
大家好在这节课

00:00:02.529 --> 00:00:05.824
我们将介绍 zipline 管道

00:00:05.825 --> 00:00:12.765
Zipline 是由 Quantopian 开发的一款开源算法交易模拟器

00:00:12.765 --> 00:00:17.725
在此 notebook 中 我们将介绍如何创建一个

00:00:17.725 --> 00:00:22.734
包含筛选器 因子和过滤器的管道 以及如何使用管道引擎运行管道

00:00:22.734 --> 00:00:24.620
我们开始吧

00:00:24.620 --> 00:00:27.019
为何需要管道？

00:00:27.019 --> 00:00:30.120
原因之一是 在任何一个交易日

00:00:30.120 --> 00:00:34.855
整个股票池都包含成千上万个证券

00:00:34.854 --> 00:00:39.379
通常 你并不想投资所有的股票

00:00:39.380 --> 00:00:44.380
而是只选择几支股票

00:00:44.380 --> 00:00:48.170
例如 你可能只想投资

00:00:48.170 --> 00:00:52.170
10 天的平均收盘价为 10 美元及以下的股票

00:00:52.170 --> 00:00:54.829
为了避免花大量时间挖掘数据

00:00:54.829 --> 00:00:57.905
并只选择你想要的股票

00:00:57.905 --> 00:01:00.495
人们通常会使用管道

00:01:00.494 --> 00:01:05.030
一般而言 管道是一个占位符 其中包含一系列

00:01:05.030 --> 00:01:10.370
根据某些因子过滤数据并加以排名的数据操作

00:01:10.370 --> 00:01:12.769
在开始构建管道之前

00:01:12.769 --> 00:01:18.245
首先需要了解如何将要使用的股票数据加载到 Zipline 中

00:01:18.245 --> 00:01:23.925
Zipline 使用数据包轻松处理不同的数据源

00:01:23.924 --> 00:01:28.825
在此 notebook 中 我们将使用 Quotemedia 的股票数据

00:01:28.825 --> 00:01:31.090
在 Udacity workspace 中

00:01:31.090 --> 00:01:33.260
你将发现 Quotemedia 的股票数据

00:01:33.260 --> 00:01:36.695
已经提取到 Zipline 中

00:01:36.694 --> 00:01:39.429
所以我们只需加载数据

00:01:39.430 --> 00:01:45.195
我们将使用 zipline 的 bundles 类中的 load 函数加载数据

00:01:45.194 --> 00:01:49.069
为了加载之前提取的数据包

00:01:49.069 --> 00:01:53.329
我们必须将数据包的名称传入 load 函数中

00:01:53.329 --> 00:01:59.259
在此练习中 之前提取的数据包的名称为 eod-quotemedia

00:01:59.260 --> 00:02:01.579
在这里指定了

00:02:01.659 --> 00:02:07.844
load 函数首先会查找最近提取的数据

00:02:07.844 --> 00:02:13.594
所以我们还必须指定之前提取的数据包所在的位置

00:02:13.594 --> 00:02:16.580
我们将 ZIPLINE_ROOT 变量

00:02:16.580 --> 00:02:21.270
设为最近提取数据所在的路径

00:02:21.270 --> 00:02:23.580
在加载数据包之前

00:02:23.580 --> 00:02:29.105
还需要注册数据包及其对应的提取函数

00:02:29.104 --> 00:02:31.259
加载数据后

00:02:31.259 --> 00:02:34.215
就可以构建首个管道了

00:02:34.215 --> 00:02:38.030
下面我们将逐步构建管道

00:02:38.030 --> 00:02:41.765
首先构建一个包含筛选器的空管道

00:02:41.764 --> 00:02:43.384
我们将使用 Zipline 的

00:02:43.384 --> 00:02:46.715
Pipeline 类构建一个管道

00:02:46.715 --> 00:02:50.780
在此示例中 我们使用的筛选器

00:02:50.780 --> 00:02:56.610
将选出在 60 天窗口期内平均交易量最高的前 10 项资产

00:02:56.610 --> 00:03:02.695
这个筛选器每天都会从股票池中滤除一些数据

00:03:02.694 --> 00:03:08.405
平均交易量可以作为第一道过滤屏障 避免出现没有流动性的资产

00:03:08.405 --> 00:03:11.270
这样的话 可以保证

00:03:11.270 --> 00:03:16.355
所选的资产具有足够高的每日交易量 能够快速履行委托

00:03:16.354 --> 00:03:21.394
需要注意的是 刚刚创建的这个管道是空的

00:03:21.395 --> 00:03:25.340
它还不知道如何计算任何值

00:03:25.340 --> 00:03:29.045
如果我们要求它输出结果的话 它不会生成任何值

00:03:29.044 --> 00:03:33.459
构建管道的下一步是添加因子和过滤器

00:03:33.460 --> 00:03:38.754
接下来我们将介绍管道可以表达的两种计算形式

00:03:38.754 --> 00:03:41.014
即因子和过滤器

00:03:41.014 --> 00:03:43.659
先看看因子

00:03:43.659 --> 00:03:46.189
通常 因子是指

00:03:46.189 --> 00:03:50.504
关于特定时间的资产数值函数

00:03:50.504 --> 00:03:55.313
证券的最近价格就是一个简单的因子示例

00:03:55.313 --> 00:04:01.430
因为证券的最近价格是一个数字 例如 10 美元

00:04:01.430 --> 00:04:04.745
另一方面过滤器是指

00:04:04.745 --> 00:04:08.340
关于特定时间的资产布尔值函数

00:04:08.340 --> 00:04:12.025
布尔值是 true 或 false

00:04:12.025 --> 00:04:14.750
例如 过滤器可以是

00:04:14.750 --> 00:04:18.795
表示证券价格是否低于 5 美元的函数

00:04:18.795 --> 00:04:21.859
因为在任何特定时间点

00:04:21.858 --> 00:04:25.479
这个表述都为 true 或 false

00:04:25.480 --> 00:04:31.050
因子和过滤器的区别是因子返回数值

00:04:31.050 --> 00:04:33.785
而过滤器返回布尔值

00:04:33.785 --> 00:04:36.650
Zipline 内置了一些因子和过滤器

00:04:36.649 --> 00:04:41.069
但是你也可以自定义因子和过滤器

00:04:41.069 --> 00:04:44.620
在学习如何向管道中添加因子及过滤器之前

00:04:44.620 --> 00:04:48.790
我们看看 Pipeline 类的一个实用功能

00:04:48.939 --> 00:04:52.714
Zipline 的 Pipeline 类

00:04:52.714 --> 00:04:55.599
有一个 show_graph 属性

00:04:55.600 --> 00:04:59.245
该属性可以将管道呈现为图表

00:04:59.245 --> 00:05:03.194
这个图表是用 DOT 语言创建的

00:05:03.194 --> 00:05:08.805
所以我们需要使用 DAG 图形布局程序查看渲染的图像

00:05:08.805 --> 00:05:12.605
在此 notebook 中 我们将使用 Graphviz 软件包

00:05:12.605 --> 00:05:16.230
渲染这个 show_graph 属性生成的图表

00:05:16.230 --> 00:05:19.444
我们来看看管道当前的图表

00:05:19.444 --> 00:05:21.420
目前管道是空的

00:05:21.420 --> 00:05:23.574
只包含一个筛选器

00:05:23.574 --> 00:05:26.289
所以在渲染管道时

00:05:26.290 --> 00:05:28.830
只看到筛选器图表

00:05:28.829 --> 00:05:31.779
该筛选器接受输入

00:05:31.779 --> 00:05:35.449
即 USEquityPricing 中的收盘价和交易量

00:05:35.449 --> 00:05:39.894
并设为计算 60 天窗口期内的平均交易量

00:05:39.894 --> 00:05:41.754
在图表底部

00:05:41.754 --> 00:05:47.675
可以看到输出由表达式 x_0 &lt;= 10 决定

00:05:47.675 --> 00:05:52.785
这个表达式表示我们只选择前 10 项资产

00:05:52.785 --> 00:05:55.715
当我们向管道中添加因子和过滤器后

00:05:55.714 --> 00:05:58.484
这个管道将变得越来越复杂

00:05:58.485 --> 00:06:01.460
在此图表中 我们看到筛选器接受的输入是

00:06:01.459 --> 00:06:06.000
USEquityPricing 数据集中的股价和交易量

00:06:06.000 --> 00:06:10.629
所以我们来看看数据集和数据加载器

00:06:10.629 --> 00:06:14.649
Zipline 的另一个功能是

00:06:14.649 --> 00:06:19.019
它会将股票数据的来源与数据集的抽象描述分开

00:06:19.019 --> 00:06:22.060
所以 Zipline 会区分

00:06:22.060 --> 00:06:25.555
实际数据集和数据集的加载器

00:06:25.555 --> 00:06:28.319
例如 USEquityPricing 数据集

00:06:28.319 --> 00:06:32.839
使用的加载器是 USEquityPricingLoader

00:06:32.839 --> 00:06:38.199
USEquityPricingLoader 类还可以用于

00:06:38.199 --> 00:06:41.714
加载其他数据集的 OHLCV 数据

00:06:41.714 --> 00:06:43.810
例如来自 Quotemedia 的数据

00:06:43.810 --> 00:06:48.915
所以我们将数据加载器设为 USEquityPricingLoader

00:06:48.915 --> 00:06:51.379
在添加因子和过滤器之前

00:06:51.379 --> 00:06:55.159
我们看看 Quotemedia 数据包中的原始数据

00:06:55.160 --> 00:06:57.710
需要执行几个步骤

00:06:57.709 --> 00:07:00.750
第一步是构建管道引擎

00:07:00.750 --> 00:07:03.560
为了执行管道

00:07:03.560 --> 00:07:06.670
Zipline 需要部署管道引擎

00:07:06.670 --> 00:07:11.288
这里的 SimplePipelineEngine 类

00:07:11.288 --> 00:07:16.209
会将数据加载器与交易日历和对应的数据包关联起来

00:07:16.209 --> 00:07:21.739
需要注意的是 get_loader 参数必须是可调用的函数

00:07:21.740 --> 00:07:25.120
因为我们在这里对函数进行了这样的定义

00:07:25.120 --> 00:07:27.394
它会选择股价加载器

00:07:27.394 --> 00:07:32.375
我们将使用纽约证交所使用的交易日历

00:07:32.375 --> 00:07:35.120
选择管道引擎后

00:07:35.120 --> 00:07:37.290
我们就可以执行管道了

00:07:37.290 --> 00:07:40.240
我们可以使用

00:07:40.240 --> 00:07:44.939
这个 SimplePipelineEngine 类的 .run_pipeline 属性执行管道

00:07:44.939 --> 00:07:49.125
在此示例中 我们将使管道运行一天

00:07:49.125 --> 00:07:55.464
管道输出是一个 MultiIndex Pandas DataFrame

00:07:55.464 --> 00:07:58.714
第一级索引包含交易日期

00:07:58.714 --> 00:08:00.919
第二级索引包含

00:08:00.920 --> 00:08:04.745
通过筛选器的股票 ticker

00:08:04.745 --> 00:08:09.694
你可以访问这些 ticker 并将其存储到列表中

00:08:09.694 --> 00:08:13.969
获得通过管道筛选器的股票 ticker 后

00:08:13.970 --> 00:08:18.330
我们可以从数据包中获取这些 ticker 的历史股票数据

00:08:18.329 --> 00:08:20.594
为了获得历史数据

00:08:20.595 --> 00:08:23.250
我们需要使用 Zipline 的 DataPortal 类

00:08:23.250 --> 00:08:28.564
DataPortal 是Zipline 模拟所需的所有数据的接口

00:08:28.564 --> 00:08:32.075
像这样创建 DataPortal 后

00:08:32.075 --> 00:08:37.710
我们可以使用 .get_history_window 属性获取历史数据

00:08:37.710 --> 00:08:43.925
表格中显示了从给定开始日期到结束日期的历史数据

00:08:43.924 --> 00:08:47.934
注意 当管道返回日期时

00:08:47.934 --> 00:08:50.259
例如 2011 年 1 月 7 日

00:08:50.259 --> 00:08:54.200
包含的是

00:08:54.200 --> 00:08:58.470
在此日期开盘前已知的数据

00:08:58.470 --> 00:09:01.970
所以 2011 年 1 月 7 日的股价

00:09:01.970 --> 00:09:06.330
实际上是前一天的收盘价

00:09:06.330 --> 00:09:11.514
最后 看看如何向管道中添加因子和过滤器

00:09:11.514 --> 00:09:14.539
我们可以使用 Pipeline 类的 add 方法

00:09:14.539 --> 00:09:18.839
添加因子和过滤器

00:09:18.840 --> 00:09:21.980
add 方法中的第一个参数表示

00:09:21.980 --> 00:09:25.190
要添加到管道中的因子或过滤器

00:09:25.190 --> 00:09:29.900
第二个参数是一个字符串 表示该因子或过滤器

00:09:29.899 --> 00:09:33.769
在输出 DataFrame 中所在列的名称

00:09:33.769 --> 00:09:39.054
我们添加了一个计算 15 天平均收盘价的因子

00:09:39.054 --> 00:09:43.289
下面看看管道渲染效果

00:09:43.289 --> 00:09:47.689
现在可以在管道中清晰地看到因子了

00:09:47.690 --> 00:09:50.005
运行管道后

00:09:50.004 --> 00:09:53.654
可以看到包含因子输出的列

00:09:53.654 --> 00:09:59.589
即通过筛选器的每支股票的 15 天平均收盘价

00:09:59.590 --> 00:10:03.129
下面向管道中添加一个过滤器

00:10:03.129 --> 00:10:07.205
我们创建的过滤器为

00:10:07.205 --> 00:10:11.985
当 15 天平均收盘价高于 100 美元时 返回 true

00:10:11.985 --> 00:10:13.938
正如我之前提到的

00:10:13.938 --> 00:10:19.464
我们可以使用 .add 方法向管道中添加这个过滤器

00:10:19.465 --> 00:10:24.115
下面看看管道渲染效果

00:10:24.115 --> 00:10:30.764
现在可以在图表中看到过滤器 运行管道后

00:10:30.764 --> 00:10:35.449
可以看到有一列中包含过滤器输出

00:10:35.450 --> 00:10:40.690
对于通过筛选器的每支股票

00:10:40.690 --> 00:10:43.515
如果 15 天平均收盘价高于 100 美元 则返回 true

00:10:43.514 --> 00:10:47.519
搞定现在你知道如何创建包含筛选器 因子和过滤器的管道

00:10:47.519 --> 00:10:52.360
以及如何使用管道引擎运行管道

00:10:52.360 --> 00:10:55.220
在下节课 你将练习向管道中

00:10:55.220 --> 00:10:58.120
添加自定义因子和过滤器

