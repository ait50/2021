{
  "data": {
    "lesson": {
      "id": 791863,
      "key": "6a5fa360-2c0f-4573-a0f1-45971d67909c",
      "title": "Model Testing and Evaluation",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn about metrics to evaluate models and about how to avoid over- and underfitting.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/6a5fa360-2c0f-4573-a0f1-45971d67909c/791863/1552687944605/Model+Testing+and+Evaluation+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/6a5fa360-2c0f-4573-a0f1-45971d67909c/791863/1552687940829/Model+Testing+and+Evaluation+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 341208,
          "key": "fbd950e1-c0c3-4102-8807-17af5240967c",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fbd950e1-c0c3-4102-8807-17af5240967c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 348437,
              "key": "05334dea-0ef0-4aeb-abcf-a4f17714e01b",
              "title": "01 Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4C4PuJANIdE",
                "china_cdn_id": "4C4PuJANIdE.mp4"
              }
            }
          ]
        },
        {
          "id": 331319,
          "key": "c2285766-e1ed-4351-b54f-b5325f3b4352",
          "title": "Outline",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c2285766-e1ed-4351-b54f-b5325f3b4352",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385965,
              "key": "a3fda50a-15fd-432b-9799-c213e2df2bc4",
              "title": "02 Intro SC V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mIgABrjJVBY",
                "china_cdn_id": "mIgABrjJVBY.mp4"
              }
            }
          ]
        },
        {
          "id": 331366,
          "key": "5c0c3f6b-753d-4e8a-bec1-4a1e26b60067",
          "title": "Testing your models",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5c0c3f6b-753d-4e8a-bec1-4a1e26b60067",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 331392,
              "key": "3b82828c-0e46-4337-8fa4-a12f8547769a",
              "title": "Testing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gmxGRJSKEb0",
                "china_cdn_id": "gmxGRJSKEb0.mp4"
              }
            },
            {
              "id": 631359,
              "key": "54d0a523-64eb-4f32-ad24-e7b6890e69cf",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "54d0a523-64eb-4f32-ad24-e7b6890e69cf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5242624418643968",
                "initial_code_files": [
                  {
                    "text": "# Import statements \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\n\n# Import the train test split\n# http://scikit-learn.org/0.16/modules/generated/sklearn.cross_validation.train_test_split.html\n\n\n# Read in the data.\ndata = np.asarray(pd.read_csv('data.csv', header=None))\n# Assign the features to the variable X, and the labels to the variable y. \nX = data[:,0:2]\ny = data[:,2]\n\n# Use train test split to split your data \n# Use a test size of 25% and a random state of 42\nX_train, X_test, y_train, y_test = \n\n# Instantiate your decision tree model\nmodel = None\n\n# TODO: Fit the model to the training data.\n\n# TODO: Make predictions on the test data\ny_pred = None\n\n# TODO: Calculate the accuracy and assign it to the variable acc on the test data.\nacc = None",
                    "name": "quiz.py"
                  },
                  {
                    "text": "0.24539,0.81725,0\n0.21774,0.76462,0\n0.20161,0.69737,0\n0.20161,0.58041,0\n0.2477,0.49561,0\n0.32834,0.44883,0\n0.39516,0.48099,0\n0.39286,0.57164,0\n0.33525,0.62135,0\n0.33986,0.71199,0\n0.34447,0.81433,0\n0.28226,0.82602,0\n0.26613,0.75,0\n0.26613,0.63596,0\n0.32604,0.54825,0\n0.28917,0.65643,0\n0.80069,0.71491,0\n0.80069,0.64181,0\n0.80069,0.50146,0\n0.79839,0.36988,0\n0.73157,0.25,0\n0.63249,0.18275,0\n0.60023,0.27047,0\n0.66014,0.34649,0\n0.70161,0.42251,0\n0.70853,0.53947,0\n0.71544,0.63304,0\n0.74309,0.72076,0\n0.75,0.63596,0\n0.75,0.46345,0\n0.72235,0.35526,0\n0.66935,0.28509,0\n0.20622,0.94298,1\n0.26613,0.8962,1\n0.38134,0.8962,1\n0.42051,0.94591,1\n0.49885,0.86404,1\n0.31452,0.93421,1\n0.53111,0.72076,1\n0.45276,0.74415,1\n0.53571,0.6038,1\n0.60484,0.71491,1\n0.60945,0.58333,1\n0.51267,0.47807,1\n0.50806,0.59211,1\n0.46198,0.30556,1\n0.5288,0.41082,1\n0.38594,0.35819,1\n0.31682,0.31433,1\n0.29608,0.20906,1\n0.36982,0.27632,1\n0.42972,0.18275,1\n0.51498,0.10965,1\n0.53111,0.20906,1\n0.59793,0.095029,1\n0.73848,0.086257,1\n0.83065,0.18275,1\n0.8629,0.10965,1\n0.88364,0.27924,1\n0.93433,0.30848,1\n0.93433,0.19444,1\n0.92512,0.43421,1\n0.87903,0.43421,1\n0.87903,0.58626,1\n0.9182,0.71491,1\n0.85138,0.8348,1\n0.85599,0.94006,1\n0.70853,0.94298,1\n0.70853,0.87281,1\n0.59793,0.93129,1\n0.61175,0.83187,1\n0.78226,0.82895,1\n0.78917,0.8962,1\n0.90668,0.89912,1\n0.14862,0.92251,1\n0.15092,0.85819,1\n0.097926,0.85819,1\n0.079493,0.91374,1\n0.079493,0.77632,1\n0.10945,0.79678,1\n0.12327,0.67982,1\n0.077189,0.6886,1\n0.081797,0.58626,1\n0.14862,0.58041,1\n0.14862,0.5307,1\n0.14171,0.41959,1\n0.08871,0.49269,1\n0.095622,0.36696,1\n0.24539,0.3962,1\n0.1947,0.29678,1\n0.16935,0.22368,1\n0.15553,0.13596,1\n0.23848,0.12427,1\n0.33065,0.12427,1\n0.095622,0.2617,1\n0.091014,0.20322,1\n",
                    "name": "data.csv"
                  },
                  {
                    "text": "# Import statements \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\n\n# Import the train test split\n# http://scikit-learn.org/0.16/modules/generated/sklearn.cross_validation.train_test_split.html\nfrom sklearn.cross_validation import train_test_split\n\n# Read the data.\ndata = np.asarray(pd.read_csv('data.csv', header=None))\n# Assign the features to the variable X, and the labels to the variable y. \nX = data[:,0:2]\ny = data[:,2]\n\n# Use train test split to split your data \n# Use a test size of 25% and a random state of 42\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# TODO: Create the decision tree model and assign it to the variable model.\nmodel = DecisionTreeClassifier()\n\n# TODO: Fit the model to the training data.\nmodel.fit(X_train,y_train)\n\n# TODO: Make predictions on the test data\ny_pred = model.predict(X_test)\n\n# TODO: Calculate the accuracy and assign it to the variable acc. on the test data\nacc = accuracy_score(y_test, y_pred)\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 331327,
          "key": "2034dd12-8ffc-4753-b8f4-c6042487ea5d",
          "title": "Confusion Matrix",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2034dd12-8ffc-4753-b8f4-c6042487ea5d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339741,
              "key": "c8f28e0a-a490-4ab4-9acb-b3b26fbd30af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Confusion Matrix",
              "instructor_notes": ""
            },
            {
              "id": 331394,
              "key": "d6bf98ec-c82b-4ed0-81b9-878d7c0602a6",
              "title": "Confusion Matrix-Question 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9GLNjmMUB_4",
                "china_cdn_id": "9GLNjmMUB_4.mp4"
              }
            },
            {
              "id": 331418,
              "key": "73ad5a1e-53df-494e-b0b5-8eafb84d317b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/5944c743_confusion/confusion.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/73ad5a1e-53df-494e-b0b5-8eafb84d317b",
              "caption": "In this image, the blue points are labelled positive, and the red points are labelled negative.\nFurthermore, the points on top of the line are predicted (guessed) to be positive, and the points below the line are predicted to be negative.",
              "alt": "",
              "width": 1752,
              "height": 835,
              "instructor_notes": null
            },
            {
              "id": 331419,
              "key": "427c965e-6215-42dc-91ee-91fbc42ce010",
              "title": "Confusion Matrix Quiz",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "427c965e-6215-42dc-91ee-91fbc42ce010",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many True Positives, True Negatives, False Positives, and False Negatives, are in the model above?\nPlease enter your answer in that order, as four numbers separated by a comma and a space. For example, if your answers are 1, 2, 3, and 4, enter the string `1, 2, 3, 4`.\n\nRemember, in the image above the blue points are considered positives and the red points are considered negatives.",
                "matchers": [
                  {
                    "expression": "6, 5, 2, 1 "
                  },
                  {
                    "expression": "6521"
                  },
                  {
                    "expression": "6,5,2,1"
                  },
                  {
                    "expression": "6\\s*,?\\s*5\\s*,?\\s*2\\s*,?\\s*1"
                  }
                ]
              }
            },
            {
              "id": 514190,
              "key": "370eeccc-ac37-4bc7-8c1e-be5d426ef24e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Type 1 and Type 2 Errors\n\nSometimes in the literature, you'll see False Positives and False Negatives as Type 1 and Type 2 errors. Here is the correspondence:\n- **Type 1 Error (Error of the first kind, or False Positive):** In the medical example, this is when we misdiagnose a healthy patient as sick.\n- **Type 2 Error (Error of the second kind, or False Negative):** In the medical example, this is when we misdiagnose a sick patient as healthy.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 379492,
          "key": "add147d9-b7ac-44e0-8a20-5ffd9de36535",
          "title": "Confusion Matrix 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "add147d9-b7ac-44e0-8a20-5ffd9de36535",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 379493,
              "key": "f671e38f-d1fd-4a02-939b-5629444ec3a3",
              "title": "Confusion-Matrix-Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ywwSzyU9rYs",
                "china_cdn_id": "ywwSzyU9rYs.mp4"
              }
            }
          ]
        },
        {
          "id": 331328,
          "key": "f094bb62-02be-42e0-9803-8d0af1917f70",
          "title": "Accuracy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f094bb62-02be-42e0-9803-8d0af1917f70",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 331395,
              "key": "6900a066-98a3-476d-843f-fc6f3ed440bf",
              "title": "Accuracy",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "s6SfhPTNOHA",
                "china_cdn_id": "s6SfhPTNOHA.mp4"
              }
            },
            {
              "id": 348145,
              "key": "86c28151-11f0-4d15-ab06-8f038780a690",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz",
              "instructor_notes": ""
            },
            {
              "id": 348144,
              "key": "1fb8fdaa-d6d5-4f49-80c1-9aa1498b7a4d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/July/596d44d1_accuracy-quiz/accuracy-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1fb8fdaa-d6d5-4f49-80c1-9aa1498b7a4d",
              "caption": "",
              "alt": null,
              "width": 1265,
              "height": 617,
              "instructor_notes": null
            },
            {
              "id": 331420,
              "key": "0c7c1a5d-89d7-4bd2-9043-3456fb30f431",
              "title": "Accuracy Quiz",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0c7c1a5d-89d7-4bd2-9043-3456fb30f431",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the accuracy of the model above? Please enter the answer as a percentage, with two decimals. For example, `54.75`.",
                "matchers": [
                  {
                    "expression": "78.57"
                  },
                  {
                    "expression": "78.56"
                  },
                  {
                    "expression": "78.57%"
                  },
                  {
                    "expression": "78.56%"
                  },
                  {
                    "expression": "78.5"
                  },
                  {
                    "expression": "78.6"
                  },
                  {
                    "expression": "78.5%"
                  },
                  {
                    "expression": "78.6%"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 379494,
          "key": "e8085600-b060-4486-adbb-f61b28a6fecc",
          "title": "Accuracy 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e8085600-b060-4486-adbb-f61b28a6fecc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 379495,
              "key": "bb7d5533-d730-4cb2-855c-76cd7ac00c8f",
              "title": "Accuracy 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ueYCLfd_aNQ",
                "china_cdn_id": "ueYCLfd_aNQ.mp4"
              }
            }
          ]
        },
        {
          "id": 331329,
          "key": "00b4f6bf-dcd1-4f96-9c7d-69374b03c238",
          "title": "When accuracy won't work",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "00b4f6bf-dcd1-4f96-9c7d-69374b03c238",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385966,
              "key": "208c53d2-2efc-40b0-9021-0a7d1d43b3f4",
              "title": "When Accuracy Wont Work",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "r0-O-gIDXZ0",
                "china_cdn_id": "r0-O-gIDXZ0.mp4"
              }
            },
            {
              "id": 966904,
              "key": "1aa79a66-91d0-402b-9f7a-ec6ccc1f6d22",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The denominator for accuracy in the video should actually be 284,807 instead of 284,887.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 331330,
          "key": "93cb284f-09cc-459c-b65d-dd1593eda61c",
          "title": "False Negatives and Positives",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "93cb284f-09cc-459c-b65d-dd1593eda61c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339742,
              "key": "1240e361-988e-4410-bd8e-e9f1cf2fd18a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# False Negatives and Positives",
              "instructor_notes": ""
            },
            {
              "id": 385968,
              "key": "c38e8f8c-b1cc-43f8-b872-dfa331700a20",
              "title": "04 Quiz False Negatives And Positives SC V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_ytP9zIkziw",
                "china_cdn_id": "_ytP9zIkziw.mp4"
              }
            },
            {
              "id": 339743,
              "key": "5598678d-4b8a-40ce-8627-637a27fface8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz 1: The Medical Model",
              "instructor_notes": ""
            },
            {
              "id": 346840,
              "key": "151f1090-2ddd-4062-8c04-8335ea068a46",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/July/596ba948_medical/medical.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/151f1090-2ddd-4062-8c04-8335ea068a46",
              "caption": "",
              "alt": "",
              "width": 870,
              "height": 542,
              "instructor_notes": null
            },
            {
              "id": 331423,
              "key": "3b3df07f-e672-4354-b0a8-b8177888c31b",
              "title": "Medical Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3b3df07f-e672-4354-b0a8-b8177888c31b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the medical example, what is worse, a False Positive, or a False Negative?",
                "answers": [
                  {
                    "id": "a1497680318835",
                    "text": "False Positive",
                    "is_correct": false
                  },
                  {
                    "id": "a1497680346799",
                    "text": "False Negative",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 346841,
              "key": "beb74a31-a8e2-416c-bf5c-8f9f1214191c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/July/596ba95d_email/email.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/beb74a31-a8e2-416c-bf5c-8f9f1214191c",
              "caption": "",
              "alt": "",
              "width": 851,
              "height": 548,
              "instructor_notes": null
            },
            {
              "id": 331424,
              "key": "a9dd40e2-fcfc-447d-9c91-80e1c6318886",
              "title": "Grandma Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a9dd40e2-fcfc-447d-9c91-80e1c6318886",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the spam detector example, what is worse, a False Positive, or a False Negative?",
                "answers": [
                  {
                    "id": "a1497680467639",
                    "text": "False Positive",
                    "is_correct": true
                  },
                  {
                    "id": "a1497680481557",
                    "text": "False Negative",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 331331,
          "key": "72f25a6a-d6f7-4dcb-894d-cdad9b060c35",
          "title": "Precision and Recall",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "72f25a6a-d6f7-4dcb-894d-cdad9b060c35",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385969,
              "key": "d1aa9588-2c99-48f8-9aa3-c83a1ae537b7",
              "title": "Answer False Negatives And Positives",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KOytJL1lvgg",
                "china_cdn_id": "KOytJL1lvgg.mp4"
              }
            },
            {
              "id": 675090,
              "key": "a926891f-2ba8-4f9d-bdc3-d7443d6b6220",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Corrections:** At 0:11, \"false negative\" and \"false positive\" are swapped. In this case, a false _negative_ is much worse than a false _positive_, since predicting that a sick person is healthy is much more dangerous than predicting that a healthy person is sick.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 331332,
          "key": "dd22bf82-f166-4355-b53f-98c482f63699",
          "title": "Precision",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dd22bf82-f166-4355-b53f-98c482f63699",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339744,
              "key": "4360dffb-f0a7-4b95-bc41-5a6c1f877b1e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Precision",
              "instructor_notes": ""
            },
            {
              "id": 385970,
              "key": "b4140310-3246-473b-a192-bee2910d515c",
              "title": "06 Precision SC V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "q2wVorBfefU",
                "china_cdn_id": "q2wVorBfefU.mp4"
              }
            },
            {
              "id": 346845,
              "key": "20fd531f-31d5-4c32-993d-78d19317c615",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Precision Quiz",
              "instructor_notes": ""
            },
            {
              "id": 462410,
              "key": "b5bf9314-7e01-4203-8951-7fc9a029e20c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0a9b29_precision-quiz/precision-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b5bf9314-7e01-4203-8951-7fc9a029e20c",
              "caption": "In this image, the blue points are labelled positive, and the red points are labelled negative.\nFurthermore, the points on top of the line are predicted to be positive, and the points below the line are predicted to be negative.",
              "alt": "",
              "width": 1848,
              "height": 450,
              "instructor_notes": null
            },
            {
              "id": 331426,
              "key": "f3f24788-6b29-4fb5-a57a-4b2a8c5a4ce6",
              "title": "Precision Quiz",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f3f24788-6b29-4fb5-a57a-4b2a8c5a4ce6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the precision of the linear model above? Please write the number as a decimal, like **0.45** or as a fraction, like **3/5**.",
                "matchers": [
                  {
                    "expression": "0.75"
                  },
                  {
                    "expression": "3/4"
                  },
                  {
                    "expression": "6/8"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 331333,
          "key": "944ae914-395f-4e65-a5f3-0ac24593c861",
          "title": "Recall",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "944ae914-395f-4e65-a5f3-0ac24593c861",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 346851,
              "key": "d3cf1e24-0b74-4cd5-b99e-24e52fc2f3d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recall",
              "instructor_notes": ""
            },
            {
              "id": 385971,
              "key": "f06a2112-5482-4758-840b-43f112f482dc",
              "title": "07 Recall SC V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0n5wUZiefkQ",
                "china_cdn_id": "0n5wUZiefkQ.mp4"
              }
            },
            {
              "id": 346848,
              "key": "c9d9c531-20d2-4fd2-9799-318a2bc3a290",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recall Quiz",
              "instructor_notes": ""
            },
            {
              "id": 463971,
              "key": "aa01755f-0169-4ad5-9c28-f142e0b27160",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a1215e7_recall-quiz/recall-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/aa01755f-0169-4ad5-9c28-f142e0b27160",
              "caption": "In this image, the blue points are labelled positive, and the red points are labelled negative.\nFurthermore, the points on top of the line are predicted to be positive, and the points below the line are predicted to be negative.\n_Note:_ This image has one extra point than the one in the video. This is the correct image.",
              "alt": "",
              "width": 1848,
              "height": 450,
              "instructor_notes": null
            },
            {
              "id": 331433,
              "key": "410f033b-76a1-413c-bdf8-9e2ef12dea67",
              "title": "Recall Quiz",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "410f033b-76a1-413c-bdf8-9e2ef12dea67",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the recall of the linear model above? Please write your number as a decimal, like **0.45** or as a fraction, like **3/5**.",
                "matchers": [
                  {
                    "expression": "0.85"
                  },
                  {
                    "expression": "0.86"
                  },
                  {
                    "expression": "0.857"
                  },
                  {
                    "expression": "6/7"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 331472,
          "key": "c21db724-de37-4b72-8ee5-0811b3b98f7b",
          "title": "Types of Errors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c21db724-de37-4b72-8ee5-0811b3b98f7b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 331473,
              "key": "06935d96-c3c0-4f1d-bff6-51fb1cd7ffb1",
              "title": "04 L Types Of Errors",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Twf1qnPZeSY",
                "china_cdn_id": "Twf1qnPZeSY.mp4"
              }
            }
          ]
        },
        {
          "id": 331406,
          "key": "5336629a-1eb2-4a56-a462-e3297d9827cf",
          "title": "Model Complexity Graph",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5336629a-1eb2-4a56-a462-e3297d9827cf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 331411,
              "key": "6fd93ac6-277e-4673-b3a3-8bbfe7ed933b",
              "title": "Model Complexity Graph-Question",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YS5OQCA5cLY",
                "china_cdn_id": "YS5OQCA5cLY.mp4"
              }
            },
            {
              "id": 348155,
              "key": "bed89933-7cd1-422a-8c9f-a51ae3b89748",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/July/596d4a0b_complexity/complexity.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bed89933-7cd1-422a-8c9f-a51ae3b89748",
              "caption": "",
              "alt": null,
              "width": 1002,
              "height": 602,
              "instructor_notes": null
            },
            {
              "id": 348157,
              "key": "d1af5b8c-33e1-47a6-955f-2da797052968",
              "title": "Model Complexity Graph Quiz",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d1af5b8c-33e1-47a6-955f-2da797052968",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the model above, how many training and testing errors are there?\nPlease enter your answer as a string composed of the two numbers, separated by a comma and a space. For example, if you find 1 training error and 4 testing errors, your answer should be `1, 4`.",
                "matchers": [
                  {
                    "expression": "0, 2"
                  },
                  {
                    "expression": "0,2"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 348158,
          "key": "d9bb8167-05da-4fff-a7d1-cc6b4a88ae6d",
          "title": "Cross Validation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d9bb8167-05da-4fff-a7d1-cc6b4a88ae6d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 348159,
              "key": "8260431b-7521-4087-a75b-598a2d3b9dd0",
              "title": "Model-Complexity-Graph Solution 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5pWHGkNyRhA",
                "china_cdn_id": "5pWHGkNyRhA.mp4"
              }
            }
          ]
        },
        {
          "id": 331474,
          "key": "a5290356-4c84-4cd0-9af3-dc8e06117fb4",
          "title": "K-Fold Cross Validation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5290356-4c84-4cd0-9af3-dc8e06117fb4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 797601,
              "key": "caff4a4d-eaf2-4551-b278-6e14bc89a19a",
              "title": "KFold Cross Validation V3 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9W6o6eWGi-0",
                "china_cdn_id": "9W6o6eWGi-0.mp4"
              }
            }
          ]
        },
        {
          "id": 827473,
          "key": "f6c404b3-bfdf-47f8-8a5f-584a5a6e14b3",
          "title": "Cross Validation for Time Series",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f6c404b3-bfdf-47f8-8a5f-584a5a6e14b3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827474,
              "key": "107bccae-058a-4465-9296-00bb17ecb7c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Cross Validation for Time Series\n\nMethods for choosing training, testing and validation sets for time-series data work a little differently than the methods described so far. The main reasons we cannot use the previously described methods exactly as described are,\n\n1. We want our validation and testing procedure to mimic the way our model would work in production. In production, it's impossible to train on _data from the future_. Accordingly, _training_ on data that occurred _later in time_ than the _validation_ or _test_ data is problematic.\n2. Time series data can have the property that data from later times are dependent on data from earlier times. Therefore, leaving out an observation does not remove all the associated information due to correlations with other observations.\n\nHow do we modify cross validation procedures to treat time-series data? A common method is to divide the data in the following manner:\n\n",
              "instructor_notes": ""
            },
            {
              "id": 830402,
              "key": "05ed2640-26d7-40ff-93c2-ae86a8714f5c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6ca9d8_time-series-validation-2/time-series-validation-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/05ed2640-26d7-40ff-93c2-ae86a8714f5c",
              "caption": "",
              "alt": "",
              "width": 665,
              "height": 392,
              "instructor_notes": null
            },
            {
              "id": 830419,
              "key": "da7deeb3-40ac-4a48-80d2-8b721cdb3c75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This way, each training set consists only of observations that occurred prior to the observations that form the validation set. Likewise, both the training and validation sets consist only of observations that occurred prior to the observations that form the test set. Thus, no future observations can be used in constructing the forecast.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 830426,
          "key": "9be1a25a-5265-4a96-8b7b-3b5e7bd0a9ec",
          "title": "Validation for Financial Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9be1a25a-5265-4a96-8b7b-3b5e7bd0a9ec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830427,
              "key": "abdd1d1f-7fbb-4e0b-ac44-8df9075fcc28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Validation for Financial Data\n\nFurthermore, when working with financial data, we can bring practitioners' knowledge of markets and financial data to bear on our validation procedures. We know that since markets are competitive, factors decay over time; signals that may have worked well in the past may no longer work well by the current time. For this reason, we should generally test and validate on the most recent data possible, as testing on the recent past could be considered the most demanding test. \n\nIt's possible that the design of the model may cause it to perform better or worse in different market regimes; so the most recent time period may not be in a market regime in which the model would perform well. But generally, we still prefer to use most recent data to test if the model would work in the time most similar to the present. In practice, of course, before investing a lot of money in a strategy, we would allow time to elapse without changing the model, and test its performance with this true out-of-sample data: what's known as \"paper trading\".\n\nIn summary, most common practice is to **keep a block of data from the most recent time period as your _test_ set.**\n\nThen, the data are split into train, valid and test sets according to the following schematic:",
              "instructor_notes": ""
            },
            {
              "id": 830431,
              "key": "ae86ee11-d635-420e-bcac-3ffb577d149c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6ca81b_train-valid-test-time-2/train-valid-test-time-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ae86ee11-d635-420e-bcac-3ffb577d149c",
              "caption": "",
              "alt": "",
              "width": 665,
              "height": 173,
              "instructor_notes": null
            },
            {
              "id": 830448,
              "key": "b6f73abd-37ef-402f-bf68-d7d7e251b6f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When working with data that are indexed by asset and day, it's important not to split data for the same day, but for different assets, among sets. This would manifest as a subtle form of lookahead bias. For example, say data from Coca-Cola and Pepsi for the same day ended up in different sets. Since they are very similar companies, one might expect their share price trends to be correlated. If the model were trained on data from one company, and then validated on data from the other company, it might \"learn\" about a price movement that affects both companies, and therefore have artificially inflated performance on the validation set.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 331407,
          "key": "ddc42022-25b1-41e7-9daa-a9e9a0614e9f",
          "title": "Learning Curves",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ddc42022-25b1-41e7-9daa-a9e9a0614e9f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385977,
              "key": "9d4dc4af-ac8a-4787-bb15-01013b870620",
              "title": "Learning Curves SC V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "_Correction: In the first plots, the horizontal axis is labeled \"Degree\", and it should labeled \"Number of Training Points\"._\n_At 4:10: The graph represents  *High Variance* to the left side of the video instead of  *High Bias*_",
              "video": {
                "youtube_id": "ZNhnNVKl8NM",
                "china_cdn_id": "ZNhnNVKl8NM.mp4"
              }
            }
          ]
        },
        {
          "id": 331476,
          "key": "c1d77b32-2c63-4cf3-ab9b-3c07470df57c",
          "title": "Detecting Overfitting and Underfitting with Learning Curves",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c1d77b32-2c63-4cf3-ab9b-3c07470df57c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339788,
              "key": "0aed84fb-b40d-47fd-a80f-e6dada5cb20c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Detect Overfitting and Underfitting with Learning Curves\n\nFor this quiz, we'll be using three models to train the circular dataset below.\n- A Decision Tree model,\n- a Logistic Regression model, and\n- a Support Vector Machine model.",
              "instructor_notes": ""
            },
            {
              "id": 339804,
              "key": "527610a8-c712-457f-8763-04498c4e574f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/594dc6ee_circle-data/circle-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/527610a8-c712-457f-8763-04498c4e574f",
              "caption": "",
              "alt": null,
              "width": 370,
              "height": 245,
              "instructor_notes": null
            },
            {
              "id": 339746,
              "key": "087bf7e2-40c1-432c-bfb7-c0f9bbb50c51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One of the models overfits, one underfits, and the other one is just right. First, we'll write some code to draw the learning curves for each model, and finally we'll look at the learning curves to decide which model is which.\n\nFirst, let's remember that the way the curves look for the three models, is as follows:",
              "instructor_notes": ""
            },
            {
              "id": 339784,
              "key": "d6e3d17e-3e98-4b88-815e-d5550ce5a671",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/594dbe26_learning-curves/learning-curves.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d6e3d17e-3e98-4b88-815e-d5550ce5a671",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 815,
              "instructor_notes": null
            },
            {
              "id": 339786,
              "key": "cfe5a4f2-025f-4f22-a1c7-4ff09e237f22",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For the first part of the quiz, all you need is to uncomment one of the classifiers, and hit 'Test Run' to see the graph of the Learning Curve. But if you like coding, here are some details. We'll be using the function called `learning_curve`:\n\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=None, n_jobs=1, train_sizes=np.linspace(.1, 1.0, num_trainings))\n\nNo need to worry about all the parameters of this function (you can read some more in [here](http://scikit-learn.org/stable/auto_examples/model_selection/plot_learning_curve.html), but here we'll explain the main ones:\n- `estimator`, is the actual classifier we're using for the data, e.g., `LogisticRegression()` or `GradientBoostingClassifier()`.\n- `X` and `y` is our data, split into features and labels.\n- `train_sizes` are the sizes of the chunks of data used to draw each point in the curve.\n- ` train_scores` are the training scores for the algorithm trained on each chunk of data.\n- ` test_scores` are the testing scores for the algorithm trained on each chunk of data.\n\nTwo very important observations:\n- The training and testing scores come in as a list of 3 values, and this is because the function uses 3-Fold Cross-Validation.\n- **Very important:** As you can see, we defined our curves with Training and Testing **Error**, and this function defines them with Training and Testing **Score**. These are opposite, so the higher the error, the lower the score. Thus, when you see the curve, you need to flip it upside down in your mind, in order to compare it with the curves above.\n\n### Part 1: Drawing the learning curves\n\nIn here, we'll be comparing three models:\n- A **Logistic Regression** model.\n- A **Decision Tree** model.\n- A **Support Vector Machine** model with an rbf kernel, and a gamma parameter of 1000 (this is another type of model, don't worry about how it works for now).\n\nUncomment the code for each one, and examine the learning curve that gets drawn. If you're curious about the code used to draw the learning curves, it's on the **utils.py** tab.",
              "instructor_notes": ""
            },
            {
              "id": 339787,
              "key": "c1f9d2d9-bccb-48cb-a6df-9090a91cec26",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "c1f9d2d9-bccb-48cb-a6df-9090a91cec26",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5131883301175296",
                "initial_code_files": [
                  {
                    "text": "# Import, read, and split data\nimport pandas as pd\ndata = pd.read_csv('data.csv')\nimport numpy as np\nX = np.array(data[['x1', 'x2']])\ny = np.array(data['y'])\n\n# Fix random seed\nnp.random.seed(55)\n\n### Imports\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\n\n# TODO: Uncomment one of the three classifiers, and hit \"Test Run\"\n# to see the learning curve. Use these to answer the quiz below.\n\n### Logistic Regression\n#estimator = LogisticRegression()\n\n### Decision Tree\n#estimator = GradientBoostingClassifier()\n\n### Support Vector Machine\n#estimator = SVC(kernel='rbf', gamma=1000)",
                    "name": "quiz.py"
                  },
                  {
                    "text": "from sklearn.model_selection import learning_curve\n\n# It is good to randomize the data before drawing Learning Curves\ndef randomize(X, Y):\n    permutation = np.random.permutation(Y.shape[0])\n    X2 = X[permutation,:]\n    Y2 = Y[permutation]\n    return X2, Y2\n\nX2, y2 = randomize(X, y)\n\ndef draw_learning_curves(X, y, estimator, num_trainings):\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X2, y2, cv=None, n_jobs=1, train_sizes=np.linspace(.1, 1.0, num_trainings))\n\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    plt.grid()\n\n    plt.title(\"Learning Curves\")\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n\n    plt.plot(train_scores_mean, 'o-', color=\"g\",\n             label=\"Training score\")\n    plt.plot(test_scores_mean, 'o-', color=\"y\",\n             label=\"Cross-validation score\")\n\n\n    plt.legend(loc=\"best\")\n\n    plt.show()",
                    "name": "utils.py"
                  },
                  {
                    "text": "x1,x2,y\n0.336493583877,-0.985950993354,-1.0\n-0.0110425297266,-0.10552856162,1.0\n0.238159509297,-0.61741666482,1.0\n-0.366782883496,-0.713818716912,1.0\n1.22192307438,-1.03939898614,-1.0\n-1.30456799971,0.59261847015,-1.0\n-0.407809098981,-0.509110509763,1.0\n0.893188941965,1.18285985648,-1.0\n-0.00546337259365,-0.589551228864,1.0\n0.406423768278,0.611062234636,1.0\n-0.145506766722,0.0365463997206,1.0\n-0.0404887876421,-0.0566500319512,1.0\n1.60355997627,0.0908139379574,-1.0\n-0.604838450284,-0.111340204903,1.0\n-0.534401237223,-1.04875779188,-1.0\n0.977706756346,-1.35281793296,-1.0\n-0.422036924523,-0.274418973593,1.0\n1.69051344717,-0.929766839195,-1.0\n0.655534595433,-0.244533046405,1.0\n0.384609916121,-0.334328465856,1.0\n-0.109341027267,0.273694976361,1.0\n-1.28710021847,-0.406756443289,-1.0\n0.435217566287,-0.192221316649,1.0\n0.0555208008113,1.024011876,-1.0\n1.5088217057,-0.799489053235,-1.0\n0.75932306599,0.775189603256,-1.0\n0.967078497167,-0.707726241999,-1.0\n-0.0231301769156,1.34060202328,-1.0\n-0.274591142835,-0.549682228079,1.0\n-1.2080749077,-1.41385342554,-1.0\n0.381259079564,-0.852947496234,1.0\n0.404870623291,-0.38564643089,1.0\n0.0173135930664,0.787433467901,1.0\n-0.650474497449,0.377281547969,1.0\n-0.175095703948,0.557524657143,1.0\n0.090747012995,0.146764389396,1.0\n-0.23406335446,-1.14282728744,-1.0\n-0.023240502157,0.0329251073349,1.0\n-0.98177853269,-0.614024199162,-1.0\n0.863118366276,0.626452589641,-1.0\n-0.494201528321,-1.2458627184,-1.0\n0.560657440533,0.960463847964,-1.0\n0.517532460272,-1.015620433,-1.0\n-1.07674778462,1.64110648889,-1.0\n-0.40295146753,1.74395283754,-1.0\n1.26250128528,-0.0880456579187,-1.0\n-1.13554604657,0.691274079866,-1.0\n-1.88154070755,0.579520022541,-1.0\n1.61949373896,-1.16815366758,-1.0\n-0.167382068846,0.318140979545,1.0\n-0.731515970032,-0.626052631824,1.0\n0.14962052078,1.24000574432,-1.0\n1.16720084422,0.521580749715,-1.0\n-0.436063303539,0.043680311306,1.0\n-0.827638902506,0.275166403707,1.0\n1.36953107467,0.971233523422,-1.0\n0.690612759144,-1.27804624607,-1.0\n1.26986688391,0.575808793135,-1.0\n0.208866020688,-0.146742455013,1.0\n-0.437203222578,0.52116507147,1.0\n-0.378363762158,-0.0769780148552,1.0\n-0.423820115256,-0.836137209863,1.0\n-0.560756181289,-0.41037775405,1.0\n0.336052960763,-0.224802048045,1.0\n-1.33543072512,-0.990358481473,-1.0\n-0.0289733996866,0.441010128386,1.0\n-1.3193906415,-0.37764709941,-1.0\n-0.808411080806,1.2283790386,-1.0\n1.35995943884,1.12161870845,-1.0\n-0.872069364163,-0.252522725967,1.0\n-1.88887517471,0.144098536459,-1.0\n1.60845822722,-0.774759253864,-1.0\n-0.358639909549,0.784305199745,1.0\n0.520332593218,-0.62185400704,1.0\n0.306204273961,0.25448089669,1.0\n-1.51072939376,0.00594704976351,-1.0\n0.956067338203,-0.533023015577,-1.0\n0.288866739458,-0.725155662248,1.0\n0.403468553933,-1.75945770781,-1.0\n0.0859415686163,-0.958846823471,1.0\n0.381957047469,0.0124143718471,1.0\n0.336004016976,-0.259620737798,1.0\n1.02869639688,-0.785051442286,-1.0\n-0.181058441906,0.00266871780379,1.0\n0.279139768315,0.148068778283,1.0\n-0.700587484192,0.118422440942,1.0\n-0.474343136475,-0.162548759675,1.0\n-1.29581526521,0.755926314388,-1.0\n0.140673267698,-1.60264376179,-1.0\n0.328196143279,0.444738575921,1.0\n-0.940761503292,-1.00437673463,-1.0\n0.4177654822,1.11423358886,-1.0\n-0.802874871784,-1.27790346857,-1.0\n-0.596842011584,0.593623894204,1.0\n-0.112331263254,0.174318514314,1.0\n-1.45753325136,-1.30679050369,-1.0\n1.63561447039,0.27394296313,-1.0\n0.113120402388,0.0204651461722,1.0\n0.753405102224,0.1938301221,1.0\n-0.538129041247,-0.000723035827331,1.0\n",
                    "name": "data.csv"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 340529,
              "key": "66617ef9-1d21-4748-86dc-bacd99d11de3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Part 2: Analyzing the learning curves\nFor this second part of the quiz, you can look at the curves you've drawn before, to decide which one of the three models underfits, which one overfits, and which one is just right.",
              "instructor_notes": ""
            },
            {
              "id": 339824,
              "key": "ccead897-592e-409c-87e8-315514580830",
              "title": "Underfitting Overfitting Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ccead897-592e-409c-87e8-315514580830",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "From the models above, which model underfits, which one overfits, and which one is just right?"
                },
                "concepts_label": "Model",
                "answers_label": "Overfits, Undefits, Just Right?",
                "concepts": [
                  {
                    "text": "Logistic Regression",
                    "correct_answer": {
                      "id": "a1498269860285",
                      "text": "Underfits"
                    }
                  },
                  {
                    "text": "Decision Tree",
                    "correct_answer": {
                      "id": "a1498269910514",
                      "text": "Just Right"
                    }
                  },
                  {
                    "text": "Support Vector Machine",
                    "correct_answer": {
                      "id": "a1498269911319",
                      "text": "Overfit"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1498269911319",
                    "text": "Overfit"
                  },
                  {
                    "id": "a1498269910514",
                    "text": "Just Right"
                  },
                  {
                    "id": "a1498269860285",
                    "text": "Underfits"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 339825,
          "key": "4ec344f3-4512-43bb-8a14-ccad4c665ec1",
          "title": "Solution: Detecting Overfitting and Underfitting",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4ec344f3-4512-43bb-8a14-ccad4c665ec1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339826,
              "key": "b8829466-4775-4d43-a314-53efb8bca304",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Using Learning Curves to Detect Overfitting and Underfitting\n\nCongratulations! That was not an easy quiz. Here are the curves you should have obtained:",
              "instructor_notes": ""
            },
            {
              "id": 340532,
              "key": "b926b5b8-fdb5-46c9-9089-c9ba9debda65",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/5952e130_learning-curves/learning-curves.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b926b5b8-fdb5-46c9-9089-c9ba9debda65",
              "caption": "",
              "alt": null,
              "width": 5120,
              "height": 1352,
              "instructor_notes": null
            },
            {
              "id": 340533,
              "key": "cf5aed68-2a2c-41ae-aad1-f0a1f4479985",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We can observe from the curves that:\n- The **Logistic Regression** model has a low training and testing score.\n- The **Decision Tree** model has a high training and testing score.\n- The **Support Vector Machine** model has a high training score, and a low testing score.\n\nFrom here, we can determine that the Logistic Regression model underfits, the SVM model overfits, and the Decision Tree model is just right.\n\nEquivalently, we can flip this curves (as they measure score, and our original curves measure error), and compare them with the following three curves, we can see that they look a lot like the three curves we saw before. (*Note: The fact that we flip the curves doesn't mean that the error is 1 minus the score. It only means that as the model gets better, the error decreases, and the score increases.)*",
              "instructor_notes": ""
            },
            {
              "id": 340534,
              "key": "84de0168-f0cc-4844-923d-9410cd264247",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/594dbe26_learning-curves/learning-curves.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/84de0168-f0cc-4844-923d-9410cd264247",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 815,
              "instructor_notes": null
            },
            {
              "id": 340536,
              "key": "af52f28b-5427-4448-b06d-4f370559880f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, we should check if this is visible in the actual model. When we plot the boundary curves for each one of these models, we get the following:",
              "instructor_notes": ""
            },
            {
              "id": 340538,
              "key": "ab1393ed-9b9f-49a8-9d30-4397ed5d341b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/5952e5bd_models/models.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ab1393ed-9b9f-49a8-9d30-4397ed5d341b",
              "caption": "",
              "alt": null,
              "width": 2560,
              "height": 920,
              "instructor_notes": null
            },
            {
              "id": 340540,
              "key": "ba394c5d-0363-4496-86f4-00c175ed56fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When we look at the models above, does it make sense that the first one underfits, the second one is right, and the third one overfits? It does, right? We can see that the data is correctly bounded by a circle, or a square. What our models do, is the following:\n- The **Logistic Regression** model uses a line, which is too simplistic. It doesn't do very well on the training set. Thus, it **underfits**.\n- The **Decision Tree** model uses a square, which is a pretty good fit, and generalizes well. Thus, this model is **good**.\n- The **Support Vector Machine** model actually draws a tiny circle around each point. This is clearly just memorizing the training set, and won't generalize well. Thus, it **overfits**.\n\nIt's always good to do a reality check when we can, and see that our models actually do have the behavior that the metrics tell us.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 797652,
          "key": "0f780698-4066-4942-aa5a-fbe84af973f7",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0f780698-4066-4942-aa5a-fbe84af973f7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 797653,
              "key": "8b6a6546-5c24-4444-9076-be7cbf9167c2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/59406a18_meme/meme.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8b6a6546-5c24-4444-9076-be7cbf9167c2",
              "caption": "",
              "alt": "",
              "width": 499,
              "height": 501,
              "instructor_notes": null
            },
            {
              "id": 797654,
              "key": "c92a194c-f863-4229-8ebb-72120232bc42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Awesome work! If you've gotten this far, you already have a strong foundation of knowledge about decision trees and how to evaluate and tune them. Now you're ready to learn about some even cooler techniques that address some of the limitations of decision trees. Keep going to find out more!",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}