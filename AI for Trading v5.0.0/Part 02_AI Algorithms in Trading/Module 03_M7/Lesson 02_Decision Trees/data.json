{
  "data": {
    "lesson": {
      "id": 782859,
      "key": "5c3b068c-4de2-468b-88ad-3bc7e358b7ba",
      "title": "Decision Trees",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Decision trees are a structure for decision-making where each decision leads to a set of consequences or additional decisions.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/5c3b068c-4de2-468b-88ad-3bc7e358b7ba/782859/1552687936151/Decision+Trees+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/5c3b068c-4de2-468b-88ad-3bc7e358b7ba/782859/1552687932557/Decision+Trees+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 791067,
          "key": "f8fbf026-3ac6-4005-81c0-aa273fb3b9d0",
          "title": "Welcome",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f8fbf026-3ac6-4005-81c0-aa273fb3b9d0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791069,
              "key": "e7c29a6e-d3fb-4a2a-9f76-069c99a3328b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/59406a18_meme/meme.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e7c29a6e-d3fb-4a2a-9f76-069c99a3328b",
              "caption": "",
              "alt": "",
              "width": 499,
              "height": 501,
              "instructor_notes": null
            },
            {
              "id": 791068,
              "key": "d251353b-41d1-4fba-986f-d2d7aeb17be7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Welcome!\nWelcome to this lesson on decision trees. We'll start with decision trees because they underlie the more complicated machine learning techniques you'll learn to apply on financial datasets. For several decision-tree related topics, you'll learn from one of Udacity's best instructors, Luis Serrano. Luis was formerly a machine learning engineer at Google. He holds a PhD in mathematics from the University of Michigan.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 495724,
          "key": "49167113-e329-4a8a-ae28-ddb7a8aa1737",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "49167113-e329-4a8a-ae28-ddb7a8aa1737",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 496028,
              "key": "a8181ad0-eee1-40ff-bca6-02a0089cd663",
              "title": "MLND SL DT 00 Intro V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "l34ijtQhVNk",
                "china_cdn_id": "l34ijtQhVNk.mp4"
              }
            }
          ]
        },
        {
          "id": 495726,
          "key": "1612ea5b-eb4e-4af3-8339-5a1aeaaaad70",
          "title": "Recommending Apps 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1612ea5b-eb4e-4af3-8339-5a1aeaaaad70",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 496030,
              "key": "b02f3453-674b-4c19-9215-bad33a5d2c25",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recommending Apps",
              "instructor_notes": ""
            },
            {
              "id": 521226,
              "key": "a05e410b-f5b7-4c2b-b44b-a31ff9409e88",
              "title": "MLND SL DT 01 Recommending Apps 1 MAIN V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uI_yNrqqKVg",
                "china_cdn_id": "uI_yNrqqKVg.mp4"
              }
            },
            {
              "id": 495741,
              "key": "e15a5357-9b43-49de-951a-889d9ebe66dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The following quizzes are based on this table of data:",
              "instructor_notes": ""
            },
            {
              "id": 514130,
              "key": "310d7b34-e287-44de-b9e7-1e59055982d5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a6656e7_recommending-apps/recommending-apps.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/310d7b34-e287-44de-b9e7-1e59055982d5",
              "caption": "",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 495742,
              "key": "7dfe97e0-c250-4a4f-9fb8-64d558981869",
              "title": "Quiz 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7dfe97e0-c250-4a4f-9fb8-64d558981869",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "For a woman who works at an office, which app do we recommend?",
                "answers": [
                  {
                    "id": "a1514934532292",
                    "text": "Pokemon Go",
                    "is_correct": false
                  },
                  {
                    "id": "a1514934578777",
                    "text": "Whatsapp",
                    "is_correct": true
                  },
                  {
                    "id": "a1514934582408",
                    "text": "Snapchat",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 495743,
              "key": "9cc0a071-86c2-43e1-b17a-83d1f41c052c",
              "title": "Quiz 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9cc0a071-86c2-43e1-b17a-83d1f41c052c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "For a man who works at a factory, which app do we recommend?",
                "answers": [
                  {
                    "id": "a1514934618919",
                    "text": "Pokemon Go",
                    "is_correct": false
                  },
                  {
                    "id": "a1514934634715",
                    "text": "Whatsapp",
                    "is_correct": false
                  },
                  {
                    "id": "a1514934638092",
                    "text": "Snapchat",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 495745,
              "key": "df4756c3-31f8-4c4c-b6a4-db85db633e2e",
              "title": "Quiz 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "df4756c3-31f8-4c4c-b6a4-db85db633e2e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "For a girl who goes to high school, which app do we recommend?",
                "answers": [
                  {
                    "id": "a1514934671532",
                    "text": "Pokemon Go",
                    "is_correct": true
                  },
                  {
                    "id": "a1514934688973",
                    "text": "Whatsapp",
                    "is_correct": false
                  },
                  {
                    "id": "a1514934689640",
                    "text": "Snapchat",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495727,
          "key": "620a6fe5-e295-4287-9945-58e1ab2006ce",
          "title": "Recommending Apps 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "620a6fe5-e295-4287-9945-58e1ab2006ce",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 496031,
              "key": "70d5267c-0303-45dd-beda-64d1f5b21373",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recommending Apps 2",
              "instructor_notes": ""
            },
            {
              "id": 521229,
              "key": "8861d2d1-5db6-417b-9428-e56b2f09d0b6",
              "title": "MLND SL DT 02 Recommending Apps 2 MAIN V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KSrIYqKZwCA",
                "china_cdn_id": "KSrIYqKZwCA.mp4"
              }
            },
            {
              "id": 495746,
              "key": "7ff2697d-dee5-45bc-8327-b852fc87ab20",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a4c10db_table/table.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7ff2697d-dee5-45bc-8327-b852fc87ab20",
              "caption": "",
              "alt": "",
              "width": 1112,
              "height": 886,
              "instructor_notes": null
            },
            {
              "id": 495747,
              "key": "7bab73a7-41a5-4076-97db-0af53cc2b002",
              "title": "Decision Tree Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7bab73a7-41a5-4076-97db-0af53cc2b002",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Between Gender and Occupation, which one seems more decisive for predicting what app will the users download?",
                "answers": [
                  {
                    "id": "a1514934770610",
                    "text": "Gender",
                    "is_correct": false
                  },
                  {
                    "id": "a1514934786239",
                    "text": "Occupation",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495728,
          "key": "adbd61e5-a21b-40e1-b994-d77c02ec1875",
          "title": "Recommending Apps 3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "adbd61e5-a21b-40e1-b994-d77c02ec1875",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521232,
              "key": "c3eae61d-2c19-4717-b5bb-366fdb73020d",
              "title": "Recommending Apps",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nEvW8B1HNq4",
                "china_cdn_id": "nEvW8B1HNq4.mp4"
              }
            }
          ]
        },
        {
          "id": 791062,
          "key": "0188cfcc-6626-4586-9120-e5f39883c2e4",
          "title": "Tree Anatomy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0188cfcc-6626-4586-9120-e5f39883c2e4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791064,
              "key": "97782c95-2645-476b-8f70-147c0e5b2e87",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c09bb9b_tree-anatomy-annotated/tree-anatomy-annotated.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/97782c95-2645-476b-8f70-147c0e5b2e87",
              "caption": "",
              "alt": "",
              "width": 402,
              "height": 498,
              "instructor_notes": null
            },
            {
              "id": 791065,
              "key": "912a3091-34f3-49c1-9565-de77b5e35ed0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Tree Anatomy\n\nNow that we've seen our first example of a decision tree, let's briefly cover some tree anatomy.\n\n**internal nodes** are points along the tree where the predictor space is **split**.\n\n**terminal nodes** or **leaves** are the nodes at the bottom of the tree, which are not split (in the sense that the leaves are at the _bottom_ of the tree, decision trees are _upside down_).\n\n**branches** are the segments of the tree that connect the nodes.\n\nThe **depth** is the number of levels in the tree.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 791066,
              "key": "4a229238-f4d1-47b5-b1c7-a7719b84281f",
              "title": "Tree Anatomy Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4a229238-f4d1-47b5-b1c7-a7719b84281f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "How many internal nodes, terminal nodes, and levels does the tree in the picture above have?"
                },
                "concepts_label": "Property",
                "answers_label": "Number",
                "concepts": [
                  {
                    "text": "Internal Nodes",
                    "correct_answer": {
                      "id": "a1544142795266",
                      "text": "2"
                    }
                  },
                  {
                    "text": "Terminal Nodes (Leaves)",
                    "correct_answer": {
                      "id": "a1544142869910",
                      "text": "3"
                    }
                  },
                  {
                    "text": "Levels",
                    "correct_answer": {
                      "id": "a1544142870612",
                      "text": "2"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1544143318507",
                    "text": "4"
                  },
                  {
                    "id": "a1544142870612",
                    "text": "2"
                  },
                  {
                    "id": "a1544142869910",
                    "text": "3"
                  },
                  {
                    "id": "a1544143320583",
                    "text": "3"
                  },
                  {
                    "id": "a1544143287049",
                    "text": "6"
                  },
                  {
                    "id": "a1544142795266",
                    "text": "2"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495729,
          "key": "61cc43d5-ec5e-47cc-804f-f07c8e26ec36",
          "title": "Quiz: Student Admissions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "61cc43d5-ec5e-47cc-804f-f07c8e26ec36",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 496036,
              "key": "c2db57bf-5d90-43e1-aa35-c27cd8c6356b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Student Admissions",
              "instructor_notes": ""
            },
            {
              "id": 521233,
              "key": "87a7132b-5fc4-4b10-a6fb-97a7f2ff14fb",
              "title": "MLND SL DT 04 Q Student Admissions V3 MAIN V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MOa335cQGI4",
                "china_cdn_id": "MOa335cQGI4.mp4"
              }
            },
            {
              "id": 495748,
              "key": "4579d3e8-4c47-4f25-8e83-016d2f805fb7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The following quiz will be based on this data.",
              "instructor_notes": ""
            },
            {
              "id": 495749,
              "key": "5c1e6506-3c01-44d2-8b47-3b4713a3cd87",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a4c12c0_student-data/student-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5c1e6506-3c01-44d2-8b47-3b4713a3cd87",
              "caption": "",
              "alt": "",
              "width": 1482,
              "height": 988,
              "instructor_notes": null
            },
            {
              "id": 495751,
              "key": "a26721a9-386e-4c3e-a33c-52657e716bf9",
              "title": "Student Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a26721a9-386e-4c3e-a33c-52657e716bf9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Between a horizontal and a vertical line, which one would cut the data better?",
                "answers": [
                  {
                    "id": "a1514935003278",
                    "text": "Horizontal",
                    "is_correct": false
                  },
                  {
                    "id": "a1514935021464",
                    "text": "Vertical",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495730,
          "key": "144961b2-1fb0-40d2-af0d-deb1d24f41e3",
          "title": "Solution: Student Admissions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "144961b2-1fb0-40d2-af0d-deb1d24f41e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521237,
              "key": "fda96d80-1bc6-47d7-a6cc-d94bf6d58807",
              "title": "Student Admissions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "At 0:55 and 1:10, it should be _horizontal_ lines added to the decision tree, not vertical.",
              "video": {
                "youtube_id": "TdgBi6LtOB8",
                "china_cdn_id": "TdgBi6LtOB8.mp4"
              }
            }
          ]
        },
        {
          "id": 495731,
          "key": "09918a91-1705-448a-8a17-474b5949ad08",
          "title": "Entropy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "09918a91-1705-448a-8a17-474b5949ad08",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521242,
              "key": "cb45f2a3-49bd-4cf6-8999-30655af9a09b",
              "title": "Entropy",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "piLpj1V1HEk",
                "china_cdn_id": "piLpj1V1HEk.mp4"
              }
            }
          ]
        },
        {
          "id": 495732,
          "key": "e6359cb3-9797-490d-9b86-f9bfb321138d",
          "title": "Entropy Formula 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e6359cb3-9797-490d-9b86-f9bfb321138d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521243,
              "key": "a68f8107-49e8-4cf9-9149-d4482f26b226",
              "title": "Entropy Formula",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iZiSYrOKvpo",
                "china_cdn_id": "iZiSYrOKvpo.mp4"
              }
            },
            {
              "id": 543067,
              "key": "2311206a-4266-4bc9-908b-b96d4843fea4",
              "title": "Matching quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2311206a-4266-4bc9-908b-b96d4843fea4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match each starting bucket to the likelihood of winning the game (Best = most likely to win, Worst = least likely to win)."
                },
                "concepts_label": "Buckets",
                "answers_label": "Likelihood",
                "concepts": [
                  {
                    "text": "4 red balls",
                    "correct_answer": {
                      "id": "a1518303850724",
                      "text": "Best"
                    }
                  },
                  {
                    "text": "3 red balls, 1 blue ball",
                    "correct_answer": {
                      "id": "a1518303898439",
                      "text": "Medium"
                    }
                  },
                  {
                    "text": "2 red balls, 2 blue balls",
                    "correct_answer": {
                      "id": "a1518303899969",
                      "text": "Worst"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1518303899969",
                    "text": "Worst"
                  },
                  {
                    "id": "a1518303898439",
                    "text": "Medium"
                  },
                  {
                    "id": "a1518303850724",
                    "text": "Best"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495733,
          "key": "2abec8c6-6a1e-4338-a622-6762feaea2d9",
          "title": "Entropy Formula 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2abec8c6-6a1e-4338-a622-6762feaea2d9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521245,
              "key": "73c8fd06-4da4-4f33-91ec-abe4a6d141f0",
              "title": "MLND SL DT 08 Entropy Formula 2 MAIN V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "_Correction_: At 2:14, the value in the first row for P(Blue) should be 0.",
              "video": {
                "youtube_id": "6GHg70hrSJw",
                "china_cdn_id": "6GHg70hrSJw.mp4"
              }
            },
            {
              "id": 495753,
              "key": "42517049-7e30-4527-84c6-cd4a590c1ca6",
              "title": "Function quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "42517049-7e30-4527-84c6-cd4a590c1ca6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which function will help us turn products into sums?",
                "answers": [
                  {
                    "id": "a1514935210721",
                    "text": "sin",
                    "is_correct": false
                  },
                  {
                    "id": "a1514935230513",
                    "text": "cos",
                    "is_correct": false
                  },
                  {
                    "id": "a1514935231194",
                    "text": "log",
                    "is_correct": true
                  },
                  {
                    "id": "a1514935231816",
                    "text": "exp",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495734,
          "key": "807e47c0-0eac-4f9f-9a3c-d373d4f21f1f",
          "title": "Entropy Formula 3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "807e47c0-0eac-4f9f-9a3c-d373d4f21f1f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521247,
              "key": "eb1b5a03-1a4b-4d5c-bb84-9af958b16c67",
              "title": "Entropy Formula",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "w73JTBVeyjE",
                "china_cdn_id": "w73JTBVeyjE.mp4"
              }
            },
            {
              "id": 675088,
              "key": "69c5e7be-ae48-4dab-90b6-1baa6d7f0a96",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "_Corrections:_ \n- At 0:15, the fourth log should be log(0.25) instead of log(0.75). The final sum, -3.245, is still correct for log(0.75) + log(0.75) + log(0.75) + log(0.25), using a base of 2.\n- At 0:29, the value in the first row for P(Blue) should be 0, not 1. \n- At 1:22, the formula has a denominator of m-n. It should be m+n.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 613189,
          "key": "f8af7431-1ae1-4445-94bd-e0b157cc4e6b",
          "title": "Quiz: Do You Know Your Entropy?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f8af7431-1ae1-4445-94bd-e0b157cc4e6b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 613192,
              "key": "d67da993-77da-4d61-a3c3-e4b14978270b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Quiz for \"Entropy Formula 3\"**",
              "instructor_notes": ""
            },
            {
              "id": 613196,
              "key": "85cfe629-2feb-430a-ab46-6a1bd2021c5e",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "85cfe629-2feb-430a-ab46-6a1bd2021c5e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "prompt": "What is the entropy for a bucket with a ratio of four red balls to ten blue balls? Input your answer to at least three decimal places.",
                "semantic_type": "CodeGradedQuestion",
                "evaluation_id": "4865615370780672"
              },
              "answer": null
            }
          ]
        },
        {
          "id": 495739,
          "key": "0ddc9466-18ff-44c2-bce8-ecfa89a8ba14",
          "title": "Multiclass Entropy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0ddc9466-18ff-44c2-bce8-ecfa89a8ba14",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495756,
              "key": "ef2983b2-38dc-4421-8df6-56cc36b0f6df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Multi-class Entropy\n\nLast time, you saw this equation for entropy for a bucket with <span class='mathquill'>m</span> red balls and <span class='mathquill'>n</span> blue balls:\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 629642,
              "key": "852f7b16-1a11-4dfa-8cc3-eb0b1dde8c4b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5b046ed6_screen-shot-2018-05-22-at-12.25.34-pm/screen-shot-2018-05-22-at-12.25.34-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/852f7b16-1a11-4dfa-8cc3-eb0b1dde8c4b",
              "caption": "",
              "alt": "",
              "width": 442,
              "height": 50,
              "instructor_notes": null
            },
            {
              "id": 629623,
              "key": "b94d34ca-6a30-4692-8358-2d72cfafd2d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We can state this in terms of probabilities instead for the number of red balls as <span class=\"mathquill\">p_1</span> and the number of blue balls as <span class=\"mathquill\">p_2</span>:\n\n",
              "instructor_notes": ""
            },
            {
              "id": 629644,
              "key": "b007d3d7-869d-43e9-a925-5574bd229b95",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5b046fae_screen-shot-2018-05-22-at-12.27.22-pm/screen-shot-2018-05-22-at-12.27.22-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b007d3d7-869d-43e9-a925-5574bd229b95",
              "caption": "",
              "alt": "",
              "width": 131,
              "height": 57,
              "instructor_notes": null
            },
            {
              "id": 629645,
              "key": "def3d79b-4613-4dd3-ae98-27da168abe55",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5b046fbe_screen-shot-2018-05-22-at-12.27.55-pm/screen-shot-2018-05-22-at-12.27.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/def3d79b-4613-4dd3-ae98-27da168abe55",
              "caption": "",
              "alt": "",
              "width": 133,
              "height": 65,
              "instructor_notes": null
            },
            {
              "id": 629643,
              "key": "35852218-5cba-4314-9396-849cbda3108b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<span class='mathquill'>entropy = -p_1\\log_2(p_1)-p_2\\log_2(p_2)</span>\n\nThis entropy equation can be extended to the multi-class case, where we have three or more possible values:\n\n<span class='mathquill'>entropy = -p_1\\log_2(p_1) - p_2\\log_2(p_2) - ... - p_n\\log_2(p_n) = -\\sum\\limits_{i=1}^n p_i\\log_2(p_i)</span>\n\nThe minimum value is still 0, when all elements are of the same value. The maximum value is still achieved when the outcome probabilities are the same, but the upper limit increases with the number of different outcomes. (For example, you can verify the maximum entropy is 2 if there are four different possibilities, each with probability 0.25.)",
              "instructor_notes": ""
            },
            {
              "id": 613201,
              "key": "cb38ec3a-6bc3-48e9-8596-77c1e44743c0",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "cb38ec3a-6bc3-48e9-8596-77c1e44743c0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "prompt": "If we have a bucket with eight red balls, three blue balls, and two yellow balls, what is the entropy of the set of balls? Input your answer to at least three decimal places.",
                "semantic_type": "CodeGradedQuestion",
                "evaluation_id": "6303492038328320"
              },
              "answer": null
            }
          ]
        },
        {
          "id": 495735,
          "key": "5b252143-d791-43c9-8c91-2f488fdb1606",
          "title": "Quiz: Information Gain",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5b252143-d791-43c9-8c91-2f488fdb1606",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 496045,
              "key": "db96452c-8e4a-4ba4-8db4-d7767adb7055",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Information Gain",
              "instructor_notes": ""
            },
            {
              "id": 521248,
              "key": "33ffec8c-c18b-4a7b-a33e-629992aad353",
              "title": "MLND SL DT 10 Q Information Gain MAIN V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tVLOLPEtLFw",
                "china_cdn_id": "tVLOLPEtLFw.mp4"
              }
            },
            {
              "id": 495754,
              "key": "5d00297a-6685-4b1a-aa1f-523c04087bd8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a4c14aa_trees/trees.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5d00297a-6685-4b1a-aa1f-523c04087bd8",
              "caption": "",
              "alt": "",
              "width": 2538,
              "height": 1232,
              "instructor_notes": null
            },
            {
              "id": 495755,
              "key": "bb1f26fd-4c12-485e-9aac-63b72742bdd2",
              "title": "Trees quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bb1f26fd-4c12-485e-9aac-63b72742bdd2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Where did we gain more information? Where did we gain less? Match the columns."
                },
                "concepts_label": "Tree",
                "answers_label": "Information gain",
                "concepts": [
                  {
                    "text": "1",
                    "correct_answer": {
                      "id": "a1514935503663",
                      "text": "Smallest"
                    }
                  },
                  {
                    "text": "2",
                    "correct_answer": {
                      "id": "a1514935522762",
                      "text": "Medium"
                    }
                  },
                  {
                    "text": "3",
                    "correct_answer": {
                      "id": "a1514935524261",
                      "text": "Largest"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1514935503663",
                    "text": "Smallest"
                  },
                  {
                    "id": "a1514935522762",
                    "text": "Medium"
                  },
                  {
                    "id": "a1514935524261",
                    "text": "Largest"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495736,
          "key": "5df132c8-94f3-4418-a761-af1f119515b3",
          "title": "Solution: Information Gain",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5df132c8-94f3-4418-a761-af1f119515b3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521250,
              "key": "7df2e25a-021e-47a9-8451-78c592018b3a",
              "title": "Information Gain",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "k9iZL53PAmw",
                "china_cdn_id": "k9iZL53PAmw.mp4"
              }
            },
            {
              "id": 613637,
              "key": "d3b398c7-04d7-4d41-b484-5d8823942c87",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Information Gain Formula\n\nNote that the child groups are weighted equally in this case since they're both the same size, for all splits. In general, the average entropy for the child groups will need to be a _weighted_ average, based on the number of cases in each child group. That is, for <span class='mathquill'>m</span> items in the first child group and <span class='mathquill'>n</span> items in the second child group, the information gain is:\n\n<div class='mathquill'>\\mathrm{Information\\;Gain} = \\mathrm{Entropy}(Parent) - \\left[\\frac{m}{m+n}\\mathrm{Entropy}(Child_1) + \\frac{n}{m+n}\\mathrm{Entropy}(Child_2)\\right]</div>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 495737,
          "key": "2a8b8b8b-f2f9-4f05-858c-2bb02efc49ec",
          "title": "Maximizing Information Gain",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2a8b8b8b-f2f9-4f05-858c-2bb02efc49ec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521253,
              "key": "71a07f60-19bd-4cd4-9fec-1ce0725f1e8a",
              "title": "Maximizing Information Gain",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3FgJOpKfdY8",
                "china_cdn_id": "3FgJOpKfdY8.mp4"
              }
            }
          ]
        },
        {
          "id": 629646,
          "key": "2c92ec1a-3a09-485e-bf49-2c9eafcaa4c3",
          "title": "Calculating Information Gain on a Dataset",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2c92ec1a-3a09-485e-bf49-2c9eafcaa4c3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 629647,
              "key": "d862553e-d3a8-4301-8dd1-b9ae58a1befd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Quiz for Maximizing Information Gain**\n\nFor the following quiz, consider the data found in [this file](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/April/5ad940f6_ml-bugs/ml-bugs.csv), consisting of twenty-four made-up insects measured on their length and color.",
              "instructor_notes": ""
            },
            {
              "id": 629648,
              "key": "7809f6ce-9dc4-4616-96b6-b05065503df9",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7809f6ce-9dc4-4616-96b6-b05065503df9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following splitting criteria provides the most information gain for discriminating Mobugs from Lobugs?",
                "answers": [
                  {
                    "id": "a1527017580842",
                    "text": "Color = Brown",
                    "is_correct": false
                  },
                  {
                    "id": "a1527017605614",
                    "text": "Color = Blue",
                    "is_correct": false
                  },
                  {
                    "id": "a1527017610685",
                    "text": "Color = Green",
                    "is_correct": false
                  },
                  {
                    "id": "a1527017616418",
                    "text": "Length < 17.0mm",
                    "is_correct": true
                  },
                  {
                    "id": "a1527017626435",
                    "text": "Length < 20.0mm",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 791070,
          "key": "b7d65bae-dcb7-463c-ba39-638878f604b4",
          "title": "Gini Impurity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b7d65bae-dcb7-463c-ba39-638878f604b4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791071,
              "key": "374af0e3-428f-450d-b5ec-baac823e86fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Gini Impurity\nSo far, you've seen how to use entropy to calculate the information gain of a split. There is another alternative for measuring the quality of a split.\n\nIf there are <span class=\"mathquill\">k</span> classes, and <span class=\"mathquill\">\\hat{p}_k</span> is the fraction of observations from class <span class=\"mathquill\">k</span> classified by a node, we can calculate <span class=\"mathquill\">G</span> (the Gini index) for the node:\n<div class=\"mathquill\">G = \\sum^K_{k=1}\\hat{p}_{k}(1-\\hat{p}_{k})</div>\n\nThe Gini index takes on a small value if all of the proportions are close to zero or one. You can think of it as a measure of node _purity_—if the value is small, the node mostly contains observations from a single class. It turns out that the Gini index and entropy are quite similar numerically. \n\nTo measure the _increase in purity_ of a split using the Gini index, calculate the Gini index on the parent node and subtract the weighted average of the Gini indexes of the child nodes:\n\n<div class=\"mathquill\">G_{\\mathrm{increase}}=G_{\\mathrm{parent}} - \\sum_{\\mathrm{children}}(\\mathrm{fraction\\;of\\;observations})_{\\mathrm{child}} \\times G_{\\mathrm{child}}</div>\n\nScikit-learn supports both the Gini impurity and information gain metrics for evaluating the quality of splits, via the `criterion` hyperparameter.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 793498,
              "key": "5ef74f34-54ef-419c-bd5c-3ecf6325825f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c117478_screen-shot-2018-12-12-at-12.49.37-pm/screen-shot-2018-12-12-at-12.49.37-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5ef74f34-54ef-419c-bd5c-3ecf6325825f",
              "caption": "",
              "alt": "",
              "width": 876,
              "height": 954,
              "instructor_notes": null
            },
            {
              "id": 793505,
              "key": "10a24054-d740-469f-a684-59fc7e5e395b",
              "title": "Gini impurity",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "10a24054-d740-469f-a684-59fc7e5e395b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the decrease in Gini impurity for the split indicated in the image above?",
                "answers": [
                  {
                    "id": "a1544648644130",
                    "text": "-0.14",
                    "is_correct": false
                  },
                  {
                    "id": "a1544648674737",
                    "text": "0.18",
                    "is_correct": true
                  },
                  {
                    "id": "a1544648675409",
                    "text": "0.09",
                    "is_correct": false
                  },
                  {
                    "id": "a1544648676005",
                    "text": "6.80",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 813136,
          "key": "1fbc092c-9a81-41a8-8eff-fea0461fbb2f",
          "title": "Hyperparameters",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1fbc092c-9a81-41a8-8eff-fea0461fbb2f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 813137,
              "key": "7f29c4f6-4c81-44c8-9c11-8324f97de121",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Hyperparameters for Decision Trees\n\nIn order to create decision trees that will generalize to new problems well, we can tune a number of different aspects about the trees.  We call the different aspects of a decision tree \"hyperparameters\".  These are some of the most important hyperparameters used in decision trees:\n\n### Maximum Depth\nThe maximum depth of a decision tree is simply the largest possible length between the root to a leaf. A tree of maximum length\n<span class=\"mathquill\">\nk\n</span>\n can have at most\n<span class=\"mathquill\">\n2^k\n</span>\n leaves.",
              "instructor_notes": ""
            },
            {
              "id": 813138,
              "key": "f0859f47-5fac-482a-98da-16f712cae586",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c3fcaba_depth/depth.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f0859f47-5fac-482a-98da-16f712cae586",
              "caption": "Depth of a decision tree",
              "alt": "",
              "width": 1346,
              "height": 352,
              "instructor_notes": null
            },
            {
              "id": 813139,
              "key": "9fa220ba-f6aa-4e2d-91b2-aa172e609eae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Minimum number of samples to split\n\nA node must have at least `min_samples_split` samples in order to be large enough to split. If a node has fewer samples than `min_samples_split` samples, it will not be split, and the splitting process stops.",
              "instructor_notes": ""
            },
            {
              "id": 813181,
              "key": "5c34eac5-f6de-4e1f-aad1-bb152b2d68b0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c3fd5cb_min-samples-split/min-samples-split.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5c34eac5-f6de-4e1f-aad1-bb152b2d68b0",
              "caption": "",
              "alt": "",
              "width": 1178,
              "height": 620,
              "instructor_notes": null
            },
            {
              "id": 813182,
              "key": "1aa4ee33-276b-4b12-b8b8-a8446fd4ef33",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "However, `min_samples_split` doesn't control the minimum size of leaves. As you can see in the example on the right, above, the parent node had 20 samples, greater than `min_samples_split` = 11, so the node was split. But when the node was split, a child node was created with that had 5 samples, less than `min_samples_split` = 11.",
              "instructor_notes": ""
            },
            {
              "id": 813140,
              "key": "a15fe079-fc58-4f09-a75d-dfe163154a5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Minimum number of samples per leaf\n\nWhen splitting a node, one could run into the problem of having 99 samples in one of them, and 1 on the other. This will not take us too far in our process, and would be a waste of resources and time. If we want to avoid this, we can set a minimum for the number of samples we allow on each leaf.",
              "instructor_notes": ""
            },
            {
              "id": 813183,
              "key": "41e45a3b-babf-4ef1-8f1f-1246da1131b4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c3fd65c_min-samples-leaf/min-samples-leaf.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/41e45a3b-babf-4ef1-8f1f-1246da1131b4",
              "caption": "",
              "alt": "",
              "width": 1178,
              "height": 620,
              "instructor_notes": null
            },
            {
              "id": 813184,
              "key": "ca255912-9a11-469e-93fc-d581e38d8274",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This number can be specified as an integer or as a float. If it's an integer, it's the minimum number of samples allowed in a leaf. If it's a float, it's the minimum percentage of samples allowed in a leaf. For example, 0.1, or 10%, implies that a particular split will not be allowed if one of the leaves that results contains less than 10% of the samples in the dataset.\n\nIf a threshold on a feature results in a leaf that has fewer samples than `min_samples_leaf`, the algorithm will not allow _that_ split, but it may perform a split on the same feature at a _different threshold_, that _does_ satisfy `min_samples_leaf`.",
              "instructor_notes": ""
            },
            {
              "id": 813177,
              "key": "e3070882-4688-462b-8886-6d2555b9681b",
              "title": "Tree Hyperparameters Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e3070882-4688-462b-8886-6d2555b9681b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Let's test your intuition for the influence of these hyperparameters. Indicate below "
                },
                "concepts_label": "Hyperparameter",
                "answers_label": "Quality of resulting tree",
                "concepts": [
                  {
                    "text": "Large `max_depth`",
                    "correct_answer": {
                      "id": "a1547684836013",
                      "text": "Large, highly branched"
                    }
                  },
                  {
                    "text": "Small `max_depth`",
                    "correct_answer": {
                      "id": "a1547684867735",
                      "text": "Small, simple"
                    }
                  },
                  {
                    "text": "Large `min_samples_split`",
                    "correct_answer": {
                      "id": "a1547684868348",
                      "text": "Small, simple"
                    }
                  },
                  {
                    "text": "Small `min_samples_split`",
                    "correct_answer": {
                      "id": "a1547684869598",
                      "text": "Large, highly branched"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1547684868348",
                    "text": "Small, simple"
                  },
                  {
                    "id": "a1547684836013",
                    "text": "Large, highly branched"
                  },
                  {
                    "id": "a1547684867735",
                    "text": "Small, simple"
                  },
                  {
                    "id": "a1547684869598",
                    "text": "Large, highly branched"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495977,
          "key": "e964511f-92b0-4d11-a3df-3a1b1262cc8d",
          "title": "Decision Trees in sklearn",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e964511f-92b0-4d11-a3df-3a1b1262cc8d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498672,
              "key": "9a66c98b-4cb0-4a67-b001-5892a77cd5c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Decision Trees in sklearn\n\nIn this section, you'll use decision trees to fit a given sample dataset.\n\nBefore you do that, let's go over the tools required to build this model.\n\nFor your decision tree model, you'll be using scikit-learn's [`Decision Tree Classifier`](http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html) class.  This class provides the functions to define and fit the model to your data.\n\n```python\n>>> from sklearn.tree import DecisionTreeClassifier\n>>> model = DecisionTreeClassifier()\n>>> model.fit(x_values, y_values)\n```\n\nIn the example above, the `model` variable is a decision tree model that has been fitted to the data `x_values` and `y_values`.  Fitting the model means finding the best tree that fits the training data.  Let's make two predictions using the model's `predict()` function.\n\n```python\n>>> print(model.predict([ [0.2, 0.8], [0.5, 0.4] ]))\n[[ 0., 1.]]\n```\n\nThe model returned an array of predictions, one prediction for each input array.  The first input, `[0.2, 0.8]`, got a prediction of `0.`.  The second input, `[0.5, 0.4]`, got a prediction of `1.`. \n\n### Hyperparameters\nWhen we define the model, we can specify the hyperparameters. In practice, the most common ones are\n- `max_depth`: The maximum number of levels in the tree.\n- `min_samples_leaf`: The minimum number of samples allowed in a leaf.\n- `min_samples_split`: The minimum number of samples required to split an internal node.\n\nFor example, here we define a model where the maximum depth of the trees `max_depth` is 7, and the minimum number of elements in each leaf `min_samples_leaf` is 10.\n```python\n>>> model = DecisionTreeClassifier(max_depth = 7, min_samples_leaf = 10)\n```\n\n## Decision Tree Quiz\n\nIn this quiz, you'll be given the following sample dataset, and your goal is to define a model that gives 100% accuracy on it.",
              "instructor_notes": ""
            },
            {
              "id": 498675,
              "key": "93eb62b4-8150-45e6-b06e-9b5171967c99",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a519e76_screen-shot-2018-01-06-at-8.13.20-pm/screen-shot-2018-01-06-at-8.13.20-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/93eb62b4-8150-45e6-b06e-9b5171967c99",
              "caption": "",
              "alt": "",
              "width": 386,
              "height": 254,
              "instructor_notes": null
            },
            {
              "id": 498681,
              "key": "7f529964-3c0c-47c8-a7de-1b71d93c7fb7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The data file can be found under the \"data.csv\" tab in the quiz below. It includes three columns, the first 2 comprising of the coordinates of the points, and the third one of the label.\n\nThe data will be loaded for you, and split into features `X` and labels `y`.\n\n### You'll need to complete each of the following steps:\n\n**1. Build a decision tree model**\n* Create a decision tree classification model using scikit-learn's [`DecisionTreeClassifier`](http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html) and assign it to the variable`model`.\n\n**2. Fit the model to the data**\n* You won't need to specify any of the hyperparameters, since the default ones will yield a model that perfectly classifies the training data. However, we encourage you to play with hyperparameters such as `max_depth` and `min_samples_leaf` to try to find the _simplest possible_ model.\n\n**3. Predict using the model**\n* Predict the labels for the training set, and assign this list to the variable `y_pred`.\n\n**4. Calculate the accuracy of the model**\n* For this, use the function sklearn function [`accuracy_score`](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html). A model's **accuracy** is the fraction of all data points that it correctly classified.\n\nWhen you hit **Test Run**, you'll be able to see the boundary region of your model, which will help you tune the correct parameters, in case you need them.\n\n***Note:*** This quiz requires you to find an accuracy of 100% on the training set. This is like memorizing the training data! A model designed to have 100% accuracy on training data is unlikely to generalize well to new data. If you pick very large values for your parameters, the model will fit the training set very well, but may not generalize well. Try to find the smallest possible parameters that do the job—then the model will be more likely to generalize well. (This aspect of the exercise won't be graded.)",
              "instructor_notes": ""
            },
            {
              "id": 498621,
              "key": "38fc2909-3068-4e02-b556-afad5df0d1ba",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "38fc2909-3068-4e02-b556-afad5df0d1ba",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4898518356066304",
                "initial_code_files": [
                  {
                    "text": "# Import statements \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\n\n# Read the data.\ndata = np.asarray(pd.read_csv('data.csv', header=None))\n# Assign the features to the variable X, and the labels to the variable y. \nX = data[:,0:2]\ny = data[:,2]\n\n# TODO: Create the decision tree model and assign it to the variable model.\n# You won't need to, but if you'd like, play with hyperparameters such\n# as max_depth and min_samples_leaf and see what they do to the decision\n# boundary.\nmodel = None\n\n# TODO: Fit the model.\n\n# TODO: Make predictions. Store them in the variable y_pred.\ny_pred = None\n\n# TODO: Calculate the accuracy and assign it to the variable acc.\nacc = None",
                    "name": "quiz.py"
                  },
                  {
                    "text": "0.24539,0.81725,0\n0.21774,0.76462,0\n0.20161,0.69737,0\n0.20161,0.58041,0\n0.2477,0.49561,0\n0.32834,0.44883,0\n0.39516,0.48099,0\n0.39286,0.57164,0\n0.33525,0.62135,0\n0.33986,0.71199,0\n0.34447,0.81433,0\n0.28226,0.82602,0\n0.26613,0.75,0\n0.26613,0.63596,0\n0.32604,0.54825,0\n0.28917,0.65643,0\n0.80069,0.71491,0\n0.80069,0.64181,0\n0.80069,0.50146,0\n0.79839,0.36988,0\n0.73157,0.25,0\n0.63249,0.18275,0\n0.60023,0.27047,0\n0.66014,0.34649,0\n0.70161,0.42251,0\n0.70853,0.53947,0\n0.71544,0.63304,0\n0.74309,0.72076,0\n0.75,0.63596,0\n0.75,0.46345,0\n0.72235,0.35526,0\n0.66935,0.28509,0\n0.20622,0.94298,1\n0.26613,0.8962,1\n0.38134,0.8962,1\n0.42051,0.94591,1\n0.49885,0.86404,1\n0.31452,0.93421,1\n0.53111,0.72076,1\n0.45276,0.74415,1\n0.53571,0.6038,1\n0.60484,0.71491,1\n0.60945,0.58333,1\n0.51267,0.47807,1\n0.50806,0.59211,1\n0.46198,0.30556,1\n0.5288,0.41082,1\n0.38594,0.35819,1\n0.31682,0.31433,1\n0.29608,0.20906,1\n0.36982,0.27632,1\n0.42972,0.18275,1\n0.51498,0.10965,1\n0.53111,0.20906,1\n0.59793,0.095029,1\n0.73848,0.086257,1\n0.83065,0.18275,1\n0.8629,0.10965,1\n0.88364,0.27924,1\n0.93433,0.30848,1\n0.93433,0.19444,1\n0.92512,0.43421,1\n0.87903,0.43421,1\n0.87903,0.58626,1\n0.9182,0.71491,1\n0.85138,0.8348,1\n0.85599,0.94006,1\n0.70853,0.94298,1\n0.70853,0.87281,1\n0.59793,0.93129,1\n0.61175,0.83187,1\n0.78226,0.82895,1\n0.78917,0.8962,1\n0.90668,0.89912,1\n0.14862,0.92251,1\n0.15092,0.85819,1\n0.097926,0.85819,1\n0.079493,0.91374,1\n0.079493,0.77632,1\n0.10945,0.79678,1\n0.12327,0.67982,1\n0.077189,0.6886,1\n0.081797,0.58626,1\n0.14862,0.58041,1\n0.14862,0.5307,1\n0.14171,0.41959,1\n0.08871,0.49269,1\n0.095622,0.36696,1\n0.24539,0.3962,1\n0.1947,0.29678,1\n0.16935,0.22368,1\n0.15553,0.13596,1\n0.23848,0.12427,1\n0.33065,0.12427,1\n0.095622,0.2617,1\n0.091014,0.20322,1\n",
                    "name": "data.csv"
                  },
                  {
                    "text": "# Import statements \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\n\n# Read the data.\ndata = np.asarray(pd.read_csv('data.csv', header=None))\n# Assign the features to the variable X, and the labels to the variable y. \nX = data[:,0:2]\ny = data[:,2]\n\n# TODO: Create the decision tree model and assign it to the variable model.\nmodel = DecisionTreeClassifier()\n\n# TODO: Fit the model.\nmodel.fit(X,y)\n\n# TODO: Make predictions. Store them in the variable y_pred.\ny_pred = model.predict(X)\n\n# TODO: Calculate the accuracy and assign it to the variable acc.\nacc = accuracy_score(y, y_pred)",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 501671,
          "key": "c61735ea-8a4f-4e98-b4a9-a2a855e824f5",
          "title": "Titanic Survival Model with Decision Trees",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c61735ea-8a4f-4e98-b4a9-a2a855e824f5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 501672,
              "key": "048e916f-093a-47d2-aea1-787a5af52644",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view1c614e5c",
              "pool_id": "jupyter",
              "view_id": "1c614e5c-11ed-4387-b73e-fde923f5df3d",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/titanic_survival_exploration.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 502681,
          "key": "a1974a74-cdfe-45ae-9006-972422e0a628",
          "title": "[Solution] Titanic Survival Model",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a1974a74-cdfe-45ae-9006-972422e0a628",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 502682,
              "key": "63120d6d-bf0c-4597-bdd4-2dd176fdad22",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view1c614e5c",
              "pool_id": "jupyter",
              "view_id": "2c2fc063-f6af-4c9a-ba74-07858e50682e",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Solutions.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 783437,
          "key": "5250e7fd-48e2-4598-a60a-654cbaf1d533",
          "title": "Visualizing Your Tree",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5250e7fd-48e2-4598-a60a-654cbaf1d533",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783441,
              "key": "be263b52-6bb8-4c8f-a0be-01396c4550fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Visualizing a Decision Tree\n\nOnce we have created a decision tree using sklearn, we can easily visualize it by exporting the tree in Graphviz format, using Graphviz open source graph visualization software.\n\n## export_graphviz\nUse `sklearn.tree.export_graphviz()` to export the tree into DOT format. [DOT](https://www.graphviz.org/doc/info/lang.html) is GraphViz's text file format. It includes human-readable syntax that describes the appearance of the tree graph, including the content of subtrees and the appearance of nodes (i.e. color, width, label).\n\nSo for example, assume `model` is an instance of `DecisionTreeClassifier()`, and you've already called `model.fit()`. Then export to DOT format as follows:\n\n```python\ndot_data = export_graphviz(model)\n```\nThere are a lot of options you can specify at this step, which you can explore in the documentation [here](https://scikit-learn.org/stable/modules/generated/sklearn.tree.export_graphviz.html). In particular, you can save the data to a file, you can specify whether and how to label the nodes, and you can rotate the tree.\n\n## graphviz.Source\n\nTo render a ready-made DOT source code string, create a `Source` object holding your DOT string. \n\n```python\nfrom graphviz import Source\ngraph = graphviz.Source(dot_data) \n```\nThen, display the graph directly in the Jupyter notebook:\n```python\ngraph\n```",
              "instructor_notes": ""
            },
            {
              "id": 813240,
              "key": "ec6ae20a-7cc3-47df-aac0-28889a3d4555",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Example\n\nSo, for example, if we create the following small dataset, \n\n```python\nrng = np.random.RandomState(0)\nX = rng.normal(size=(50, 2))\n```\nand set a target variable, <span class=\"mathquill\">y</span>, equal to 0 by default, and equal to 1 if <span class=\"mathquill\">X_1 > 1.2</span>,\n```python\ny = np.zeros(X.shape[0], dtype=np.int)\ny[X[:, 1] > 1.2] = 1\n```",
              "instructor_notes": ""
            },
            {
              "id": 813248,
              "key": "9930dd36-b1aa-499d-bac6-940bb83fef26",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c40db1a_tree-example/tree-example.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9930dd36-b1aa-499d-bac6-940bb83fef26",
              "caption": "",
              "alt": "",
              "width": 395,
              "height": 263,
              "instructor_notes": null
            },
            {
              "id": 813242,
              "key": "2982c64a-6869-4f0a-8c84-fc003ef7d463",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "and fit a tree to it,\n\n```python\ntree = DecisionTreeClassifier().fit(X, y)\n```\n\nwe can run the following code,\n\n```python\nfrom sklearn.tree import export_graphviz\nfrom graphviz import Source\n\ntreedot = export_graphviz(tree, out_file=None)\ntreegraph = Source(treedot)\ntreegraph\n```\n\nand we'll then see the following:",
              "instructor_notes": ""
            },
            {
              "id": 813243,
              "key": "4979dd49-3f12-43ea-9fdf-3faac1de299d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c40d9b5_graphviz-example/graphviz-example.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4979dd49-3f12-43ea-9fdf-3faac1de299d",
              "caption": "",
              "alt": "",
              "width": 300,
              "height": 225,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 782861,
          "key": "8f913b43-83dc-4f7d-921d-10891b3bd786",
          "title": "Visualizing Your Tree Exercise",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8f913b43-83dc-4f7d-921d-10891b3bd786",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 782864,
              "key": "4c4eea15-5762-41e9-ae66-f6eb26b0a61a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r403173c782861xJUPYTER8847z3f0",
              "pool_id": "jupyter",
              "view_id": "jupyter-i71yg",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/titanic_graphviz.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 502485,
          "key": "97c3a10e-00b2-42bb-9457-9af0cd5b5169",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "97c3a10e-00b2-42bb-9457-9af0cd5b5169",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 502564,
              "key": "67089c36-5f0a-404f-ac59-e8f8965a3f09",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/59406a18_meme/meme.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/67089c36-5f0a-404f-ac59-e8f8965a3f09",
              "caption": "",
              "alt": "",
              "width": 250,
              "height": 250,
              "instructor_notes": null
            },
            {
              "id": 502565,
              "key": "08c31b15-8ea1-4afd-8f79-6d69ec6adfd2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Congratulations! In this section you've learned all about decision trees, and how to use them to make predictions. In the next section, we are going to learn more about some of the concepts we alluded to in this section—how to test and evaluate your model to see how it's performing. See you there!",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}