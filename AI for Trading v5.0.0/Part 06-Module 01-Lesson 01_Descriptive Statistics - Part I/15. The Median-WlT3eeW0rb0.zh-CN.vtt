WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.710
在这种情况下 一种更合适的测量方法是中位数

00:00:04.710 --> 00:00:08.039
中位数是将数据集一分为二

00:00:08.039 --> 00:00:12.904
使 50% 的值更大 而剩下 50% 的值更小

00:00:12.904 --> 00:00:14.384
对于我们的数据集

00:00:14.384 --> 00:00:16.225
中位数是 8

00:00:16.225 --> 00:00:20.685
这比均值 12.5 合理多了

00:00:20.684 --> 00:00:23.744
不仅仅因为 8 位于数据集的中间位置

00:00:23.745 --> 00:00:26.445
而且没有将狗分成两半

00:00:26.445 --> 00:00:28.914
请注意 在计算中位数时

00:00:28.914 --> 00:00:33.089
实际计算过程取决于数据集中的

00:00:33.090 --> 00:00:37.680
数据是偶数个还是奇数个

00:00:37.679 --> 00:00:41.314
我们看几个示例

00:00:41.314 --> 00:00:46.195
首先应该将值按从小到大的顺序排序

00:00:46.195 --> 00:00:47.880
在最上面的示例中

00:00:47.880 --> 00:00:49.943
有 7 个值

00:00:49.942 --> 00:00:53.004
表达式就是 n = 7

00:00:53.005 --> 00:00:55.344
因为是奇数

00:00:55.344 --> 00:00:59.156
中位数就是位于中间的值

00:00:59.156 --> 00:01:01.489
这里是数字 3

00:01:01.490 --> 00:01:03.175
在第二个示例中

00:01:03.174 --> 00:01:06.049
n 是偶数

00:01:06.049 --> 00:01:09.250
让我们寻找下面这组值的中位数

00:01:09.250 --> 00:01:12.549
首先对它们排序

00:01:12.549 --> 00:01:16.090
因为没有现成的中心位置的值

00:01:16.090 --> 00:01:21.490
我们将对中间的两个值取平均值 结果就是中位数

00:01:21.489 --> 00:01:24.774
注意 中位数甚至不需要必须是数据集中的数字

00:01:24.775 --> 00:01:27.850
因为在此示例中 n = 8

00:01:27.849 --> 00:01:29.769
第四个和第五个值的平均值

00:01:29.769 --> 00:01:34.359
将得出该数据集的中位数

00:01:34.359 --> 00:01:36.924
从每侧移动四个值

00:01:36.924 --> 00:01:43.849
对 3 和 5 取均值 结果为 4

