WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.595
下面说说我是如何创建 features 数组的

00:00:03.595 --> 00:00:06.610
我们要么在左侧填充 0 要么截取到特定长度

00:00:06.610 --> 00:00:10.280
使影评长度达到标准长度

00:00:10.280 --> 00:00:13.120
首先创建一个 zeros 数组

00:00:13.120 --> 00:00:15.410
表示最终想要的形状

00:00:15.410 --> 00:00:18.810
行数应该与 reviews_ints 输入数据中的影评数一样

00:00:18.810 --> 00:00:23.895
列数应该与指定的序列长度一样

00:00:23.895 --> 00:00:26.815
暂时存储的整数都为 0

00:00:26.815 --> 00:00:29.230
对于列表中的每条影评

00:00:29.230 --> 00:00:31.600
我都将其当做行放入 features 数组中

00:00:31.600 --> 00:00:33.605
第一条影评放在第一行

00:00:33.605 --> 00:00:35.955
第二条放在第二行 等等

00:00:35.955 --> 00:00:39.110
下面处理短影评

00:00:39.110 --> 00:00:41.500
我需要在左侧填充 0

00:00:41.500 --> 00:00:45.295
直到整个长度达到标准长度

00:00:45.295 --> 00:00:47.605
为了填充 features

00:00:47.605 --> 00:00:51.530
从 features 行的结束索引位置开始

00:00:51.530 --> 00:00:53.670
减去输入影评的长度

00:00:53.670 --> 00:00:55.110
如果影评很短

00:00:55.110 --> 00:00:59.080
features 将保留左侧填充的 0

00:00:59.080 --> 00:01:01.580
影评标记将位于右侧

00:01:01.580 --> 00:01:04.100
对于很长的影评

00:01:04.100 --> 00:01:07.130
只需添加这一小部分就搞定了

00:01:07.130 --> 00:01:10.760
对于任何影评（包括长于标准长度的超长影评）

00:01:10.760 --> 00:01:13.375
我都在指定序列长度那截断

00:01:13.375 --> 00:01:15.720
并填充到相应的 features 行中

00:01:15.720 --> 00:01:19.145
这个循环将遍历 reviews_ints 中的每条影评

00:01:19.145 --> 00:01:21.165
然后返回这些 features

00:01:21.165 --> 00:01:23.020
在下面运行测试代码

00:01:23.020 --> 00:01:25.550
创建一个 features

00:01:25.550 --> 00:01:29.060
传入 reviews_ints 列表并将序列长度设为 200

00:01:29.060 --> 00:01:30.950
结果没有触发这些错误消息

00:01:30.950 --> 00:01:32.765
所以维度设置正确

00:01:32.765 --> 00:01:36.555
在这里输出前三行的前十个值

00:01:36.555 --> 00:01:38.475
看起来是这样的

00:01:38.475 --> 00:01:40.010
有很多行以 0 开头

00:01:40.010 --> 00:01:42.160
表示左填充

00:01:42.160 --> 00:01:45.620
其他位置填充了各种标记值

00:01:45.620 --> 00:01:48.005
很棒还要提一点

00:01:48.005 --> 00:01:52.465
在这一步 我们向影评特征中引入了新的标记

00:01:52.465 --> 00:01:57.860
之前词汇表中的所有字词都没有关联整数值

00:01:57.860 --> 00:02:00.205
我们开始用 1 标记化字词

00:02:00.205 --> 00:02:02.470
vocab_to_int 字典

00:02:02.470 --> 00:02:06.055
包含从 1 到 74,000 左右的整数

00:02:06.055 --> 00:02:08.500
我们通过添加 0 来填充影评

00:02:08.500 --> 00:02:12.450
向词汇表中插入了 0 标记

00:02:12.450 --> 00:02:15.740
Ok数据已经处理得差不多了

00:02:15.740 --> 00:02:18.755
还有最后一个转换练习

00:02:18.755 --> 00:02:23.970
请将特征和编码的标签拆分为 3 个不同的数据集

00:02:23.970 --> 00:02:26.660
分别代表训练集、验证集和测试集

00:02:26.660 --> 00:02:29.330
你需要为特征和标签分别创建数据集

00:02:29.330 --> 00:02:32.560
例如 train_x 和 train_y

00:02:32.560 --> 00:02:35.795
我们将使用这些数据集训练和测试模型

00:02:35.795 --> 00:02:37.795
我定义了一个拆分比例 split_frac

00:02:37.795 --> 00:02:41.775
请按照该比例将训练集中的数据保留为训练数据

00:02:41.775 --> 00:02:45.105
我将该比例设为 0.8 或 80%

00:02:45.105 --> 00:02:48.080
剩下的 20% 应该一分为二

00:02:48.080 --> 00:02:51.415
分别充当验证集和测试集

00:02:51.415 --> 00:02:53.845
请完成这道练习

00:02:53.845 --> 00:02:57.320
接下来我将演示我是如何拆分数据的

00:02:57.320 --> 00:02:59.450
并介绍一些实用的 PyTorch 资源

00:02:59.450 --> 00:03:02.600
这些资源能够帮助我们批处理和遍历不同的数据集

