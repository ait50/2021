{
  "data": {
    "lesson": {
      "id": 494899,
      "key": "09be9405-95aa-4a89-b800-9b60ccde5476",
      "title": "Scripting",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Setup your own programming environment to write and run Python scripts locally! Learn good scripting practices, interact with different inputs, and discover awesome tools.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/09be9405-95aa-4a89-b800-9b60ccde5476/494899/1517994983910/Scripting%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/09be9405-95aa-4a89-b800-9b60ccde5476/494899/1517994949261/Scripting%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 494900,
          "key": "14e5c73b-a4c2-4bc3-8f1d-af3e2a7a36e4",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "14e5c73b-a4c2-4bc3-8f1d-af3e2a7a36e4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527381,
              "key": "0ef0f0d6-1f3a-426f-bc47-266558a81298",
              "title": "Scripting",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Qxe_gCiXUDg",
                "china_cdn_id": "Qxe_gCiXUDg.mp4"
              }
            },
            {
              "id": 494901,
              "key": "59391a39-2ed4-43e9-a85b-7e3abb6df42e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Scripting\nWelcome to this lesson on scripting! You’ll learn about:\n- Python Installation and Environment Setup\n- Running and Editing Python Scripts\n- Interacting with User Input\n- Handling Exceptions\n- Reading and Writing Files\n- Importing Local, Standard, and Third-Party Modules\n- Experimenting with an Interpreter",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494902,
          "key": "fe3a8be9-705f-4c40-9c62-4ef6a3925bd4",
          "title": "Python Installation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fe3a8be9-705f-4c40-9c62-4ef6a3925bd4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527383,
              "key": "ab683acd-9cf9-4fe2-a135-bc54d2877d55",
              "title": "Python Installation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2_P05aYChqQ",
                "china_cdn_id": "2_P05aYChqQ.mp4"
              }
            },
            {
              "id": 513924,
              "key": "54249c89-ef66-4f89-afb6-8202015277be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Before We Install Python:\n\n## 1. Prepare to Use Command Line\nTo install Python and follow this lesson, you will need to use the command line. We will walk you through all the details, so don't worry if you have never used it before!  If you would like to learn or refresh on command lines, we strongly recommend going through this free [Shell Workshop](http://www.udacity.com/course/shell-workshop--ud206) lesson, where you can set up and learn how to use Unix Shell commands.\n\n### ** Note to Windows Users: Install Git Bash\nAs noted in the free Shell Workshop linked above, we recommend you install Git Bash [here](https://git-scm.com/download/win) and use this as your terminal for this lesson. *Please note that during installation you should select the checkbox* **Use Git and Optional Unix tools from the Windows Command Prompt**. This will allow you to use Unix commands while in Windows. If you'd rather use PowerShell, those commands are also provided in this lesson. For more information on the different command shells, check out the Shell Workshop lesson linked above.\n\n## 2. Is Python Already Installed On Your Computer?\nIn this course, we're using the most recent major version of Python - Python 3. Although Python 2 is still being used in many places, it is no longer being updated. In order to keep up compatibility with future improvements to Python, we recommend using Python 3.\n\nMac OS X and Linux usually come with Python 2 already installed. We DO NOT recommend that you make any changes to this Python, since parts of the operating system are using Python. However, it shouldn't do any harm to your system to install Python 3 separately, too.\n\nWindows doesn't usually come with Python included, but you can still check whether you have it installed before going ahead. So, first, check that you’ve not already got Python 3 installed.\n\nOpen up your Terminal or Command Line (this would be Git Bash on Windows).\n\nIn a new terminal or command prompt, type\n```bash\n$ python --version\n```\nand press `Enter`.\n\nYou might get a response that the Python version installed is something like `Python 2.7.9`. In that case, it would tell you that you have Python 2 installed, and you'll want to follow the steps in the next couple of sections to update it to Python 3.\n\nIf instead the version number starts with a 3, then you already have Python 3 installed! Don't install Python again! \n\nAlternatively, you might see an error message - don't worry about that for now, just try the steps in the next couple of sections.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494903,
          "key": "6883edc1-1c33-4506-9731-54ce104a1e14",
          "title": "Install Python Using Anaconda",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6883edc1-1c33-4506-9731-54ce104a1e14",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521290,
              "key": "97d388c0-bb7c-4688-8850-2fc71a6bf9ee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recommended Method: Install Python Using Anaconda\n__This method of installing Python is highly recommended for our students.__\n\nIf you are interested in learning Python for data science, we strongly recommend installing [Anaconda](https://www.anaconda.com/download/#windows), even if you already have Python installed on your computer.  You should **install Python 3.6** for courses at Udacity.  Having a dual environment with two different versions of Python can be useful, but content across all of our courses, and most professional environments, has now been converted to the newest version of Python.\n\n Anaconda includes a great distribution of libraries and software built for data science, some of which are otherwise difficult to install. It also makes it really easy to [set up different environments](https://conda.io/docs/user-guide/tasks/manage-environments.html) on your computer so you can quickly switch between different versions of Python and packages! For example, if one project you're working on requires Python 2.7 and another requires Python 3.6, as well as different dependencies, then Anaconda's environment management can help. \n\nIf you would like to know more about the Anaconda environment, you can check out the free course [here](https://classroom.udacity.com/courses/ud1111) .",
              "instructor_notes": ""
            },
            {
              "id": 616618,
              "key": "66957f6e-98ac-4c1f-94d5-6c7800afc027",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "66957f6e-98ac-4c1f-94d5-6c7800afc027",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Have you installed Anaconda?",
                "answers": [
                  {
                    "id": "a1524642453439",
                    "text": "Yes!",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 616625,
              "key": "8c588d73-1cc0-4660-9993-d11186fde560",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To test if you can now run Anaconda, enter `conda --version` in your terminal. This should print the version number of your installation. However, if you get a `command not found` message, you probably need to add Anaconda and Python to your PATH.\n\nIf you are a Windows user using Git Bash, there are instructions on the next page to do this.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 614278,
          "key": "3a55412c-06b5-4422-8b77-5078f9cb32da",
          "title": "[For Windows] Configuring Git Bash to Run Python",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a55412c-06b5-4422-8b77-5078f9cb32da",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 615388,
              "key": "d2be7f53-ee42-453e-af30-d69f3b5ddb08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# For Windows users using Git Bash:\nIf you are on Windows and choose to use Git Bash, you'll need to run a few commands to configure it to run Python and Anaconda. We'll do this by creating a `.bashrc` file, which allows us to set up these configurations.\n\n**If you do not plan to use Git Bash, feel free to skip this section for now!** Otherwise, open the Git Bash terminal and follow the steps below.\n\n## Step 1: Enter `cd` to get to your home directory.\nThis step is important. Git Bash does not open in this directory by default, and you'll need to be here to create your `.bashrc` file.",
              "instructor_notes": ""
            },
            {
              "id": 615449,
              "key": "295cae87-710b-46e6-9039-453766ad6c36",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfb95f_step1-cd/step1-cd.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/295cae87-710b-46e6-9039-453766ad6c36",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 286,
              "instructor_notes": null
            },
            {
              "id": 644091,
              "key": "02b9be20-45d7-41a1-aba8-deda26f78e9b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Troubleshooting error messages \n\nIn case you get an error message here, such as *bash: cd: command not found*, you may need to uninstall Git and reinstall Git. However, this time during installation select the checkbox **Use Git and Optional Unix tools from the Windows Command Prompt**.\n\nHere is an additional blog post on [Installing Git for Windows](https://medium.com/@GalarnykMichael/install-git-on-windows-9acf2a1944f0).\n\nThen retry Step 1 above.",
              "instructor_notes": ""
            },
            {
              "id": 615439,
              "key": "d17b52f3-77be-43d1-b9bd-3758f2febc85",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 2: Enter `pwd ` to get the path to your home directory.\n`pwd` gives you the path to your current directory, which should be your home directory if you did Step 1. You'll need this for the next step. \n\nThe path to my home directory is `/c/Users/Juno`.",
              "instructor_notes": ""
            },
            {
              "id": 615452,
              "key": "379e390c-27d7-4b92-bdb5-f3484f83b7d5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfb984_step2-pwd/step2-pwd.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/379e390c-27d7-4b92-bdb5-f3484f83b7d5",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 286,
              "instructor_notes": null
            },
            {
              "id": 615441,
              "key": "4f94f79a-ae4d-4feb-bdf5-943df5fb2a47",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 3: Get the file path to your Anaconda installation.\n[*Note*: You may need to come back to this step and the next step after installing Anaconda in a couple more pages.]\n\nTo get the file path to your Anaconda installation, you need to take the path you got from the previous step and append to it with the name of your Anaconda folder.\n\nFind the name of your Anaconda folder by entering `ls`. (These are lower case letters \"l\" and \"s\", because you want to \"list\" your files.) This should print all the file names in your home directory. If you used the default settings during your Anaconda installation, this folder name is likely `Anaconda3` or `anaconda`.\n\nIn my directory, I had a folder named `Anaconda3`. So the full file path to my Anaconda installation is `/c/Users/Juno/Anaconda3`.",
              "instructor_notes": ""
            },
            {
              "id": 620613,
              "key": "21cf649f-676a-4e49-880f-851fb5ba88ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 4: Add Python and Anaconda to PATH in `.bashrc` file.\nNext, enter the following command in your terminal, replacing`[YOUR_PATH]` with the path to your Anaconda installation. For example, I would replace `[YOUR PATH]` in the string below with `/c/Users/Juno/Anaconda3`.\n\n```txt\necho 'export PATH=\"$PATH:[YOUR_PATH]:[YOUR_PATH]/Scripts\"' >> .bashrc\n```\n\n__WARNING:__ Before pressing enter, make sure you are following the syntax exactly (especially the placement of each `'`, `\"`, and `$` symbol), and double check that you are replacing `[YOUR PATH]` correctly. You can compare your complete command with mine in the screenshot below. \n\nThis step adds two paths to a `.bashrc` file, which tells Git Bash where to find the scripts it needs to execute Python and Anaconda. Again, it's important that you are in your home directory when you complete this step.",
              "instructor_notes": ""
            },
            {
              "id": 615453,
              "key": "747d5f6e-a3eb-4be1-a5ec-1148ba0d9401",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfba33_step3-path/step3-path.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/747d5f6e-a3eb-4be1-a5ec-1148ba0d9401",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 252,
              "instructor_notes": null
            },
            {
              "id": 615442,
              "key": "c926af72-cbed-44d4-bb8d-5445150ba1aa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 5: Add alias for Python in `.bashrc` file.\nNext, enter this command to tell Git Bash where to find the Python executable file. \n```txt\necho 'alias python=\"winpty python.exe\"' >> .bashrc\n```\nThis is an extra step that's needed for users running Python in Git Bash. This adds a command to your `.bashrc` file that says to run `winpty python.exe` whenever you enter `python` into the terminal.",
              "instructor_notes": ""
            },
            {
              "id": 615454,
              "key": "9e9ba4fd-efba-4e5c-bcbf-571de2f92d48",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfba70_step4-alias/step4-alias.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9e9ba4fd-efba-4e5c-bcbf-571de2f92d48",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 252,
              "instructor_notes": null
            },
            {
              "id": 615444,
              "key": "aba8bf18-faaf-44db-b37d-bb40dc502af2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 6: Execute commands from `.bashrc`\nNow that you added the necessary commands to your `.bashrc` file, run the following line to execute the file.\n```txt\nsource .bashrc\n```\nAlternatively, you can just close and open a new Git Bash window, which would accomplish the same thing. `.bashrc` is executed every time Git Bash launches.",
              "instructor_notes": ""
            },
            {
              "id": 615455,
              "key": "cc4f9f37-3c65-492d-bed2-213b68c3531c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfbaaf_step5-source/step5-source.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cc4f9f37-3c65-492d-bed2-213b68c3531c",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 252,
              "instructor_notes": null
            },
            {
              "id": 615456,
              "key": "7f8323fe-9a0f-4f4c-ba91-f5bb7dcf881e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 7: Test Run\nRun the following commands to make sure you can access conda, Python, and the Python interpreter. If you followed these steps correctly, you should now be able to run Python in Git Bash!",
              "instructor_notes": ""
            },
            {
              "id": 615457,
              "key": "32880019-6511-4521-8dd2-e2b66100f65e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfbb3f_step6-testrun/step6-testrun.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/32880019-6511-4521-8dd2-e2b66100f65e",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 626,
              "instructor_notes": null
            },
            {
              "id": 616627,
              "key": "61992518-8379-4ea4-b0cf-39d4382d3ce0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Enter `exit()` to leave the Python interpreter after the last step above.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494905,
          "key": "0e540dbc-0ab3-4c44-a2d1-548385081110",
          "title": "Running a Python Script",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0e540dbc-0ab3-4c44-a2d1-548385081110",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "first_script",
                "uri": "https://video.udacity-data.com/topher/2018/March/5aa86fd0_first-script.py/first-script.py.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 543568,
              "key": "7dc80771-e016-4181-a03c-99250dd1ea46",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you are on a Windows machine, you can follow along using [git](https://git-scm.com/download/win).  If you are on a Mac or Linux machine, the terminal should be available with a quick search.  You should then be able to follow along as shown in the video below.",
              "instructor_notes": ""
            },
            {
              "id": 527384,
              "key": "8635f469-5176-4611-a744-2b45890c7ad9",
              "title": "Running A Python Script",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vMKemwCderg",
                "china_cdn_id": "vMKemwCderg.mp4"
              }
            },
            {
              "id": 513926,
              "key": "bcec3215-b631-4157-8496-28e96a6eaf13",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Run a Python Script!\n1. Download the zip file `first_script` attached at the bottom of this page (click it to unzip the file, then move it to an appropriate directory on your computer). This might be a good time to set up a new directory for your learning if you don't have one already.\n2. Open your terminal and use `cd` to navigate to the directory containing that downloaded file.\n3. Now that you’re in the directory with the file, you can run it by typing `python first_script.py` and pressing enter. Note: You may have to enter `python3` instead of `python` to execute Python 3 if you have both versions installed on your computer.\n\nYou’ll know you’ve run the script successfully if you see this message printed to your terminal:\n```txt\nCongratulations on running this script!!\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494906,
          "key": "f411e93c-03f8-4d45-b60f-d4c2832b63d6",
          "title": "Programming Environment Setup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f411e93c-03f8-4d45-b60f-d4c2832b63d6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527385,
              "key": "12aa6983-949f-4907-935d-08b2a8b8da21",
              "title": "Programming Environment Setup",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EKxDnCK0NAk",
                "china_cdn_id": "EKxDnCK0NAk.mp4"
              }
            },
            {
              "id": 513929,
              "key": "fe5bb07d-bedf-461b-9af3-4934bec9410a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Configure Your Own Python Programming Setup\nNow you've seen my setup, take a moment to get yourself comfortable on your own computer.\n\nBelow you will find a number of different options for code editors. We recommend for all of our courses using [Atom](https://atom.io/), which will work on all operating systems. If you decide not to use Atom, for first time coders **Sublime** is also popular.  \n\n\n### For Mac and Linux:\n* [Visual Studio Code](https://code.visualstudio.com/)\n* [Atom](https://atom.io/)  \n* [Sublime Text](http://www.sublimetext.com/)  \n* [emacs](https://www.gnu.org/software/emacs/)  \n* [vim](http://www.vim.org/)\n\n### For Windows: \n* [Visual Studio Code](https://code.visualstudio.com/)\n* [Atom](https://atom.io/)  \n* [Sublime Text](http://www.sublimetext.com/)  \n* [Notepad++](https://notepad-plus-plus.org/)  \n\n\nGet your screen set up with a text editor, terminal/command line and the Udacity classroom in a web browser, so you can iterate on your Python script. Play with the display options to see what you find most comfortable to look at, and see if you can find a tab-to-four-spaces option - that'll be very useful for Python indentation.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 513930,
          "key": "e59b3000-02a4-45e0-8855-4fea925c0534",
          "title": "Editing a Python Script",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e59b3000-02a4-45e0-8855-4fea925c0534",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 513933,
              "key": "c0590631-5b72-4b53-8c3a-bd134219444a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Write a script of your own\nOpen up a brand new empty file in your text editor, name it and save it in the place where you're keeping the files for your Python learning. Put the following code into it.\n\n```python\nhow_many_snakes = 1\nsnake_string = \"\"\"\nWelcome to Python3!\n\n             ____\n            / . .\\\\\n            \\  ---<\n             \\  /\n   __________/ /\n-=:___________/\n\n<3, Juno\n\"\"\"\n\n\nprint(snake_string * how_many_snakes)\n```",
              "instructor_notes": ""
            },
            {
              "id": 513934,
              "key": "31050be8-cbba-4043-a4a7-df8faf06a04d",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "31050be8-cbba-4043-a4a7-df8faf06a04d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Run the file with Python 3, and put the output in the quiz box.",
                "matchers": [
                  {
                    "expression": "\\n?Welcome to Python3!\\n\\n             ____\\n            \\/ \\. \\.\\\\\\n            \\\\  ---<\\n             \\\\  \\/\\n   __________\\/ \\/\\n-=:___________\\/\\n\\n<3, Juno\\n?"
                  },
                  {
                    "expression": "\\n?Welcome to Python3!\\n\\n             ____\\n            \\/ \\. \\.\\\\\\\\\\n            \\\\  ---<\\n             \\\\  \\/\\n   __________\\/ \\/\\n-=:___________\\/\\n\\n<3, Juno\\n?"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 494907,
          "key": "622bcf85-e02b-4ed1-a6b1-bc6629c8fcf7",
          "title": "Scripting with Raw Input",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "622bcf85-e02b-4ed1-a6b1-bc6629c8fcf7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527387,
              "key": "1e8b764e-0f4a-4b32-ac2d-b037fef4f6d0",
              "title": "Scripting With Raw Input",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Fs9uLV2qfgI",
                "china_cdn_id": "Fs9uLV2qfgI.mp4"
              }
            },
            {
              "id": 531096,
              "key": "94acf78d-c214-4f92-ade8-837a83110f35",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Scripting with Raw Input\nWe can get raw input from the user with the built-in function `input`, which takes in an optional string argument that you can use to specify a message to show to the user when asking for input.\n```python\nname = input(\"Enter your name: \")\nprint(\"Hello there, {}!\".format(name.title()))\n```\nThis prompts the user to enter a name and then uses the input in a greeting. The `input` function takes in whatever the user types and stores it as a string. If you want to interpret their input as something other than a string, like an integer, as in the example below, you need to wrap the result with the new type to convert it from a string.\n```python\nnum = int(input(\"Enter an integer\"))\nprint(\"hello\" * num)\n```\nWe can also interpret user input as a Python expression using the built-in function `eval`. This function evaluates a string as a line of Python. \n```python\nresult = eval(input(\"Enter an expression: \"))\nprint(result)\n```\nIf the user inputs `2 * 3`, this outputs `6`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494908,
          "key": "ccfbdda9-5ab9-4933-8292-be528b1458e5",
          "title": "Quiz: Scripting with Raw Input",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ccfbdda9-5ab9-4933-8292-be528b1458e5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527912,
              "key": "3fddfce6-97e7-4c24-8c0a-c2b5fc49c980",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Generate Messages\nImagine you're a teacher who needs to send a message to each of your students reminding them of their missing assignments and grade in the class. You have each of their names, number of missing assignments, and grades on a spreadsheet and just have to insert them into placeholders in this message you came up with:\n\n>Hi __[insert student name]__,\n\n>This is a reminder that you have __[insert number of missing assignments]__ assignments left to submit before you can graduate. Your current grade is __[insert current grade]__ and can increase to __[insert potential grade]__ if you submit all assignments before the due date.\n\nYou can just copy and paste this message to each student and manually insert the appropriate values each time, but instead you're going to write a program that does this for you.\n\nWrite a script that does the following:\n1. Ask for user input 3 times. Once for a list of names, once for a list of missing assignment counts, and once for a list of grades. Use this input to create lists for `names`, `assignments`, and `grades`.\n2. Use a loop to print the message for each student with the correct values. The potential grade is simply the current grade added to two times the number of missing assignments.\n\n### Template code for your script:\n```python\nnames =  # get and process input for a list of names\nassignments =  # get and process input for a list of the number of assignments\ngrades =  # get and process input for a list of grades\n\n# message string to be used for each student\n# HINT: use .format() with this string in your for loop\nmessage = \"Hi {},\\n\\nThis is a reminder that you have {} assignments left to \\\nsubmit before you can graduate. You're current grade is {} and can increase \\\nto {} if you submit all assignments before the due date.\\n\\n\"\n\n# write a for loop that iterates through each set of names, assignments, and grades to print each student's message\n\n```\n\nBelow is an example of a successful run of this script in the terminal.",
              "instructor_notes": ""
            },
            {
              "id": 527913,
              "key": "4ffc1487-a593-4619-807a-957de90dfa89",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a714426_generate-messages-output/generate-messages-output.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4ffc1487-a593-4619-807a-957de90dfa89",
              "caption": "",
              "alt": "",
              "width": 2352,
              "height": 1352,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 527908,
          "key": "86ea73de-9e88-41d7-9089-1bfd0ec0c93d",
          "title": "Solution: Scripting with Raw Input",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "86ea73de-9e88-41d7-9089-1bfd0ec0c93d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527910,
              "key": "688592bc-49da-4957-8266-01319b2208f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Generate Messages\nHere's one way you can implement this program!\n```python\nnames = input(\"Enter names separated by commas: \").title().split(\",\")\nassignments = input(\"Enter assignment counts separated by commas: \").split(\",\")\ngrades = input(\"Enter grades separated by commas: \").split(\",\")\n\nmessage = \"Hi {},\\n\\nThis is a reminder that you have {} assignments left to \\\nsubmit before you can graduate. You're current grade is {} and can increase \\\nto {} if you submit all assignments before the due date.\\n\\n\"\n\nfor name, assignment, grade in zip(names, assignments, grades):\n    print(message.format(name, assignment, grade, int(grade) + int(assignment)*2))\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 513937,
          "key": "f0b74936-746b-46e5-a002-815f293d81a3",
          "title": "Errors and Exceptions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0b74936-746b-46e5-a002-815f293d81a3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527388,
              "key": "86d05e15-beb5-44d5-baac-35b73cd48184",
              "title": "Errors And Exceptions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DmthSiy2d0U",
                "china_cdn_id": "DmthSiy2d0U.mp4"
              }
            },
            {
              "id": 513945,
              "key": "d87e995a-f0c4-4fb1-b3f2-32d46ad848da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Errors and Exceptions\n- __Syntax errors__ occur when Python can’t interpret our code, since we didn’t follow the correct syntax for Python. These are errors you’re likely to get when you make a typo, or you’re first starting to learn Python.\n\n- __Exceptions__ occur when unexpected things happen during execution of a program, even if the code is syntactically correct. There are different types of built-in exceptions in Python, and you can see which exception is thrown in the error message.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 513938,
          "key": "8ddf22a0-4f66-4f4f-9dbb-500ebcb583a6",
          "title": "Errors and Exceptions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8ddf22a0-4f66-4f4f-9dbb-500ebcb583a6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527920,
              "key": "7753a3fb-442f-4eb6-94d4-314ba0ae543c",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7753a3fb-442f-4eb6-94d4-314ba0ae543c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following statements are true? (Check all that apply.)",
                "answers": [
                  {
                    "id": "a1517374321464",
                    "text": "If you followed Python's syntax perfectly, your program will not encounter an error.",
                    "is_correct": false
                  },
                  {
                    "id": "a1517374437441",
                    "text": "Any syntax error can be detected before running your program.",
                    "is_correct": true
                  },
                  {
                    "id": "a1517374442376",
                    "text": "Any exception can be detected before running your program.",
                    "is_correct": false
                  },
                  {
                    "id": "a1517374481114",
                    "text": "An exception is a type of syntax error.",
                    "is_correct": false
                  },
                  {
                    "id": "a1517374555000",
                    "text": "An exception occurs during run time.",
                    "is_correct": true
                  },
                  {
                    "id": "a1517374598291",
                    "text": "There are many types of exceptions.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 527925,
              "key": "859e5912-77da-4943-9c63-b05147f2fcba",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "859e5912-77da-4943-9c63-b05147f2fcba",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some of the common exceptions programmers run into in Python. Do some research online to match the appropriate description for each."
                },
                "concepts_label": "Built-in Exception",
                "answers_label": "Description",
                "concepts": [
                  {
                    "text": "ValueError",
                    "correct_answer": {
                      "id": "a1517375370472",
                      "text": "An object of the correct type but inappropriate value is passed as input to a built-in operation or function."
                    }
                  },
                  {
                    "text": "AssertionError",
                    "correct_answer": {
                      "id": "a1517375762002",
                      "text": "An assert statement fails."
                    }
                  },
                  {
                    "text": "IndexError",
                    "correct_answer": {
                      "id": "a1517375988944",
                      "text": "A sequence subscript is out of range."
                    }
                  },
                  {
                    "text": "KeyError",
                    "correct_answer": {
                      "id": "a1517376044905",
                      "text": "A key can't be found in a dictionary."
                    }
                  },
                  {
                    "text": "TypeError",
                    "correct_answer": {
                      "id": "a1517376281945",
                      "text": "An object of an unsupported type is passed as input to an operation or function."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1517376281945",
                    "text": "An object of an unsupported type is passed as input to an operation or function."
                  },
                  {
                    "id": "a1517375988944",
                    "text": "A sequence subscript is out of range."
                  },
                  {
                    "id": "a1517375762002",
                    "text": "An assert statement fails."
                  },
                  {
                    "id": "a1517376044905",
                    "text": "A key can't be found in a dictionary."
                  },
                  {
                    "id": "a1517375370472",
                    "text": "An object of the correct type but inappropriate value is passed as input to a built-in operation or function."
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 494909,
          "key": "d99ae312-d4cb-4f5a-9e0c-3e84550c8cc8",
          "title": "Handling Errors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d99ae312-d4cb-4f5a-9e0c-3e84550c8cc8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527389,
              "key": "a08cb722-fe39-4e0c-a767-0b9bc893284a",
              "title": "Handling Errors Try Except Finally",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "S6hwBZG0KwM",
                "china_cdn_id": "S6hwBZG0KwM.mp4"
              }
            },
            {
              "id": 513947,
              "key": "ddddc408-3e33-4e5c-9280-060f037ba04e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Try Statement\nWe can use `try` statements to handle exceptions. There are four clauses you can use (one more in addition to those shown in the video).\n- `try`: This is the only mandatory clause in a `try` statement. The code in this block is the first thing that Python runs in a `try` statement.\n- `except`: If Python runs into an exception while running the `try` block, it will jump to the `except` block that handles that exception.\n- `else`: If Python runs into no exceptions while running the `try` block, it will run the code in this block after running the `try` block.\n- `finally`: Before Python leaves this `try` statement, it will run the code in this `finally` block under any conditions, even if it's ending the program. E.g., if Python ran into an error while running code in the `except` or `else` block, this `finally` block will still be executed before stopping the program.\n\n[Why do we need the `finally` clause in Python?](https://stackoverflow.com/questions/11551996/why-do-we-need-the-finally-clause-in-python)",
              "instructor_notes": ""
            },
            {
              "id": 527390,
              "key": "00840182-1854-4c15-90ec-5bbecffb68f4",
              "title": "Handling Error Specifying Exceptions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EHW5I7shdJg",
                "china_cdn_id": "EHW5I7shdJg.mp4"
              }
            },
            {
              "id": 513948,
              "key": "edb1d9ac-f0b0-434d-b7c4-a85f43ba4ba2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Specifying Exceptions\nWe can actually specify which error we want to handle in an `except` block like this:\n```python\ntry:\n    # some code\nexcept ValueError:\n    # some code\n```\nNow, it catches the ValueError exception, but not other exceptions. If we want this handler to address more than one type of exception, we can include a parenthesized tuple after the `except` with the exceptions.\n```python\ntry:\n    # some code\nexcept (ValueError, KeyboardInterrupt):\n    # some code\n```\nOr, if we want to execute different blocks of code depending on the exception, you can have multiple `except` blocks.\n```python\ntry:\n    # some code\nexcept ValueError:\n    # some code\nexcept KeyboardInterrupt:\n    # some code\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 615178,
          "key": "8ddb7d55-f971-4298-bd47-bd1bdcd6928c",
          "title": "Practice: Handling Input Errors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8ddb7d55-f971-4298-bd47-bd1bdcd6928c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 616685,
              "key": "3ef0aa8b-d7f7-4540-9c12-7095f9d9c64e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Handling Input Errors\nThe `party_planner` function below takes as input a number of party people and cookies and figures out how many cookies each person gets at the party, assuming equitable distribution of cookies. Then, it returns that number along with how many cookies will be left over.\n\nRight now, calling the function with an input of 0 people will cause an error, because it creates a ZeroDivisionError exception. Edit the `party_planner` function to handle this invalid input. If it runs into this exception, it should print a warning message to the user and request they input a different number of people.\n\nAfter you've edited the function, try running the file again and make sure it does what you intended. Try it with several different input values, including 0 and other values for the number of people.\n\n### Using this workspace\nIn some pages of our classroom, we'll provide you a workspace like the one below that will provide you a programming environment with a Terminal and code editor, so you can do all your work right here. Here are a few tips orienting you to this kind of workspace.\n\nOn the top panel is a code editor where you can edit your Python file. Scroll up and down in this panel to see all the code. You can also expand or shrink this panel by clicking and dragging its bottom border.\n\nOn the bottom panel, you can execute this Python file by clicking on __New Terminal__  and entering `python handling_errors.py` on the command line.",
              "instructor_notes": ""
            },
            {
              "id": 616686,
              "key": "618d30fd-a587-4055-844d-36f5e59c566e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewca3c5732",
              "pool_id": "webterminal",
              "view_id": "ca3c5732-4249-4ba7-8a31-3e6cf8ef4d4f",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/handling_errors.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 616614,
          "key": "46f39fef-fe14-446b-bef5-75f1a0dced1b",
          "title": "Solution: Handling Input Errors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "46f39fef-fe14-446b-bef5-75f1a0dced1b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 616615,
              "key": "61d9598e-b258-4362-8665-7ad286ec4a59",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is our solution for what the revised `party_planner` function on the previous page could look like, using a try-except block:\n```python\ndef party_planner(cookies, people):\n    leftovers = None\n    num_each = None\n\n    try:\n        num_each = cookies // people\n        leftovers = cookies % people\n    except ZeroDivisionError:\n        print(\"Oops, you entered 0 people will be attending.\")\n        print(\"Please enter a good number of people for a party.\")\n    \n    return(num_each, leftovers)```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 527942,
          "key": "5911f6e3-7edd-40a5-a1ed-78909116b291",
          "title": "Accessing Error Messages",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5911f6e3-7edd-40a5-a1ed-78909116b291",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527943,
              "key": "b90b8bb1-890c-421b-9892-dc113f26bc83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Accessing Error Messages\nWhen you handle an exception, you can still access its error message like this:\n```python\ntry:\n    # some code\nexcept ZeroDivisionError as e:\n   # some code\n   print(\"ZeroDivisionError occurred: {}\".format(e))\n```\nThis would print something like this:\n```txt\nZeroDivisionError occurred: integer division or modulo by zero\n```\nSo you can still access error messages, even if you handle them to keep your program from crashing!\n\nIf you don't have a specific error you're handling, you can still access the message like this:\n```python\ntry:\n    # some code\nexcept Exception as e:\n   # some code\n   print(\"Exception occurred: {}\".format(e))\n```\n`Exception` is just the base class for all built-in exceptions. You can learn more about Python's exceptions [here](https://docs.python.org/3/library/exceptions.html#bltin-exceptions).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494911,
          "key": "43991399-3df7-48cf-a10c-792921e1b6bf",
          "title": "Reading and Writing Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "43991399-3df7-48cf-a10c-792921e1b6bf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527391,
              "key": "65df8588-c6b6-4071-9fdf-48ae04638c2a",
              "title": "Reading And Writing Files",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "w-ZG6DMkVi4",
                "china_cdn_id": "w-ZG6DMkVi4.mp4"
              }
            },
            {
              "id": 520250,
              "key": "4d73d2ff-ff87-4101-b3b1-2c3945c1eefb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Using Files",
              "instructor_notes": ""
            },
            {
              "id": 527392,
              "key": "6b33b3eb-9981-455b-8ae9-6cfc48be2bfb",
              "title": "Reading And Writing Files Part II",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1GRv1S6K8gQ",
                "china_cdn_id": "1GRv1S6K8gQ.mp4"
              }
            },
            {
              "id": 520251,
              "key": "476644e5-52ab-42c8-a178-3ef11c3e05ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Reading and Writing Files\nTo follow along with the example above, create a new file in Atom,  copy the following text into it, and save it as `some_file.txt`!\n```txt\nHello!!\n\nYou've read the contents of this file!\n```\n\nHere's how we read and write files in Python.\n### Reading a File\n```python\nf = open('my_path/my_file.txt', 'r')\nfile_data = f.read()\nf.close()\n```\n1. First open the file using the built-in function, `open`. This requires a string that shows the path to the file. The `open` function returns a file object, which is a Python object through which Python interacts with the file itself. Here, we assign this object to the variable `f`.\n2. There are optional parameters you can specify in the `open` function. One is the mode in which we open the file. Here, we use `r` or read only. This is actually the default value for the mode argument.\n3. Use the `read` method to access the contents from the file object. This `read` method takes the text contained in a file and puts it into a string. Here, we assign the string returned from this method into the variable `file_data`.\n4. When finished with the file, use the `close` method to free up any system resources taken up by the file.\n\n### Writing to a File\n```python\nf = open('my_path/my_file.txt', 'w')\nf.write(\"Hello there!\")\nf.close()\n```\n1. Open the file in writing ('w') mode. If the file does not exist, Python will create it for you. If you open an existing file in writing mode, any content that it had contained previously will be deleted. If you're interested in adding to an existing file, without deleting its content, you should use the append ('a') mode instead of write.\n2. Use the write method to add text to the file.\n3. Close the file when finished.\n\n### Too Many Open Files\nRun the following script in Python to see what happens when you open too many files without closing them!\n```python\nfiles = []\nfor i in range(10000):\n    files.append(open('some_file.txt', 'r'))\n    print(i)\n```",
              "instructor_notes": ""
            },
            {
              "id": 527393,
              "key": "ce78a1c5-8633-45aa-9b77-71c5add0f102",
              "title": "Reading And Writing Files Using With",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OQ-Y0mMjm00",
                "china_cdn_id": "OQ-Y0mMjm00.mp4"
              }
            },
            {
              "id": 520254,
              "key": "2bc1acfb-9be3-46a1-8c64-b8b9899e957b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# With\nPython provides a special syntax that auto-closes a file for you once you're finished using it.\n```python\nwith open('my_path/my_file.txt', 'r') as f:\n    file_data = f.read()\n```\nThis `with` keyword allows you to open a file, do operations on it, and automatically close it after the indented code is executed, in this case, reading from the file. Now, we don’t have to call f.close()! You can only access the file object, f, within this indented block.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494912,
          "key": "8712ff09-9fb7-42fa-bb36-098b2b2ad8af",
          "title": "Quiz: Reading and Writing Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8712ff09-9fb7-42fa-bb36-098b2b2ad8af",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521275,
              "key": "d21621eb-233d-4766-90b6-bedc063707b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Calling the `read` Method with an Integer\nIn the code you saw earlier, the call to `f.read()` had no arguments passed to it. This defaults to reading all the remainder of the file from its current position - the whole file. If you pass the `read` method an integer argument, it will read up to that number of characters, output all of them, and keep the 'window' at that position ready to read on. \n\nLet's see this in an example that uses the following file, `camelot.txt`:\n```txt\nWe're the knights of the round table\nWe dance whenever we're able\n```\nHere's a script that reads in the file a little at a time by passing an integer argument to `.read()`.\n```python\nwith open(\"camelot.txt\") as song:\n    print(song.read(2))\n    print(song.read(8))\n    print(song.read())\n```\nOutputs:\n```txt\nWe\n're the \nknights of the round table\nWe dance whenever we're able\n```\nYou can try out this example by creating your own `camelot.txt` and `example.py` files with the text above.\n\nEach time we called `read` on the file with an integer argument, it read up to that number of characters, outputted them, and kept the 'window' at that position for the next call to `read`. This makes moving around in the open file a little tricky, as there aren't many landmarks to navigate by.\n\n### Reading Line by Line\n`\\n`s in blocks of text are newline characters. The newline character marks the end of a line, and tells a program (such as a text editor) to go down to the next line. However, looking at the stream of characters in the file, `\\n` is just another character. \n\nFortunately, Python knows that these are special characters and you can ask it to read one line at a time. Let's try it!\n",
              "instructor_notes": ""
            },
            {
              "id": 521278,
              "key": "44a216c8-d477-44da-a714-5a6d33e8a8fa",
              "title": "Read the next line",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "44a216c8-d477-44da-a714-5a6d33e8a8fa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Use the [relevant part of the Python documentation](https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files) to find a method that reads the next line of a file. Put the name of the method in the box.\n",
                "matchers": [
                  {
                    "expression": "readline"
                  },
                  {
                    "expression": "readline()"
                  },
                  {
                    "expression": ".readline"
                  },
                  {
                    "expression": ".readline()"
                  },
                  {
                    "expression": "read line"
                  }
                ]
              }
            },
            {
              "id": 521279,
              "key": "0fdbc0c5-ac8b-450d-adbf-f935720c027d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Conveniently, Python will loop over the lines of a file using the syntax `for line in file`. \nI can use this to create a list of lines in the file. Because each line still has its newline character attached, I remove this using `.strip()`.\n\n```python\ncamelot_lines = []\nwith open(\"camelot.txt\") as f:\n    for line in f:\n        camelot_lines.append(line.strip())\n\nprint(camelot_lines)\n```\nOutputs:\n```txt\n[\"We're the knights of the round table\", \"We dance whenever we're able\"]\n```",
              "instructor_notes": ""
            },
            {
              "id": 521280,
              "key": "48d49897-98d9-42a8-9aea-51c7c710f888",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Flying Circus Cast List\nYou're going to create a list of the actors who appeared in the television programme Monty Python's Flying Circus. \n\nWrite a function called `create_cast_list` that takes a filename as input and returns a list of actors' names.\nIt will be run on the file `flying_circus_cast.txt` (this information was collected from imdb.com). Each line of that file consists of an actor's name, a comma, and then some (messy) information about roles they played in the programme. You'll need to extract *only* the name and add it to a list. You might use the [`.split()` method](https://docs.python.org/3/library/stdtypes.html#str.split) to process each line.\n",
              "instructor_notes": ""
            },
            {
              "id": 521284,
              "key": "d7a7f519-14e6-48a1-a98f-aa66dd78ed1d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "d7a7f519-14e6-48a1-a98f-aa66dd78ed1d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5334311121846272",
                "initial_code_files": [
                  {
                    "text": "def create_cast_list(filename):\n    cast_list = []\n    #use with to open the file filename\n    #use the for loop syntax to process each line\n    #and add the actor name to cast_list\n\n    return cast_list\n\ncast_list = create_cast_list('flying_circus_cast.txt')\nfor actor in cast_list:\n    print(actor)",
                    "name": "cast_list.py"
                  },
                  {
                    "text": "Graham Chapman,  Various / ... (46 episodes, 1969-1974)\nEric Idle,  Various / ... (46 episodes, 1969-1974)\nTerry Jones,  Various / ... (46 episodes, 1969-1974)\nMichael Palin,  It's Man / ... (46 episodes, 1969-1974)\nTerry Gilliam,  Various / ... (46 episodes, 1969-1974)\nJohn Cleese,  Announcer / ... (40 episodes, 1969-1973)\nCarol Cleveland,  Various / ... (34 episodes, 1969-1974)\nIan Davidson,  Algy Braithwaite / ... (8 episodes, 1969-1970)\nJohn Hughman,  Alfred Lord Tennyson / ... (8 episodes, 1970-1974)\nThe Fred Tomlinson Singers,  Amantillado Chorus / ... (7 episodes, 1969-1973)\nConnie Booth,  Animated Mother / ... (6 episodes, 1969-1974)\nBob Raymond,  'Dad' / ... (5 episodes, 1974)\nLyn Ashley,  Algon Girl / ... (5 episodes, 1970-1972)\nRita Davies,  Argument Secretary / ... (4 episodes, 1969-1972)\nStanley Mason,  Clapper Man / ... (4 episodes, 1970-1971)\nDavid Ballantyne,  Ivan the Terrible / ... (3 episodes, 1970-1971)\nDonna Reading,  Girl in Bikini with Its Man / ... (3 episodes, 1969)\nPeter Brett,  Door-to-Door Martial Arts Salesman (2 episodes, 1974)\nMaureen Flanagan,  Anona Winn / ... (2 episodes, 1969-1970)\nKatya Wyeth,  Elsie / ... (2 episodes, 1969)\nFrank Lester,  The Late Professor Thynne (2 episodes, 1972-1974)\nNeil Innes,  Hesitant guitarist / ... (2 episodes, 1974)\nDick Vosburgh,  Van der Berg (1 episode, 1969)\nSandra Richards,  'Semprini' Girl / ... (1 episode, 1970)\nJulia Breck,  Puss In Boots / ... (1 episode, 1972)\nNicki Howorth,  Miss Bladder (1 episode, 1972)\nJimmy Hill,  Himself (1 episode, 1974)\nBarry Cryer,  Herman Rodrigues (1 episode, 1969)\nJeannette Wild,  Second Secretary (1 episode, 1970)\nMarjorie Wilde,  Dear Old Lady (1 episode, 1970)\nMarie Anderson,  Girl interviewing the announcer (1 episode, 1972)\nCaron Gardner,  Mary (1 episode, 1973)\nNosher Powell,  Jack Bodell (1 episode, 1973)\nCarolae Donoghue,  Vera's Husband's Mistress (1 episode, 1969)\nVincent Wong,  Mr. Kamikaze (1 episode, 1970)\nHelena Clayton,  Various Roles (1 episode, 1971)\nNigel Jones,  Various (1 episode, 1972)\nRoy Gunson, (1 episode, 1970)\nDaphne Davey,  Various Roles (1 episode, 1971)\nStenson Falke, (1 episode, 1974)\nAlexander Curry,  Various (1 episode, 1970)\nFrank Williams,  Clerk of the Court (1 episode, 1972)\nRalph Wood, (1 episode, 1970)\nRosalind Bailey,  Elizabethan Girl (1 episode, 1972)\nMarion Mould, (1 episode, 1974)\nSheila Sands,  Stripper / ... (uncredited) (2 episodes, 1969)\nRichard Baker,  Himself - BBC News Anchor (uncredited) (3 episodes, 1972-1973)\nDouglas Adams,  Dr. Emile Koning - Surgeon / ... (uncredited) (2 episodes, 1974)\nEwa Aulin,  Harrassed Woman (uncredited) (1 episode, 1969)\nReginald Bosanquet,  Himself (uncredited) (1 episode, 1970)\nBarbara Lindley,  Bride (uncredited) (1 episode, 1970)\nRoy Brent,  Armoured Knight (uncredited) (1 episode, 1972)\nJonas Card,  Armoured Knight (uncredited) (1 episode, 1972)\nTony Christopher,  Armoured Knight (uncredited) (1 episode, 1972)\nBeulah Hughes, (uncredited) (1 episode, 1972)\nPeter Kodak,  Armoured Knight (uncredited) (1 episode, 1972)\nLulu,  Herself (uncredited) (1 episode, 1972)\nJay Neill,  Armoured Knight (uncredited) (1 episode, 1972)\nGraham Skidmore,  Armoured Knight (uncredited) (1 episode, 1972)\nRingo Starr,  Himself (uncredited) (1 episode, 1972)\nFred Tomlinson,  Superintendent McGough (uncredited) (1 episode, 1972)\nDavid Hamilton,  Himself - Thames TV Announcer (uncredited) (1 episode, 1973)\nSuzy Mandel,  German Girl (uncredited) (1 episode, 1974)\nPeter Woods,  BBC Presenter (uncredited) (1 episode, 1974)",
                    "name": "flying_circus_cast.txt"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 521286,
          "key": "72e1001a-3061-4f38-9c5f-883465049852",
          "title": "Solution: Reading and Writing Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "72e1001a-3061-4f38-9c5f-883465049852",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521287,
              "key": "a8999e1f-5e3f-4a09-8624-2cc274e6623d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Flying Circus Cast List\n\n```python\ndef create_cast_list(filename):\n    cast_list = []\n    with open(filename) as f:\n        for line in f:\n            name = line.split(\",\")[0]\n            cast_list.append(name)\n    \n    return cast_list\n\ncast_list = create_cast_list('flying_circus_cast.txt')\nfor actor in cast_list:\n    print(actor)\n```\n### Output:\n```txt\nGraham Chapman\nEric Idle\nTerry Jones\nMichael Palin\nTerry Gilliam\nJohn Cleese\nCarol Cleveland\nIan Davidson\nJohn Hughman\nThe Fred Tomlinson Singers\nConnie Booth\nBob Raymond\nLyn Ashley\nRita Davies\nStanley Mason\nDavid Ballantyne\nDonna Reading\nPeter Brett\nMaureen Flanagan\nKatya Wyeth\nFrank Lester\nNeil Innes\nDick Vosburgh\nSandra Richards\nJulia Breck\nNicki Howorth\nJimmy Hill\nBarry Cryer\nJeannette Wild\nMarjorie Wilde\nMarie Anderson\nCaron Gardner\nNosher Powell\nCarolae Donoghue\nVincent Wong\nHelena Clayton\nNigel Jones\nRoy Gunson\nDaphne Davey\nStenson Falke\nAlexander Curry\nFrank Williams\nRalph Wood\nRosalind Bailey\nMarion Mould\nSheila Sands\nRichard Baker\nDouglas Adams\nEwa Aulin\nReginald Bosanquet\nBarbara Lindley\nRoy Brent\nJonas Card\nTony Christopher\nBeulah Hughes\nPeter Kodak\nLulu\nJay Neill\nGraham Skidmore\nRingo Starr\nFred Tomlinson\nDavid Hamilton\nSuzy Mandel\nPeter Woods\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494913,
          "key": "a3dc7153-8f26-4ac9-b5b5-8631600c3563",
          "title": "Importing Local Scripts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a3dc7153-8f26-4ac9-b5b5-8631600c3563",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527394,
              "key": "c71a5b19-4b49-4d7d-a63c-cc21d0df4183",
              "title": "Importing Files",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qjeSn6zZbR0",
                "china_cdn_id": "qjeSn6zZbR0.mp4"
              }
            },
            {
              "id": 520264,
              "key": "6bf6ba6b-3300-4b47-89d1-be5568f153d8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Importing Local Scripts\nWe can actually import Python code from other scripts, which is helpful if you are working on a bigger project where you want to organize your code into multiple files and reuse code in those files. If the Python script you want to import is in the same directory as your current script, you just type `import` followed by the name of the file, without the .py extension. \n```python\nimport useful_functions\n```\nIt's the standard convention for `import` statements to be written at the top of a Python script, each one on a separate line. This `import` statement creates a __module__ object called `useful_functions`. Modules are just Python files that contain definitions and statements.  To access objects from an imported module, you need to use dot notation.\n```python\nimport useful_functions\nuseful_functions.add_five([1, 2, 3, 4])\n```\nWe can add an alias to an imported module to reference it with a different name.\n```python\nimport useful_functions as uf\nuf.add_five([1, 2, 3, 4])\n```\n### Using a main block\nTo avoid running executable statements in a script when it's imported as a module in another script, include these lines in an `if __name__ == \"__main__\"` block. Or alternatively, include them in a function called main() and call this in the `if main` block.\n\nWhenever we run a script like this, Python actually sets a special built-in variable called `__name__` for any module. When we run a script, Python recognizes this module as the main program, and sets the `__name__` variable for this module to the string `\"__main__\"`. For any modules that are imported in this script, this built-in `__name__` variable is just set to the name of that module. Therefore, the condition `if __name__ == \"__main__\"`is just checking whether this module is the main program. \n",
              "instructor_notes": ""
            },
            {
              "id": 527944,
              "key": "6a638174-2a2b-4efd-95e0-68a1fffd8557",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Try It Out!\nHere's the code I used in the video above. Create these scripts in the same directory and run them in your terminal! Experiment with the `if main` block and accessing objects from the imported module!\n\n```python\n# demo.py\n\nimport useful_functions as uf\n\nscores = [88, 92, 79, 93, 85]\n\nmean = uf.mean(scores)\ncurved = uf.add_five(scores)\n\nmean_c = uf.mean(curved)\n\nprint(\"Scores:\", scores)\nprint(\"Original Mean:\", mean, \" New Mean:\", mean_c)\n\nprint(__name__)\nprint(uf.__name__)\n```\n\n\n```python\n# useful_functions.py\n\ndef mean(num_list):\n    return sum(num_list) / len(num_list)\n\ndef add_five(num_list):\n    return [n + 5 for n in num_list]\n\ndef main():\n    print(\"Testing mean function\")\n    n_list = [34, 44, 23, 46, 12, 24]\n    correct_mean = 30.5\n    assert(mean(n_list) == correct_mean)\n\n    print(\"Testing add_five function\")\n    correct_list = [39, 49, 28, 51, 17, 29]\n    assert(add_five(n_list) == correct_list)\n\n    print(\"All tests passed!\")\n\nif __name__ == '__main__':\n    main()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494915,
          "key": "4815cc2c-fe70-490a-8412-6b223eba93ea",
          "title": "The Standard Library",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4815cc2c-fe70-490a-8412-6b223eba93ea",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527395,
              "key": "cfbe7e94-b945-47cd-bc42-db9e433f4998",
              "title": "The Standard Library",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Fw3vf0tDrJM",
                "china_cdn_id": "Fw3vf0tDrJM.mp4"
              }
            },
            {
              "id": 520265,
              "key": "f4ea514c-bed1-4674-8caa-ee01abb7d0b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Standard Library\n\nYou can discover new modules at the [Python Module of the Week](https://pymotw.com/3/) blog.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 521216,
          "key": "206c580e-6364-4f85-8cdc-7ef8c8294ba3",
          "title": "Quiz: The Standard Library",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "206c580e-6364-4f85-8cdc-7ef8c8294ba3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521217,
              "key": "4decb42d-9326-4edd-9408-8a66a4e23da8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Compute an Exponent\n\nIt's your turn to import and use the `math` module. Use the `math` module to calculate `e` to the power of 3. `print` the answer.\n\nRefer to the [math module's documentation](https://docs.python.org/3.6/library/math.html?highlight=math%20module#module-math) to find the function you need!",
              "instructor_notes": ""
            },
            {
              "id": 521218,
              "key": "626086d2-4560-45fd-8ad0-224dbc73d7ed",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "626086d2-4560-45fd-8ad0-224dbc73d7ed",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6112165266849792",
                "initial_code_files": [
                  {
                    "text": "# print e to the power of 3 using the math module",
                    "name": "expquiz.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 521256,
              "key": "34399f67-1ef2-4fcb-a581-b49129957c5d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Password Generator\nWrite a function called `generate_password` that selects three random words from the list of words `word_list` and concatenates them into a single string. Your function should not accept any arguments and should reference the global variable `word_list` to build the password.",
              "instructor_notes": ""
            },
            {
              "id": 521257,
              "key": "4be08baa-9dbb-424e-a8c1-7dd4f019ddcd",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "4be08baa-9dbb-424e-a8c1-7dd4f019ddcd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5822776276025344",
                "initial_code_files": [
                  {
                    "text": "# Use an import statement at the top\n\nword_file = \"words.txt\"\nword_list = []\n\n#fill up the word_list\nwith open(word_file,'r') as words:\n\tfor line in words:\n\t\t# remove white space and make everything lowercase\n\t\tword = line.strip().lower()\n\t\t# don't include words that are too long or too short\n\t\tif 3 < len(word) < 8:\n\t\t\tword_list.append(word)\n\n# Add your function generate_password here\n# It should return a string consisting of three random words \n# concatenated together without spaces\n\n\n\n# test your function\nprint(generate_password())",
                    "name": "password_generator.py"
                  },
                  {
                    "text": "Alice\nwas\nbeginning\nto\nget\nvery\ntired\nof\nsitting\nby\nher\nsister\nbank\nhaving\nnothing\nOnce\ntwice\nshe\nhad\npeeped\ninto\nthe\nbook\nher\nsister\nwas\nreading\nbut\nit\nhad\nno\npictures\nor\nconversations\nin\nit\nand\nwhat\nis\nthe\nuse\nof\na\nbook\nthought\nAlice\nwithout\npictures\nor\nconversations",
                    "name": "words.txt"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 521219,
              "key": "5d8e92db-6c31-4b31-921e-51b3c9a44b86",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Explore the Standard Library\nIn the following quizzes, enter the name of the module that solves each problem. Note that capitalization is important! Every module in the standard library is lowercased. [You can browse the library documentation here.](https://docs.python.org/3/library/)",
              "instructor_notes": ""
            },
            {
              "id": 521222,
              "key": "5af4eb73-0011-4f4d-be1c-30a049ddc305",
              "title": "Which Module? 1 ",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5af4eb73-0011-4f4d-be1c-30a049ddc305",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which module can tell you the current time and date?",
                "matchers": [
                  {
                    "expression": "datetime"
                  },
                  {
                    "expression": "datetime\\.datetime"
                  }
                ]
              }
            },
            {
              "id": 521224,
              "key": "d7c1a811-33db-4e6c-ab48-e42afae68e58",
              "title": "Which Module? 2",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d7c1a811-33db-4e6c-ab48-e42afae68e58",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which module has a method for changing the current working directory?",
                "matchers": [
                  {
                    "expression": "os"
                  }
                ]
              }
            },
            {
              "id": 521230,
              "key": "adda29d1-3fb8-4ecf-a3f3-2d8b07e4dce0",
              "title": "Which Module? 3",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "adda29d1-3fb8-4ecf-a3f3-2d8b07e4dce0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which module can read data from a comma separated values (.csv) file into Python dictionaries for each row?",
                "matchers": [
                  {
                    "expression": "csv"
                  }
                ]
              }
            },
            {
              "id": 521234,
              "key": "82d40c88-b404-48c8-a8e5-10b1b327ee0b",
              "title": "Which Module? 4",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "82d40c88-b404-48c8-a8e5-10b1b327ee0b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which module can help extract all of the files from a zip file?",
                "matchers": [
                  {
                    "expression": "zipfile"
                  }
                ]
              }
            },
            {
              "id": 521241,
              "key": "c148a603-4667-43a5-8d2c-d89560315d5b",
              "title": "Which Module? 5",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c148a603-4667-43a5-8d2c-d89560315d5b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which module can say how long your code took to run?\n",
                "matchers": [
                  {
                    "expression": "timeit"
                  },
                  {
                    "expression": "profile"
                  },
                  {
                    "expression": "cProfile"
                  },
                  {
                    "expression": "time"
                  }
                ]
              }
            },
            {
              "id": 521252,
              "key": "6627103e-e046-490c-90a6-a115b85ece48",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Our favourite modules \n============\nThe Python Standard Library has a lot of modules! To help you get familiar with what's available, here are a selection of our favourite Python Standard Library modules and why we use them! \n\n* [`csv`](https://docs.python.org/3/library/csv.html): very convenient for reading and writing csv files  \n* [`collections`](https://docs.python.org/3/library/collections.html): useful extensions of the usual data types including `OrderedDict`, `defaultdict` and `namedtuple`  \n* [`random`](https://docs.python.org/3/library/random.html): generates pseudo-random numbers, shuffles sequences randomly and chooses random items  \n* [`string`](https://docs.python.org/3/library/string.html): more functions on strings. This module also contains useful collections of letters like `string.digits` (a string containing all characters which are valid digits).  \n* [`re`](https://docs.python.org/3/library/re.html): pattern-matching in strings via regular expressions  \n* [`math`](https://docs.python.org/3/library/math.html): some standard mathematical functions  \n* [`os`](https://docs.python.org/3/library/os.html): interacting with operating systems  \n* [`os.path`](https://docs.python.org/3/library/os.path.html): submodule of `os` for manipulating path names  \n* [`sys`](https://docs.python.org/3/library/sys.html): work directly with the Python interpreter  \n* [`json`](https://docs.python.org/3/library/json.html): good for reading and writing json files (good for web work)\n\nWe hope you find these useful!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 521258,
          "key": "e29dc3ee-b0fc-47dd-af4a-288cf51985bb",
          "title": "Solution: The Standard Library",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e29dc3ee-b0fc-47dd-af4a-288cf51985bb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521259,
              "key": "951e88a0-e58d-4c88-8418-47bc6c007069",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Password Generator \nTo create random passwords we used `import random`. The function definition was simply:\n```python\ndef generate_password():\n\treturn random.choice(word_list) + random.choice(word_list) + random.choice(word_list)\n```\nAlternatively, you could use the `random.sample` function and `.join` method for strings:\n```python\ndef generate_password():\n    return ''.join(random.sample(word_list,3))\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 513944,
          "key": "3e8c6ff5-48d9-4a60-b747-bfc46f36732f",
          "title": "Techniques for Importing Modules",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3e8c6ff5-48d9-4a60-b747-bfc46f36732f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527396,
              "key": "0ab8a765-74d4-4fcc-9252-ae4bd64d052f",
              "title": "Techniques For Importing Modules",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jPGyFgcIvsM",
                "china_cdn_id": "jPGyFgcIvsM.mp4"
              }
            },
            {
              "id": 520266,
              "key": "38d41e0c-6aa4-488d-8970-fc62da12cf8e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Techniques for Importing Modules\nThere are other variants of `import` statements that are useful in different situations.\n\n1. To import an individual function or class from a module:\n```python\nfrom module_name import object_name\n```\n2. To import multiple individual objects from a module:\n```python\nfrom module_name import first_object, second_object\n```\n3. To rename a module:\n```python\nimport module_name as new_name\n```\n4. To import an object from a module and rename it:\n```python\nfrom module_name import object_name as new_name\n```\n5. To import every object individually from a module (DO NOT DO THIS):\n```python\nfrom module_name import *\n```\n6. If you really want to use all of the objects from a module, use the standard import module_name statement instead and access each of the objects with the dot notation.\n```python\nimport module_name\n```",
              "instructor_notes": ""
            },
            {
              "id": 527397,
              "key": "f7504ec7-e386-424d-89e9-ad8989e95fdf",
              "title": "Techniques For Importing Modules Part II",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "aASigWQ_XU0",
                "china_cdn_id": "aASigWQ_XU0.mp4"
              }
            },
            {
              "id": 520267,
              "key": "b18d9e93-de21-41bd-90f9-37dec6c8011b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Modules, Packages, and Names\nIn order to manage the code better, modules in the Python Standard Library are split down into sub-modules that are contained within a package. A __package__ is simply a module that contains sub-modules. A sub-module is specified with the usual dot notation.\n\nModules that are submodules are specified by the package name and then the submodule name separated by a dot. You can import the submodule like this.\n```python\nimport package_name.submodule_name\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 521244,
          "key": "79434913-a869-4ce5-9b0e-f1589c83b1c7",
          "title": "Quiz: Techniques for Importing Modules",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "79434913-a869-4ce5-9b0e-f1589c83b1c7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521246,
              "key": "197c38bc-b30c-4599-bb25-52fc1b76a2fd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Importing and accessing from modules\nIn this quiz, you'll be using different methods to import and use the `random.randint()` function from the `random` module. Your task is to match the `import` statement with the way you would then call the function itself. ",
              "instructor_notes": ""
            },
            {
              "id": 521249,
              "key": "9d8b491b-d38d-4431-94f8-78f8a5c120dc",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9d8b491b-d38d-4431-94f8-78f8a5c120dc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the import statement with the way that `random.randint()` is called."
                },
                "concepts_label": " Import statement",
                "answers_label": "Calling the function",
                "concepts": [
                  {
                    "text": "`import random`",
                    "correct_answer": {
                      "id": "a1516996569120",
                      "text": "`random.randint(0,10)`"
                    }
                  },
                  {
                    "text": "`from random import randint`",
                    "correct_answer": {
                      "id": "a1516996590244",
                      "text": "`randint(0,10)`"
                    }
                  },
                  {
                    "text": "`import random as rd`",
                    "correct_answer": {
                      "id": "a1516996602411",
                      "text": "`rd.randint(0,10)`"
                    }
                  },
                  {
                    "text": "`from random import randint as rint`",
                    "correct_answer": {
                      "id": "a1516996611325",
                      "text": "`rint(0,10)`"
                    }
                  },
                  {
                    "text": "`from random import *`",
                    "correct_answer": {
                      "id": "a1516996623566",
                      "text": "Don't use this import statement!"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1516996602411",
                    "text": "`rd.randint(0,10)`"
                  },
                  {
                    "id": "a1516996623566",
                    "text": "Don't use this import statement!"
                  },
                  {
                    "id": "a1516996611325",
                    "text": "`rint(0,10)`"
                  },
                  {
                    "id": "a1516996590244",
                    "text": "`randint(0,10)`"
                  },
                  {
                    "id": "a1516996569120",
                    "text": "`random.randint(0,10)`"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 494916,
          "key": "45252bd7-50b1-41f0-bed5-cef100501c12",
          "title": "Third-Party Libraries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "45252bd7-50b1-41f0-bed5-cef100501c12",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527398,
              "key": "05bfee5b-deed-465d-a2a9-324230076197",
              "title": "Third Party Libraries And Package Managers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "epOze9gC6T4",
                "china_cdn_id": "epOze9gC6T4.mp4"
              }
            },
            {
              "id": 520268,
              "key": "b0be2c2b-1aa9-4a6b-acc1-6d586e3db619",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Third-Party Libraries\nThere are tens of thousands of third-party libraries written by independent developers! You can install them using pip, a package manager that is included with Python 3. pip is the standard package manager for Python, but it isn't the only one. One popular alternative is Anaconda which is designed specifically for data science.\n\nTo install a package using pip, just enter \"pip install\" followed by the name of the package in your command line like this: `pip install package_name`. This downloads and installs the package so that it's available to import in your programs. Once installed, you can import third-party packages using the same syntax used to import from the standard library.\n\n### Using a `requirements.txt` File\nLarger Python programs might depend on dozens of third party packages. To make it easier to share these programs, programmers often list a project's dependencies in a file called requirements.txt. This is an example of a requirements.txt file.\n```txt\nbeautifulsoup4==4.5.1\nbs4==0.0.1\npytz==2016.7\nrequests==2.11.1\n```\nEach line of the file includes the name of a package and its version number. The version number is optional, but it usually should be included. Libraries can change subtly, or dramatically, between versions, so it's important to use the same library versions that the program's author used when they wrote the program.\n\nYou can use pip to install all of a project's dependencies at once by typing `pip install -r requirements.txt` in your command line.\n",
              "instructor_notes": ""
            },
            {
              "id": 521260,
              "key": "2187a263-cc57-4654-a0f2-d4c82d72ab1f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Useful Third-Party Packages\nBeing able to install and import third party libraries is useful, but to be an effective programmer you also need to know what libraries are available for you to use. People typically learn about useful new libraries from online recommendations or from colleagues. If you're a new Python programmer you may not have many colleagues, so to get you started here's a list of packages that are popular with engineers at Udacity.\n\n* [IPython](https://ipython.org/) - A better interactive Python interpreter  \n* [requests](http://docs.python-requests.org/) - Provides easy to use methods to make web requests. Useful for accessing web APIs.  \n* [Flask](http://flask.pocoo.org/) - a lightweight framework for making web applications and APIs.  \n* [Django](https://www.djangoproject.com/) - A more featureful framework for making web applications. Django is particularly good for designing complex, content heavy, web applications.  \n* [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/) - Used to parse HTML and extract information from it. Great for web scraping.  \n* [pytest](http://doc.pytest.org/) - extends Python's builtin assertions and unittest module.  \n* [PyYAML](http://pyyaml.org/wiki/PyYAML) -  For reading and writing [YAML](https://en.wikipedia.org/wiki/YAML) files.  \n* [NumPy](http://www.numpy.org/) - The fundamental package for scientific computing with Python. It contains among other things a powerful N-dimensional array object and useful linear algebra capabilities.  \n* [pandas](http://pandas.pydata.org/) - A library containing high-performance, data structures and data analysis tools. In particular, pandas provides dataframes!  \n* [matplotlib](http://matplotlib.org/) - a 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments.  \n* [ggplot](http://ggplot.yhathq.com/) - Another 2D plotting library, based on R's ggplot2 library.  \n* [Pillow](https://python-pillow.org/) - The Python Imaging Library adds image processing capabilities to your Python interpreter.  \n* [pyglet](http://www.pyglet.org/) - A cross-platform application framework intended for game development.  \n* [Pygame](http://www.pygame.org/) - A set of Python modules designed for writing games.  \n* [pytz](http://pytz.sourceforge.net/) - World Timezone Definitions for Python  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494917,
          "key": "7753beb8-ad05-431a-a4dc-2bce9151914f",
          "title": "Experimenting with an Interpreter",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7753beb8-ad05-431a-a4dc-2bce9151914f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527399,
              "key": "bee3c39c-9fd8-4925-93b9-2bd4ef8fe4dc",
              "title": "Experimenting With An Interpreter",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hspPtnQwMPg",
                "china_cdn_id": "hspPtnQwMPg.mp4"
              }
            },
            {
              "id": 520270,
              "key": "f0991138-2bfe-4e29-8876-76bddb913819",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Experimenting with an Interpreter\n\nStart your Python interactive interpreter by entering the command `python` in your terminal. You can type here to interact with Python directly. This is an awesome place to experiment and try bits of Python code at a time. Just enter Python code, and the output will appear on the next line.\n\n```\n>>> type(5.23)\n<class 'float'>\n```\nIn the interpreter, the value of the last line in a prompt will be outputted automatically. If you had multiple lines where you’d want to output values, you’d still have to use print.\n\nIf you start to define a function you will see a change in the prompt, to signify that this is a continuation line. You'll have to include your own indentation as you define the function.\n\n```\n>>> def cylinder_volume(height, radius):\n...         pi = 3.14159\n...         return height * pi * radius ** 2\n```\n\nA drawback of the interpreter is that it’s tricky to edit code. If you made a mistake when typing this function, or forgot to indent the body of the function, you can't use the mouse to click your cursor where you want it. You have to navigate with arrow keys to move the cursor forwards and backwards through the line itself for editing. It would be helpful for you to learn useful shortcuts for actions like moving to the beginning or end of the line.\n\nNotice I can reference any objects I defined earlier in the interpreter!\n\n```\n>>> cylinder_volume(10, 3)\n282.7431\n```\nOne useful trick is using the up and down arrow to cycle through your recent commands at the interactive prompt. This can be useful to re-run or adapt code you've already tried.\n\nTo quit the Python interactive interpreter, use the command `exit()` or hit `ctrl-D` on mac or linux, and `ctrl-Z` then `Enter` for windows.\n\n### IPython\nThere is actually an awesome alternative to the default Python interactive interpreter, IPython, which comes with many additional features.\n- tab completion\n- `?` for details about an object\n- `!` to execute system shell commands\n-  syntax highlighting!\n\nand a lot more you can find [here](https://ipython.org/ipython-doc/3/interactive/tutorial.html)! \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494918,
          "key": "396f3428-881e-410f-bde5-4cb0ea22c4a0",
          "title": "Online Resources",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "396f3428-881e-410f-bde5-4cb0ea22c4a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 521262,
              "key": "4a76701b-e829-425b-bf56-1be505188d0f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Getting the information you need to know\nIt takes an enormous amount of knowledge to be a skilled programmer. There's libraries to know, syntax to remember, and myriad other details. To add to the difficulty, the technology landscape is constantly shifting as new techniques and tools are invented.\n\nTo a novice programmer, learning all of these details and keeping abreast of new developments seems like an impossible task. And it is! Expert programmers who have been working for years don't actually carry an encyclopedia's worth of knowledge in their heads. Instead they have mastered the task of finding information quickly.",
              "instructor_notes": ""
            },
            {
              "id": 521263,
              "key": "317d1ca9-2c48-4e46-9a23-883777cd48b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "How to Search\n=============\nHere are some techniques for effective web searching:\n\n* Try using \"Python\" or the name of the library you're using as the first word of your query. This tells the search engine to prioritize results that are explicitly related to the tools you're using.\n* Writing a good search query can take multiple attempts. If you don't find helpful results on your first attempt, try again. \n* Try using keywords found on the pages you found in your initial search to direct the search engine to better resources in the subsequent search.\n* Copy and paste error messages to use as search terms. This will lead you to explanations of the error and potential causes. An error message might include references to specific line numbers of code that you wrote. Only include the part of the error message that comes before this in your search.\n* If you can't find an answer to your question, ask it yourself! Communities like StackOverflow have etiquette rules you must learn if you want to participate, but don't let this stop you from using these resources.",
              "instructor_notes": ""
            },
            {
              "id": 521266,
              "key": "151b6b28-b8d2-4728-8826-2d215e65e24a",
              "title": "Quiz: Best Search Term",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "151b6b28-b8d2-4728-8826-2d215e65e24a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "While coding I encountered this error message. \n\n```python\nUnboundLocalError: local variable 'egg_count' referenced before assignment\n```\n\nWhich of these search terms is mostly likely to yield helpful results?",
                "answers": [
                  {
                    "id": "a1516997159998",
                    "text": "`egg_count` referenced before assignment",
                    "is_correct": false
                  },
                  {
                    "id": "a1516997356197",
                    "text": "counting with Python",
                    "is_correct": false
                  },
                  {
                    "id": "a1516997356748",
                    "text": "reference before assignment",
                    "is_correct": false
                  },
                  {
                    "id": "a1516997357276",
                    "text": "Python UnboundLocalError: local variable",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 521267,
              "key": "47e8a8eb-c4a6-438b-9a65-cd70dd3f58f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Hierarchy of Online Resources\nWhile there are many online resources about programming, not all of the them are created equal. This list of resources is in approximate order of reliability.\n\n1. **[The Python Tutorial](https://docs.python.org/3/tutorial/)** - This section of the official documentation surveys Python's syntax and standard library. It uses examples, and is written using less technical language than the main documentation. Make sure you're reading the Python 3 version of the docs!\n2. **[The Python Language and Library References](https://docs.python.org/3/index.html)** - The Language Reference and Library Reference are more technical than the tutorial, but they are the definitive sources of truth. As you become increasingly acquainted with Python you should use these resources more and more.\n3. **Third-Party Library Documentation** - Third-party libraries publish their documentation on their own websites, and often times at https://readthedocs.org/. You can judge the quality of a third-party library by the quality of its documentation. If the developers haven't found time to write good docs, they probably haven't found the time to polish their library either.\n4. **The websites and blogs of prominent experts** - The previous resources are primary sources, meaning that they are documentation from the same people who wrote the code being documented. Primary sources are the most reliable. Secondary sources are also extremely valuable. The difficulty with secondary sources is determining the credibility of the source. The websites of authors like [Doug Hellmann](https://doughellmann.com/blog/) and developers like [Eli Bendersky](http://eli.thegreenplace.net/) are excellent. The blog of an unknown author might be excellent, or it might be rubbish.\n5. **[StackOverflow](http://stackoverflow.com/)** - This question and answer site has a good amount of traffic, so it's likely that someone has asked (and someone has answered) a related question before! However, answers are provided by volunteers and vary in quality. Always understand solutions before putting them into your program. One line answers without any explanation are dubious. This is a good place to find out more about your question or discover alternative search terms.\n6. **Bug Trackers** - Sometimes you'll encounter a problem so rare, or so new, that no one has addressed it on StackOverflow. You might find a reference to your error in a bug report on GitHub for instance. These bug reports can be helpful, but you'll probably have to do some original engineering work to solve the problem.\n7. **Random Web Forums** - Sometimes your search yields references to forums that haven't been active since 2004, or some similarly ancient time. If these are the only resources that address your problem, you should rethink how you're approaching your solution.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494919,
          "key": "54b598b3-4c5a-4863-aa0d-592d47f1cd8f",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54b598b3-4c5a-4863-aa0d-592d47f1cd8f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527400,
              "key": "562adb21-9f7a-479c-aae3-5b1620178c45",
              "title": "Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rEMrswkLvh8",
                "china_cdn_id": "rEMrswkLvh8.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}