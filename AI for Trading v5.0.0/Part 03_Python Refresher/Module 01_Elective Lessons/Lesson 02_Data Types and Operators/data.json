{
  "data": {
    "lesson": {
      "id": 468865,
      "key": "ebd93cf2-9329-4415-9bc2-7281e2aa9e13",
      "title": "Data Types and Operators",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Familiarize yourself with the building blocks of Python! Learn about data types and operators, compound data structures, type conversion, built-in functions, and style guidelines.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/ebd93cf2-9329-4415-9bc2-7281e2aa9e13/468865/1581969602633/Data+Types+and+Operators+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/ebd93cf2-9329-4415-9bc2-7281e2aa9e13/468865/1581969595753/Data+Types+and+Operators+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 468866,
          "key": "2cc7d900-a68a-4565-b98e-41ba13a3ac88",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2cc7d900-a68a-4565-b98e-41ba13a3ac88",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 514161,
              "key": "c15471d6-45aa-401d-99e4-9e0feb679861",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4F7SC0C6tfQ",
                "china_cdn_id": "4F7SC0C6tfQ.mp4"
              }
            },
            {
              "id": 468942,
              "key": "3242bf0e-47fd-4d63-a9b2-000289913f84",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Data Types and Operators\n\nWelcome to this lesson on Data Types and Operators! You'll learn about:\n\n- Data Types: Integers, Floats, Booleans, Strings, Lists, Tuples, Sets, Dictionaries\n- Operators: Arithmetic, Assignment, Comparison, Logical, Membership, Identity  \n- Built-In Functions, Compound Data Structures, Type Conversion\n- Whitespace and Style Guidelines",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468867,
          "key": "861222b2-49d8-40c5-8e6c-9880f0044504",
          "title": "Arithmetic Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "861222b2-49d8-40c5-8e6c-9880f0044504",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 841188,
              "key": "c88429a0-7c2d-4987-a23d-08de18cf8861",
              "title": "Arithmetic Operators",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "M8TIOK2P2yw",
                "china_cdn_id": "M8TIOK2P2yw.mp4"
              }
            },
            {
              "id": 468954,
              "key": "a8c31a47-0001-4c9f-aca2-e703dc95bb3a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Arithmetic Operators\n\nArithmetic operators\n\n* `+` Addition\n* `-` Subtraction\n* `*` Multiplication\n* `/` Division\n* `%` Mod (the remainder after dividing)\n* `**` Exponentiation (note that `^` does not do this operation, as you might have seen in other languages)\n* `//` Divides and rounds down to the nearest integer\n\nThe usual order of mathematical operations holds in Python, which you can review in this Math Forum [page](http://mathforum.org/dr.math/faq/faq.order.operations.html) if needed.\n\n**Bitwise operators** are special operators in Python that you can learn more about [here](https://wiki.python.org/moin/BitwiseOperators) if you'd like. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468891,
          "key": "b83e017f-e464-4bf9-8b31-6a1136384ba4",
          "title": "Quiz: Arithmetic Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b83e017f-e464-4bf9-8b31-6a1136384ba4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 469766,
              "key": "900238ae-0755-4670-a05b-0d0babd684ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Average Electricity Bill\n\nIt's time to try a calculation in Python!\n\nMy electricity bills for the last three months have been $23, $32 and $64. What is the average monthly electricity bill over the three month period? Write an expression to calculate the mean, and use `print()` to view the result.",
              "instructor_notes": ""
            },
            {
              "id": 469805,
              "key": "7fdbeb0c-429a-4440-9ad6-da9d51fd8e50",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7fdbeb0c-429a-4440-9ad6-da9d51fd8e50",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6000978780880896",
                "initial_code_files": [
                  {
                    "text": "# Write an expression that calculates the average of 23, 32 and 64\n# Place the expression in this print statement\nprint()",
                    "name": "electric_average.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 469812,
              "key": "c0c897e3-9a91-4db1-a909-f5feb2fa06d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Calculate\n\nIn this quiz you're going to do some calculations for a tiler. Two parts of a floor need tiling. One part is **9 tiles wide by 7 tiles long**, the other is **5 tiles wide by 7 tiles long**. Tiles come in packages of 6.\n\n1. How many tiles are needed? \n2. You buy **17 packages of tiles containing 6 tiles each**. How many tiles will be left over?",
              "instructor_notes": ""
            },
            {
              "id": 469813,
              "key": "ad99ad40-46b7-4bf1-bbc2-2805c5f40fd0",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "ad99ad40-46b7-4bf1-bbc2-2805c5f40fd0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5178122371203072",
                "initial_code_files": [
                  {
                    "text": "# Fill this in with an expression that calculates how many tiles are needed.\nprint()\n\n# Fill this in with an expression that calculates how many tiles will be left over.\nprint()",
                    "name": "tiles.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 469818,
              "key": "75c65353-8967-4676-89e3-31fff0cfb49c",
              "title": "Code Formatting",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "75c65353-8967-4676-89e3-31fff0cfb49c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these lines of Python code are well formatted? How would you improve the readability of the codes that don't use good formatting? (Choose all that apply)",
                "answers": [
                  {
                    "id": "a1512590145398",
                    "text": "`print(((3+  32))+ -15//2)`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512590160985",
                    "text": "`print((17 - 6)%(5 + 2))`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512590161481",
                    "text": "`print ((1 + 2 + 4) / 13)`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512590162015",
                    "text": "`print(4/2 - 7*7)`",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 599192,
          "key": "3728f614-27a6-4417-a53e-8648a5b26187",
          "title": "Solution: Arithmetic Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3728f614-27a6-4417-a53e-8648a5b26187",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 599194,
              "key": "4f9db264-cd91-4b31-8511-f378db38a1f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here are our solutions to the Arithmetic Operators quiz questions on the previous page:\n\n# Solution: Average Electricity Bill\n```python\n# Write an expression that calculates the average of 23, 32 and 64.\n# Place the expression in this print statement.\nprint((23 + 32 + 64)/3)\n```\n\n# Solution: Calculate\n```python\n# Fill this in with an expression that calculates how many tiles are needed.\nprint(9*7 + 5*7)\n# Fill this in with an expression that calculates how many tiles will be left over.\nprint(17*6 - (9*7 + 5*7))\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468892,
          "key": "cf20e9f1-9b19-4bea-b2e1-d5c591e20877",
          "title": "Variables and Assignment Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cf20e9f1-9b19-4bea-b2e1-d5c591e20877",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527842,
              "key": "066dd712-7551-444a-9b14-93de0f0814b4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Variables and Assignment Operators\n\nFrom this page, you will get your first look at variables in Python.  There are three videos in this concept to show you some different cases you might run into!",
              "instructor_notes": ""
            },
            {
              "id": 514163,
              "key": "4eb93735-679b-4c5c-a604-cddb9330abde",
              "title": "Variables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7pxpUot4x0w",
                "china_cdn_id": "7pxpUot4x0w.mp4"
              }
            },
            {
              "id": 469143,
              "key": "ec710ae6-719d-4249-aff0-d274ff359da7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Variables I\n\nVariables are used all the time in Python!  Below is the example you saw in the video where we performed the following:\n\n`mv_population = 74728`\n\nHere `mv_population` is a variable, which holds the value of `74728`.  This assigns the item on the right to the name on the left, which is actually a little different than mathematical equality, as `74728` does not hold the value of `mv_population`.\n\nIn any case, whatever term is on the left side, is now a name for whatever value is on the right side.  Once a value has been assigned to a variable name, you can access the value from the variable name.  \n\n",
              "instructor_notes": ""
            },
            {
              "id": 841189,
              "key": "004cfa6d-ad76-41c3-b7f5-1cce5307c9cb",
              "title": "L2 04b Variables II V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4IJqbP8vi6A",
                "china_cdn_id": "4IJqbP8vi6A.mp4"
              }
            },
            {
              "id": 514165,
              "key": "a2e714c8-fba1-4039-baed-3c3c3de51649",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Variables II\n\nIn this video you saw that the following two are equivalent in terms of assignment:\n\n```\nx = 3\ny = 4\nz = 5\n```\n\nand\n\n```\nx, y, z = 3, 4, 5\n```\n\nHowever, the above isn't a great way to assign variables in most cases, because our variable names should be descriptive of the values they hold.\n\nBesides writing variable names that are descriptive, there are a few things to watch out for when naming variables in Python.\n\n`1`. Only use ordinary letters, numbers and underscores in your variable names. They can’t have spaces, and need to start with a letter or underscore.\n\n`2`. **You can’t use reserved words or built-in identifiers** that have important purposes in Python, which you’ll learn about throughout this course.  A list of python reserved words is described [here](https://pentangle.net/python/handbook/node52.html).  Creating names that are descriptive of the values often will help you avoid using any of these words.  A quick table of these words is also available below.",
              "instructor_notes": ""
            },
            {
              "id": 527853,
              "key": "b7be01d4-ce73-42ce-9c2b-877d2620879c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a71131d_screen-shot-2018-01-30-at-4.39.42-pm/screen-shot-2018-01-30-at-4.39.42-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b7be01d4-ce73-42ce-9c2b-877d2620879c",
              "caption": "",
              "alt": "",
              "width": 500,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 527861,
              "key": "4850a026-0636-4499-99f4-67c1b2f2d70b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n`3`. The pythonic way to name variables is to use all lowercase letters and underscores to separate words.\n\n**YES**\n\n```\nmy_height = 58\nmy_lat = 40\nmy_long = 105\n```\n**NO**\n\n```\nmy height = 58\nMYLONG = 40\nMyLat = 105\n```\n\nThough the last two of these would work in python, they are not pythonic ways to name variables.  The way we name variables is called snake case, because we tend to connect the words with underscores.",
              "instructor_notes": ""
            },
            {
              "id": 514166,
              "key": "cf9b0deb-9286-4a39-b095-43154e2f0f85",
              "title": "Assignment Operators",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "p_qfzL-x3Cs",
                "china_cdn_id": "p_qfzL-x3Cs.mp4"
              }
            },
            {
              "id": 469144,
              "key": "f6052b71-fe23-429e-b9b1-6b905f3cdd87",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Assignment Operators\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 527864,
              "key": "7b6bb637-28b7-41c0-bf94-213fd56e82c7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Below are the assignment operators from the video.  You can also use `*=` in a similar way, but this is less common than the operations shown below.  You can find some practice with much of what we have already covered [here](https://www.programiz.com/python-programming/operators).",
              "instructor_notes": ""
            },
            {
              "id": 527863,
              "key": "6ad1dd66-bd25-4151-9ec9-9aa3f9cfb81c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a7118b3_screen-shot-2018-01-30-at-5.14.39-pm/screen-shot-2018-01-30-at-5.14.39-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6ad1dd66-bd25-4151-9ec9-9aa3f9cfb81c",
              "caption": "",
              "alt": "",
              "width": 300,
              "height": 200,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 468893,
          "key": "0edf3cc8-5c35-43a9-bd6e-d410f0ad2978",
          "title": "Quiz: Variables and Assignment Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0edf3cc8-5c35-43a9-bd6e-d410f0ad2978",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Scientific Notation",
                "uri": "https://video.udacity-data.com/topher/2019/November/5dc9ab54_scientific-notation-wikipedia/scientific-notation-wikipedia.pdf"
              },
              {
                "name": "List of U.S. states in order of the date they entered the Union",
                "uri": "https://video.udacity-data.com/topher/2019/November/5dc9ab62_list-of-u.s-wikipedia/list-of-u.s-wikipedia.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 469834,
              "key": "341a77b5-d737-482d-97aa-2172bc21cc0e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Assign and Modify Variables\n\nNow it's your turn to work with variables. The comments in this quiz (the lines that begin with `#`) have instructions for creating and modifying variables. After each comment write a line of code that implements the instruction.\n\nNote that this code uses [scientific notation](https://en.wikipedia.org/wiki/Scientific_notation) to define large numbers. `4.445e8` is equal to `4.445 * 10 ** 8` which is equal to `444500000.0`.",
              "instructor_notes": ""
            },
            {
              "id": 469835,
              "key": "72894335-c4ce-492c-8c4e-4ebcd1062b03",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "72894335-c4ce-492c-8c4e-4ebcd1062b03",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6284466486640640",
                "initial_code_files": [
                  {
                    "text": "# The current volume of a water reservoir (in cubic metres)\nreservoir_volume = 4.445e8\n# The amount of rainfall from a storm (in cubic metres)\nrainfall = 5e6\n\n# decrease the rainfall variable by 10% to account for runoff\n\n# add the rainfall variable to the reservoir_volume variable\n\n# increase reservoir_volume by 5% to account for stormwater that flows\n# into the reservoir in the days following the storm\n\n# decrease reservoir_volume by 5% to account for evaporation\n\n# subtract 2.5e5 cubic metres from reservoir_volume to account for water\n# that's piped to arid regions.\n\n# print the new value of the reservoir_volume variable",
                    "name": "variables.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 469836,
              "key": "0bd7620a-7a1e-417e-b153-90f02ff685ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Changing Variable Values\n\nHow does changing the value of a variable affect another variable that was defined in terms of it? Let's look at an example.\n\nWe're intentionally not providing a place to execute the code here, because we want to help you practice the important skill of walking through lines of code by hand. \n\nEach line of code executes in order, one at a time, with control going from one line to the next. \n\n\t\n\n```python\n>>> carrots = 24\n>>> rabbits = 8\n>>> crs_per_rab = carrots/rabbits\n\n```\n\nNow we add a new 4th line to this code, that assigns a new value to the `rabbits` variable:\n```python\n>>> rabbits = 12\n```",
              "instructor_notes": ""
            },
            {
              "id": 469837,
              "key": "ffcd10c2-e7e1-4ead-b9f0-d0668184d410",
              "title": "Variable Change",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ffcd10c2-e7e1-4ead-b9f0-d0668184d410",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If we now add this new 5th line of code to the above, what will the output be?\n```python\t\n>>> print(crs_per_rab)\t\n```",
                "answers": [
                  {
                    "id": "a1512600903321",
                    "text": "0.5",
                    "is_correct": false
                  },
                  {
                    "id": "a1512600903905",
                    "text": "2.0",
                    "is_correct": false
                  },
                  {
                    "id": "a1512600904472",
                    "text": "3.0",
                    "is_correct": true
                  },
                  {
                    "id": "a1517362145093",
                    "text": "None of the above.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 469854,
              "key": "6807bec1-696b-4813-a219-5e7ed635e07c",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6807bec1-696b-4813-a219-5e7ed635e07c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here is a [list of U.S. states in order of the date they entered the Union](https://en.wikipedia.org/wiki/List_of_U.S._states_by_date_of_admission_to_the_Union). Say you wanted to create a variable for Delaware and assign it a value to signify that it joined the Union first. Which of the following are valid variable names and assignments in Python?",
                "answers": [
                  {
                    "id": "a1512605014850",
                    "text": "`del = 1`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512605224095",
                    "text": "`delaware = 1`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512605224634",
                    "text": "`1 de = first`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512605225200",
                    "text": "`de = 1`",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 469841,
          "key": "e968300b-6d70-4898-b1e6-fd39952cb186",
          "title": "Solution: Variables and Assignment Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e968300b-6d70-4898-b1e6-fd39952cb186",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 469842,
              "key": "3a7b879d-736b-46df-ac89-eefb0def5e67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Assign and Modify Variables\n\nThis is our solution to the previous quiz:\n```python\n# The current volume of a water reservoir (in cubic metres)\nreservoir_volume = 4.445e8\n# The amount of rainfall from a storm (in cubic metres)\nrainfall = 5e6\n\n# decrease the rainfall variable by 10% to account for runoff\nrainfall *= .9\n\n# add the rainfall variable to the reservoir_volume variable\nreservoir_volume += rainfall\n\n# increase reservoir_volume by 5% to account for stormwater that flows\n# into the reservoir in the days following the storm\nreservoir_volume *= 1.05\n\n# decrease reservoir_volume by 5% to account for evaporation\nreservoir_volume *= 0.95\n\n# subtract 2.5e5 cubic metres from reservoir_volume to account for water\n# that's piped to arid regions.\nreservoir_volume -= 2.5e5 \n\n# print the new value of the reservoir_volume variable\nprint(reservoir_volume)\n```",
              "instructor_notes": ""
            },
            {
              "id": 469844,
              "key": "acd1cb5f-1a30-4900-b6e2-a6c8bd2a35f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Changing Variables\n\nFor the first multiple choice quiz, the correct answer is that the value of `crs_per_rab` has not changed. That is, it is still 3.0.\n\nThis is because when a variable is assigned, it is assigned to the *value of the expression* on the right-hand-side, not to the expression itself. In the line:\n```python\t\n>>> crs_per_rab = carrots/rabbits\t\n```\t\nPython actually did the calculation to evaluate the expression on the right-hand-side, `carrots/rabbits`, and then assigned the variable `crs_per_rab` to be the value of that expression. It promptly forgot the formula, only saving the result in the variable.\n\nIn order to update the value of  `crs_per_rab` to take into account the change in `rabbits`, we need to run this line again:\n```\t\n>>> crs_per_rab = carrots/rabbits\n>>> print(crs_per_rab)\t\n2.0\n```\t\nThat’s the new number of carrots per rabbit after the increase in the number of rabbits. All of our variables have been updated to take this into account.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468894,
          "key": "0056decd-35dc-41d0-9d58-22b3752fb20f",
          "title": "Integers and Floats",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0056decd-35dc-41d0-9d58-22b3752fb20f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 569243,
              "key": "d9fca7a7-6e30-4f81-9278-9e2415050c92",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Integers and Floats\n\nThere are two videos on this page to discuss integers and floats, as well as some additional helpful notes!",
              "instructor_notes": ""
            },
            {
              "id": 569244,
              "key": "e644b1d5-851e-47bf-9b7d-83727b1fc9bd",
              "title": "Números inteiros e floats",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MiJ1vfWp-Ts",
                "china_cdn_id": "MiJ1vfWp-Ts.mp4"
              }
            },
            {
              "id": 469149,
              "key": "4b1271bc-2457-42ed-b25d-6ef68a838ca0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Integers and Floats\n\nThere are two Python data types that could be used for numeric values:\n\n* **int** - for integer values\n* **float** - for decimal or floating point values \n\nYou can create a value that follows the data type by using the following syntax:\n\n```\nx = int(4.7)   # x is now an integer 4\ny = float(4)   # y is now a float of 4.0\n```\n\nYou can check the type by using the `type` function:\n\n```\n>>> print(type(x))\nint\n>>> print(type(y))\nfloat\n```\n\nBecause the float, or approximation, for 0.1 is actually slightly more than 0.1, when we add several of them together we can see the difference between the mathematically correct answer and the one that Python creates.\n\n```\n>>> print(.1 + .1 + .1 == .3)\nFalse\n```\n\nYou can see more on this [here](https://docs.python.org/3/tutorial/floatingpoint.html).",
              "instructor_notes": ""
            },
            {
              "id": 534680,
              "key": "2d98effe-b9a2-4899-9385-a20d49964ec7",
              "title": "Whitespace",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UxkIwcOczQQ",
                "china_cdn_id": "UxkIwcOczQQ.mp4"
              }
            },
            {
              "id": 469150,
              "key": "99a4feef-bb8b-4491-badf-8b7978738a20",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Python Best Practices\n\nFor all the best practices, see the [PEP8 Guidelines](https://www.python.org/dev/peps/pep-0008/).\n\nYou can use the atom package [linter-python-pep8](https://atom.io/packages/linter-python-pep8) to use pep8 within your own programming environment in the Atom text editor, but more on this later.  If you aren't familiar with text editors yet, and you are performing all of your programming in the classroom, no need to worry about this right now.\n\nFollow these guidelines to make other programmers and future you happy!\n\n### Good\n\n```\nprint(4 + 5)\n```\n\n### Bad\n\n```\nprint(                       4 + 5)\n```\n\nYou should limit each line of code to **80** characters, though **99** is okay for certain use cases.  [You can thank IBM for this ruling](https://softwareengineering.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width).\n\nWhy are these conventions important? Although how you format the code doesn’t affect how it runs, following  standard style guidelines makes code easier to read and consistent among different developers on a team.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468895,
          "key": "f514f263-56be-41a9-a5be-28dde3b669bd",
          "title": "Quiz: Integers and Floats",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f514f263-56be-41a9-a5be-28dde3b669bd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 469863,
              "key": "7c2f360e-6bed-4213-a36e-721b76ca4cdf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `int` vs. `float`",
              "instructor_notes": ""
            },
            {
              "id": 469862,
              "key": "82b0d691-3c80-41dc-9aba-8bcf2e3bef4f",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "82b0d691-3c80-41dc-9aba-8bcf2e3bef4f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the fishy situation below, some of the quantities are of type `int` and some are of type `float`. Check all the ones that should be of type `float`.",
                "answers": [
                  {
                    "id": "a1512606294049",
                    "text": "How many people came on your fishing trip",
                    "is_correct": false
                  },
                  {
                    "id": "a1512606305845",
                    "text": "Length of a fish you caught, in meters",
                    "is_correct": true
                  },
                  {
                    "id": "a1512606306417",
                    "text": " Number of fish caught on a fishing trip",
                    "is_correct": false
                  },
                  {
                    "id": "a1512606307039",
                    "text": " Length of time it took to catch the first fish, in hours",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 469864,
              "key": "8a39e671-507d-4ed2-a2fe-01429826b722",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Divide By Zero?\n\nWhat happens if you divide by zero in Python? Try it out! Test run this code and see what happens.",
              "instructor_notes": ""
            },
            {
              "id": 469865,
              "key": "cb54b024-50c9-4819-9d08-4406b5579430",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "cb54b024-50c9-4819-9d08-4406b5579430",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6591216809017344",
                "initial_code_files": [
                  {
                    "text": "print(5/0)",
                    "name": "quiz.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 469866,
              "key": "9849840e-ef0c-4b63-8fa2-cfd08e6f7625",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's what you should have seen when you submitted the Divide by Zero code above:\n\n```text\nTraceback (most recent call last):\n  File \"/tmp/vmuser_tnryxwdmhw/quiz.py\", line 1, in <module>\n    print(5/0)\n\nZeroDivisionError: division by zero```\n\nTraceback means \"What was the programming doing when it broke\"!   This part is usually less helpful than the very last line of your error.  Though you can dig through the rest of the error, looking at just the final line `ZeroDivisionError`, and the message says we divided by zero. Python is enforcing the rules of arithmetic! \n\nIn general, there are two types of errors to look out for\n\n* **Exceptions**\n* **Syntax**\n\nAn **Exception** is a problem that occurs when the code is running, but a 'Syntax Error' is a problem detected when Python checks the code before it runs it.  For more information, see the Python tutorial page on [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468898,
          "key": "68a84b8b-a33b-4f94-8b4b-0d4cb1022757",
          "title": "Booleans, Comparison Operators, and Logical Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "68a84b8b-a33b-4f94-8b4b-0d4cb1022757",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 514169,
              "key": "37f57f8d-4b20-4a23-a18b-eb4110d19a51",
              "title": "Boolean Comparison and Logical Operators",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iNNsUJIDtVU",
                "china_cdn_id": "iNNsUJIDtVU.mp4"
              }
            },
            {
              "id": 469151,
              "key": "9d88b9a7-7787-4b93-a2f9-fbc48e349c43",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Booleans, Comparison Operators, and Logical Operators\n\nThe bool data type holds one of the values `True` or `False`, which are often encoded as `1` or `0`, respectively.  \n\nThere are 6 comparison operators that are common to see in order to obtain a `bool` value:\n\n### Comparison Operators\n\n| **Symbol Use Case**  | **Bool**  | **Operation** |\n|---|---|---|\n| 5  <  3  |  False  | Less Than\n| 5 > 3  | True  | Greater Than\n|  3 <= 3 | True   |  Less Than or Equal To\n|  3 >= 5 | False   | Greater Than or Equal To\n|  3 == 5 | False   | Equal To\n|  3 != 5 | True  | Not Equal To\n\nAnd there are three logical operators you need to be familiar with:\n\n| **Logical Use**  | **Bool**  | **Operation** |\n|---|---|---|\n| 5  <  3 `and` 5 == 5  |  False  | `and` - Evaluates if all provided statements are True\n| 5  <  3 `or` 5 == 5  | True  | `or` - Evaluates if at least one of many statements is True\n| `not` 5  <  3  | True   |  `not` - Flips the Bool Value\n\n[Here](https://www.irishtimes.com/news/science/how-george-boole-s-zeroes-and-ones-changed-the-world-1.2014673) is more information on how George Boole changed the world!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468899,
          "key": "cb14b840-11e9-4ea0-a0b2-ae04c8b73fec",
          "title": "Quiz: Booleans, Comparison Operators, and Logical Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cb14b840-11e9-4ea0-a0b2-ae04c8b73fec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 469867,
              "key": "d2614780-c127-46bb-a9b9-a3c73462a1d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Which is denser, Rio or San Francisco?\n\nTry comparison operators in this quiz! This code calculates the population densities of Rio de Janeiro and San Francisco.\n\nWrite code to compare these densities. Is the population of San Francisco more dense than that of Rio de Janeiro? Print `True` if it is and `False` if not.\n",
              "instructor_notes": ""
            },
            {
              "id": 469868,
              "key": "289f922c-3d85-4f22-8db5-5101a10e5144",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "289f922c-3d85-4f22-8db5-5101a10e5144",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5022304044711936",
                "initial_code_files": [
                  {
                    "text": "sf_population, sf_area = 864816, 231.89\nrio_population, rio_area = 6453682, 486.5\n\nsan_francisco_pop_density = sf_population/sf_area\nrio_de_janeiro_pop_density = rio_population/rio_area\n\n# Write code that prints True if San Francisco is denser than Rio, and False otherwise\n",
                    "name": "CompareDensities.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 469869,
              "key": "9cdae96a-69d4-4ee7-bb3c-b417988fe522",
              "title": "Why `==`?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9cdae96a-69d4-4ee7-bb3c-b417988fe522",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Why do you think Python uses `==` for checking equality rather than `=`?",
                "answers": [
                  {
                    "id": "a1512607159680",
                    "text": "So that it is two characters long, like `!=` is",
                    "is_correct": false
                  },
                  {
                    "id": "a1512607171275",
                    "text": "Because `=` is used to assign variables",
                    "is_correct": true
                  },
                  {
                    "id": "a1512607171815",
                    "text": "Either one works",
                    "is_correct": false
                  },
                  {
                    "id": "a1512607172268",
                    "text": "Because `=` is used to check if two values are approximately equal",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 599195,
          "key": "c5da2f7e-fff0-41e6-ab57-ac68b87c9059",
          "title": "Solution: Booleans, Comparison and Logical Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c5da2f7e-fff0-41e6-ab57-ac68b87c9059",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 599196,
              "key": "8739801e-3074-4eb1-928a-b6153e458c66",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is our solution for the first quiz question on the previous page:\n\n# Solution: Which is denser, Rio or San Francisco?\n```python\nprint(san_francisco_pop_density > rio_de_janeiro_pop_density)\n```\nNote other solutions are possible, like the one below, but take a moment to make sure you understand and appreciate the concise efficiency of the one line above!\n```python\nif (san_francisco_pop_density > rio_de_janeiro_pop_density):\n    print (True)\nelse:\n    print (False)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468900,
          "key": "d3aee112-7e2f-4adc-9a59-bb03e5a84531",
          "title": "Strings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d3aee112-7e2f-4adc-9a59-bb03e5a84531",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 514170,
              "key": "ab59a884-883c-4606-b48b-c5ea6af841dd",
              "title": "Strings",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ySZDrs-nNqg",
                "china_cdn_id": "ySZDrs-nNqg.mp4"
              }
            },
            {
              "id": 729098,
              "key": "f76e155b-1ad5-4ef2-92cd-eae513659220",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the video above, at the 1:32 mark, the `str` is written as follows ```salesman = '\"I think you\\'re an encyclopedia salesman'\"```, but the closing string literals should be double quotes `\"` followed by single quotes `'`.",
              "instructor_notes": ""
            },
            {
              "id": 469153,
              "key": "add14be3-5945-4edb-a8cd-bb8e98b6ef17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Strings\n\nStrings in Python are shown as the variable type `str`.  You can define a string with either double quotes `\"` or single quotes `'`.  If the string you are creating actually has one of these two values in it, then you need to be careful to assure your code doesn't give an error.  \n\n```\n>>> my_string = 'this is a string!'\n>>> my_string2 = \"this is also a string!!!\"\n```\n\nYou can also include a `\\` in your string to be able to include one of these quotes:\n\n```\n>>> this_string = 'Simon\\'s skateboard is in the garage.'\n>>> print(this_string)\n```\n```text\nSimon's skateboard is in the garage.\n```\n\nIf we don't use this, notice we get the following error:\n\n```\n>>> this_string = 'Simon's skateboard is in the garage.'\n```\n```text\n  File \"<ipython-input-20-e80562c2a290>\", line 1\n    this_string = 'Simon's skateboard is in the garage.'\n                         ^\nSyntaxError: invalid syntax\n```\nThe color highlighting is also an indication of the error you have in your string in this second case.  There are a number of other operations you can use with strings as well.  In this video you saw a few:\n\n```\n>>> first_word = 'Hello'\n>>> second_word = 'There'\n>>> print(first_word + second_word)\n\nHelloThere\n\n>>> print(first_word + ' ' + second_word)\n\nHello There\n\n>>> print(first_word * 5)\n\nHelloHelloHelloHelloHello\n\n>>> print(len(first_word))\n\n5\n```\nUnlike the other data types you have seen so far, you can also index into strings, but you will see more on this soon!  For now, here is a small example. Notice Python uses 0 indexing - we will discuss this later in this lesson in detail.\n\n```\n>>> first_word[0]\n\nH\n\n>>> first_word[1]\n\ne\n```\n\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 628699,
              "key": "2636601d-08bf-4504-a6ec-34be2698e107",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### The `len()` function\n\n`len()` is a built-in Python function that returns the length of an object, like a string. The length of a string is the number of characters in the string. This will always be an integer.\n\nThere is an example above, but here's another one:\n```python\nprint(len(\"ababa\") / len(\"ab\"))\n2.5\n```\n\nYou know what the data types are for len(\"ababa\") and len(\"ab\"). Notice the data type of their resulting quotient here.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468901,
          "key": "a9fa5602-6d7c-4e8a-b3e3-58b481798ab0",
          "title": "Quiz: Strings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a9fa5602-6d7c-4e8a-b3e3-58b481798ab0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 473964,
              "key": "b4c7309a-4b2f-4ab6-ab9d-d534f5790bd1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Fix the Quote\n\nThe line of code in the following quiz will cause a SyntaxError, thanks to the misuse of quotation marks. First run it with Test Run to view the error message. Then resolve the problem so that the quote (from [Henry Ford](https://www.goodreads.com/author/quotes/203714.Henry_Ford)) is correctly assigned to the variable `ford_quote`.",
              "instructor_notes": ""
            },
            {
              "id": 473969,
              "key": "80346a72-7238-4ed2-a674-867c27797e4b",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "80346a72-7238-4ed2-a674-867c27797e4b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5051368222621696",
                "initial_code_files": [
                  {
                    "text": "# TODO: Fix this string!\nford_quote = 'Whether you think you can, or you think you can't--you're right.'",
                    "name": "quotes.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 473973,
              "key": "620bdcd9-df81-4ec6-b56b-a2d73b3f75c3",
              "title": "Operators and Strings",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "620bdcd9-df81-4ec6-b56b-a2d73b3f75c3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "We’ve already seen that the type of objects will affect how operators work on them. What will be the output of this code?\n\n```python\ncoconut_count = \"34\"\nmango_count = \"15\"\ntropical_fruit_count = coconut_count + mango_count\nprint(tropical_fruit_count)\n```",
                "answers": [
                  {
                    "id": "a1512672161756",
                    "text": "49 (and tropical_fruit_count is a string)",
                    "is_correct": false
                  },
                  {
                    "id": "a1512672201829",
                    "text": "49 (and tropical_fruit_count is an integer)",
                    "is_correct": false
                  },
                  {
                    "id": "a1512672202413",
                    "text": "3415 (and tropical_fruit_count is a string)",
                    "is_correct": true
                  },
                  {
                    "id": "a1512672202889",
                    "text": "3415 (and tropical_fruit_count is an integer)",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 473974,
              "key": "05ef35ab-4358-4fd1-ae6e-da02251c902d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Write a Server Log Message\n\nIn this programming quiz, you’re going to use what you’ve learned about strings to write a logging message for a server. \n\nYou’ll be provided with example data for a user, the time of their visit and the site they accessed. You should use the variables provided and the techniques you’ve learned to print a log message like this one (with the username, url, and timestamp replaced with values from the appropriate variables):\n\n`Yogesh accessed the site http://petshop.com/pets/reptiles/pythons at 16:20.`\n\nUse the Test Run button to see your results as you work on coding this piece by piece.",
              "instructor_notes": ""
            },
            {
              "id": 473977,
              "key": "a4f4e576-00a1-49dc-9206-5fe6fb8c2cca",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a4f4e576-00a1-49dc-9206-5fe6fb8c2cca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6409228038832128",
                "initial_code_files": [
                  {
                    "text": "username = \"Kinari\"\ntimestamp = \"04:50\"\nurl = \"http://petshop.com/pets/mammals/cats\"\n\n# TODO: print a log message using the variables above.\n# The message should have the same format as this one:\n# \"Yogesh accessed the site http://petshop.com/pets/reptiles/pythons at 16:20.\"\n",
                    "name": "Logs.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 473983,
              "key": "56aa32f2-2d60-4975-ba45-3f4e3124e4b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: `len()`\n\nUse string concatenation and the `len()` function to find the length of a certain movie star's actual full name. Store that length in the `name_length` variable. Don't forget that there are spaces in between the different parts of a name!",
              "instructor_notes": ""
            },
            {
              "id": 473991,
              "key": "7a52103a-a0bd-4f56-be54-0ea2cfe3fd0f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7a52103a-a0bd-4f56-be54-0ea2cfe3fd0f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4510864036724736",
                "initial_code_files": [
                  {
                    "text": "given_name = \"William\"\nmiddle_names = \"Bradley\"\nfamily_name = \"Pitt\"\n\nname_length = #todo: calculate how long this name is\n\n# Now we check to make sure that the name fits within the driving license character limit\n# Nothing you need to do here\ndriving_license_character_limit = 28\nprint(name_length <= driving_license_character_limit)",
                    "name": "bradley.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 473993,
              "key": "a5fca67b-9746-46f3-a01b-dfd4225f2f62",
              "title": "`len` and Integers",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a5fca67b-9746-46f3-a01b-dfd4225f2f62",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "We've just used the `len` function to find the length of strings. What does the `len` function return when we give it the integer 835 instead of a string?",
                "answers": [
                  {
                    "id": "a1512675531720",
                    "text": "835",
                    "is_correct": false
                  },
                  {
                    "id": "a1512675551716",
                    "text": "3",
                    "is_correct": false
                  },
                  {
                    "id": "a1512675552214",
                    "text": "2",
                    "is_correct": false
                  },
                  {
                    "id": "a1512675552721",
                    "text": "Error",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 599197,
          "key": "538cb91f-cad0-4434-b628-d9e5b4ed6ea1",
          "title": "Solution: Strings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "538cb91f-cad0-4434-b628-d9e5b4ed6ea1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 599198,
              "key": "a2039eeb-9e9c-4bd3-b3b5-c4f8b915e72e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here are our solutions to some quizzes on the previous page:\n\n# Solution: Fix the Quote\nHere are two different methods to fix the quote:\n```python\n# TODO: Fix this string!\nford_quote = 'Whether you think you can, or you think you can\\'t--you\\'re right.'\n\n# TODO: Fix this string!\nford_quote = \"Whether you think you can, or you think you can't--you're right.\"\n```\n\n# Solution: Write a Server Log Message\nHere are a couple of options for this one:\n```python\nprint (username + \" accessed the site \" + url + \" at \" + timestamp + \".\")\n```\nOR\n```python\nmessage = username + \" accessed the site \" + url + \" at \" + timestamp + \".\"\nprint(message)\n```\n\n# Solution: `len()`\n\n```python\nname_length = len(given_name) + len(middle_names) + len(family_name) + 2\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468907,
          "key": "c0fc67d1-178b-4162-8c79-e4c834d1d5d3",
          "title": "Type and Type Conversion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c0fc67d1-178b-4162-8c79-e4c834d1d5d3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 542672,
              "key": "97c17c5b-4b2a-44f3-a066-003a591e8022",
              "title": "Type & Type Conversion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yN6Fam_vZrU",
                "china_cdn_id": "yN6Fam_vZrU.mp4"
              }
            },
            {
              "id": 469155,
              "key": "bf6bb8a8-1a6b-4fe6-b7d6-8217c0391b66",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Type and Type Conversion\n\nYou have seen four data types so far:\n\n1. `int` \n2. `float`\n3. `bool`\n4.  `string`\n\nYou got a quick look at `type()` from an earlier video, and it can be used to check the data type of any variable you are working with.\n\n```\n>>> print(type(4))\nint\n>>> print(type(3.7))\nfloat\n>>> print(type('this'))\nstr\n>>> print(type(True))\nbool\n```\n\nYou saw that you can change variable types to perform different operations.  For example, \n\n```\n\"0\" + \"5\"\n```\n\nprovides completely different output than \n\n```\n0 + 5\n```\n\nWhat do you think the below would provide?\n\n```\n\"0\" + 5\n```\n\nHow about the code here:\n\n```\n0 + \"5\"\n```\n\nChecking your variable types is really important to assure that you are retrieving the results you want when programming.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468908,
          "key": "d4b580e8-95e2-42b4-bbcd-2ba1118634a9",
          "title": "Quiz: Type and Type Conversion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d4b580e8-95e2-42b4-bbcd-2ba1118634a9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 473995,
              "key": "710b53bf-43d2-4313-86c1-d5e804ae8a3d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: What Type Do These Objects Have?\n",
              "instructor_notes": ""
            },
            {
              "id": 473997,
              "key": "24b2d59b-178f-48b1-baa1-1259f1bb044e",
              "title": "Which Type? I",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "24b2d59b-178f-48b1-baa1-1259f1bb044e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What type does this object have? `\"12\"`. There is a coding environment further down this page that you can use for experimentation. Enter your code and run it with the \"Test Run\" button.",
                "answers": [
                  {
                    "id": "a1512676199072",
                    "text": "str",
                    "is_correct": true
                  },
                  {
                    "id": "a1512676210194",
                    "text": "float",
                    "is_correct": false
                  },
                  {
                    "id": "a1512676210662",
                    "text": "int",
                    "is_correct": false
                  },
                  {
                    "id": "a1512676211111",
                    "text": "bool",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 473998,
              "key": "1172687e-d152-4997-84aa-94812cec46c1",
              "title": "Which Type? II",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1172687e-d152-4997-84aa-94812cec46c1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What type does this object have? `12.3` There is a coding environment further down this page that you can use for experimentation. Enter your code and run it with the \"Test Run\" button.",
                "answers": [
                  {
                    "id": "a1512676371616",
                    "text": "str",
                    "is_correct": false
                  },
                  {
                    "id": "a1512676421553",
                    "text": "float",
                    "is_correct": true
                  },
                  {
                    "id": "a1512676422101",
                    "text": "int",
                    "is_correct": false
                  },
                  {
                    "id": "a1512676422657",
                    "text": "bool",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474003,
              "key": "4b44fa2e-1cdd-44a8-b5d3-f81b4ba564df",
              "title": "Which Type? III",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4b44fa2e-1cdd-44a8-b5d3-f81b4ba564df",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What type does this object have? `len(\"my_string\")` There is a coding environment further down this page that you can use for experimentation. Enter your code and run it with the \"Test Run\" button.",
                "answers": [
                  {
                    "id": "a1512676566033",
                    "text": "str",
                    "is_correct": false
                  },
                  {
                    "id": "a1512676588230",
                    "text": "float",
                    "is_correct": false
                  },
                  {
                    "id": "a1512676588723",
                    "text": "int",
                    "is_correct": true
                  },
                  {
                    "id": "a1512676589198",
                    "text": "bool",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474004,
              "key": "eee47422-daa8-4a36-95c6-6f8dfa70da34",
              "title": "Which Type? IV",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eee47422-daa8-4a36-95c6-6f8dfa70da34",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What type does this object have? `\"hippo\" *12` There is a coding environment further down this page that you can use for experimentation. Enter your code and run it with the \"Test Run\" button.",
                "answers": [
                  {
                    "id": "a1512676669887",
                    "text": "str",
                    "is_correct": true
                  },
                  {
                    "id": "a1512676701253",
                    "text": "float",
                    "is_correct": false
                  },
                  {
                    "id": "a1512676701852",
                    "text": "int",
                    "is_correct": false
                  },
                  {
                    "id": "a1512676702353",
                    "text": "bool",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474005,
              "key": "d9e6d36e-8798-45cd-b716-aa24e478bbec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Type Playground\n\nUse this programming space with Test Run to experiment with types of objects. Don't forget to use `print` to see the output of your code.",
              "instructor_notes": ""
            },
            {
              "id": 474006,
              "key": "26b9fa18-24d7-4ac9-804c-30697036fe5e",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "26b9fa18-24d7-4ac9-804c-30697036fe5e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6070019306422272",
                "initial_code_files": [
                  {
                    "text": "",
                    "name": "play.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474008,
              "key": "50e5a4a7-5b6d-4b1a-8b7b-7478446d0ce9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Total Sales\n\nIn this quiz, you’ll need to change the types of the input and output data in order to get the result you want.\n\nCalculate and print the total sales for the week from the data provided. Print out a string of the form `\"This week's total sales: xxx\"`, where xxx will be the actual total of all the numbers. You’ll need to change the type of the input data in order to calculate that total.",
              "instructor_notes": ""
            },
            {
              "id": 474010,
              "key": "e74a87e8-a376-4c33-b7a1-5368042ff949",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e74a87e8-a376-4c33-b7a1-5368042ff949",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6632793166184448",
                "initial_code_files": [
                  {
                    "text": "mon_sales = \"121\"\ntues_sales = \"105\"\nwed_sales = \"110\"\nthurs_sales = \"98\"\nfri_sales = \"95\"\n\n#TODO: Print a string with this format: This week's total sales: xxx\n# You will probably need to write some lines of code before the print statement.",
                    "name": "sales.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 599200,
          "key": "d8da3fa7-d3c3-4061-9600-ee0c2ca97d27",
          "title": "Solution: Type and Type Conversion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d8da3fa7-d3c3-4061-9600-ee0c2ca97d27",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 599201,
              "key": "314a70e1-4da1-4d8c-817d-b627e3156089",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is one possible solution for the Total Sales quiz on the previous page:\n\n# Solution: Total Sales\n```python\nweekly_sales = int(mon_sales) + int(tues_sales) + int(wed_sales) + int(thurs_sales) + int(fri_sales)\nweekly_sales = str(weekly_sales)  #convert the type back!!\nprint(\"This week's total sales: \" + weekly_sales)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468909,
          "key": "e2ecaf07-5c9a-4ec9-be9e-e4faae40ac37",
          "title": "String Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e2ecaf07-5c9a-4ec9-be9e-e4faae40ac37",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 514172,
              "key": "e996f7a0-c0fc-48e6-932e-22af87c503d8",
              "title": "String Methods",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Bv7CAxVOONs",
                "china_cdn_id": "Bv7CAxVOONs.mp4"
              }
            },
            {
              "id": 469157,
              "key": "96f94cd6-8ee7-4021-8fbf-b30ee594f30e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# String Methods\n\nIn this video you were introduced to **methods**.  **Methods** are like some of the **functions** you have already seen:\n\n1. `len`(\"this\")\n2. `type`(12)\n3. `print`(\"Hello world\")\n\nThese three above are **functions** - notice they use parentheses, and accept one or more **arguments**. Functions will be studied in much more detail in a later lesson!\n\nA **method** in Python behaves similarly to a function. Methods actually are functions that are called using dot notation. For example, `lower()` is a string method that can be used like this, on a string called \"sample string\": `sample_string.lower()`. \n\nMethods are specific to the data type for a particular variable. So there are some built-in methods that are available for all strings, different methods that are available for all integers, etc.\n\nBelow is an image that shows some methods that are possible with any string. \n",
              "instructor_notes": ""
            },
            {
              "id": 530927,
              "key": "0f8956e4-5f32-4710-ae99-24b5afd01c06",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/February/5a72cb8c_screen-shot-2018-02-01-at-12.10.40-am/screen-shot-2018-02-01-at-12.10.40-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0f8956e4-5f32-4710-ae99-24b5afd01c06",
              "caption": "",
              "alt": "",
              "width": 1246,
              "height": 228,
              "instructor_notes": null
            },
            {
              "id": 530932,
              "key": "75791e5a-2c01-4c9b-9799-94ba686331d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Each of these methods accepts the string itself as the first argument of the method.  However, they also could receive additional arguments, that are passed inside the parentheses.  Let's look at the output for a few examples.\n\n```\n>>> my_string.islower()\nTrue\n>>> my_string.count('a')\n2\n>>> my_string.find('a')\n3\n```\n\nYou can see that the `count` and `find` methods both take another argument. However, the `.islower()` method does not accept another argument. \n\nNo professional has all the methods memorized, which is why understanding how to use documentation and find answers is so important.  Gaining a strong grasp of the foundations of programming will allow you to use those foundations to use documentation to build so much more than someone who tries to memorize all the built-in methods in Python.  ",
              "instructor_notes": ""
            },
            {
              "id": 629444,
              "key": "10cea52a-1ef5-4dba-8af9-21c514879fb3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### One important string method: `format()`\n\nWe will be using the `format()` string method a good bit in our future work in Python, and you will find it very valuable in your coding, especially with your `print` statements. \n\nWe can best illustrate how to use `format()` by looking at some examples:\n\n**Example 1**\n```python\nprint(\"Mohammed has {} balloons\".format(27))\n```\n**Example 1 Output**\n```txt\nMohammed has 27 balloons\n```\n**Example 2**\n```python\nanimal = \"dog\"\naction = \"bite\"\nprint(\"Does your {} {}?\".format(animal, action))\n```\n**Example 2 Output**\n```txt\nDoes your dog bite?\n```\n**Example 3**\n```python\nmaria_string = \"Maria loves {} and {}\"\nprint(maria_string.format(\"math\", \"statistics\"))\n```\n**Example 3 Output**\n```txt\nMaria loves math and statistics\n```\n\nNotice how in each example, the number of pairs of curly braces {} you use inside the string is the same as the number of replacements you want to make using the values inside `format()`.\n\nMore advanced students can learn more about the formal syntax for using the `format()` string method [here](https://docs.python.org/3.6/library/string.html#format-string-syntax).\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468910,
          "key": "4000d14c-bd24-4e8c-8cdc-1ae8ee0b9731",
          "title": "String Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4000d14c-bd24-4e8c-8cdc-1ae8ee0b9731",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474024,
              "key": "b614b694-ef9d-49de-b89d-ef7dd0a8dee4",
              "title": "Methods and Types",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b614b694-ef9d-49de-b89d-ef7dd0a8dee4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens when you call a string method like `islower()` on a float object? For example, `13.37.islower()`.\n\nThere is a playground workspace further down this page that you can use to experiment.",
                "answers": [
                  {
                    "id": "a1512678287946",
                    "text": "The float is returned unchanged",
                    "is_correct": false
                  },
                  {
                    "id": "a1512678314716",
                    "text": "`islower()` returns True",
                    "is_correct": false
                  },
                  {
                    "id": "a1512678315232",
                    "text": "`islower()` returns False",
                    "is_correct": false
                  },
                  {
                    "id": "a1512678315705",
                    "text": "An error occurs",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 474025,
              "key": "6f2bad5e-2903-49b6-82d5-61199d59730b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can learn more about strings and  string methods by looking at the [string method documentation](https://docs.python.org/3/library/stdtypes.html#string-methods).\n\nYou will find that the documentation is one of the most valuable resources for writing code, and not only when it comes to strings or writing code in Python! By reading and searching the documentation you can learn about data types and built-in functions as well as how to use them. \n\nGive it a try now! Look up a few string methods (using the link above) and try them out in the programming playground below (using the Test Run button).\n\n# String Method Playground",
              "instructor_notes": ""
            },
            {
              "id": 474026,
              "key": "c9cb72e6-0cd2-4cde-af64-792781714a40",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "c9cb72e6-0cd2-4cde-af64-792781714a40",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5030898651758592",
                "initial_code_files": [
                  {
                    "text": "# Browse the complete list of string methods at:\n# https://docs.python.org/3/library/stdtypes.html#string-methods\n# and try them out here",
                    "name": "string_playground.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 630517,
              "key": "8c848d3b-7872-4e64-b4f6-852546b7f295",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# `format()` Practice\n\nUse the coding space below to practice using the `format()` string method. There are no right or wrong answers here, just practice!",
              "instructor_notes": ""
            },
            {
              "id": 630515,
              "key": "15a9b892-7d47-494a-840b-d11fc8a8e1f8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "15a9b892-7d47-494a-840b-d11fc8a8e1f8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5843196070985728",
                "initial_code_files": [
                  {
                    "text": "# Write two lines of code below, each assigning a value to a variable\n\n\n# Now write a print statement using .format() to print out a sentence and the \n#   values of both of the variables\n",
                    "name": "format_practice.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 665305,
          "key": "5b8a4071-7f44-49ef-aeff-2a5790a9c44d",
          "title": "Another String Method - Split",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5b8a4071-7f44-49ef-aeff-2a5790a9c44d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 665306,
              "key": "93191529-d3cc-4314-8437-696dfc0e8495",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Another important string method: ```split()```\n\nA helpful string method when working with strings is the .split method. This function or method returns a data container called a **list** that contains the words from the input string.  We will be introducing you to the concept of lists in the next video. \n\nThe split method has two additional arguments (*sep* and *maxsplit*).  The *sep* argument stands for \"separator\". It can be used to identify how the string should be split up (e.g., whitespace characters like space, tab, return, newline; specific punctuation (e.g., comma, dashes)). If the *sep* argument is not provided, the default separator is whitespace.\n\nTrue to its name, the *maxsplit* argument provides the maximum number of splits. The argument gives maxsplit + 1 number of elements in the new list, with the remaining string being returned as the last element in the list. You can read more about these methods in the Python documentation too.\n\nHere are some examples for the ```.split()``` method. \n\n1. A basic split method: \n```Python\nnew_str = \"The cow jumped over the moon.\"\nnew_str.split()```\nOutput is:\n```Python\n['The', 'cow', 'jumped', 'over', 'the', 'moon.']```\n\n2. Here  the separator is space, and the maxsplit argument is set to 3.\n```Python\nnew_str.split(' ', 3) ```\nOutput is:\n```Python\n['The', 'cow', 'jumped', 'over the moon.']```\n\n3. Using '.' or period as a separator.\n```Python\nnew_str.split('.')```\nOutput is:\n```Python\n['The cow jumped over the moon', '']```\n\n4. Using no separators but having a maxsplit argument of 3.\n```Python\nnew_str.split(None, 3)```\nOutput is:\n```Python\n['The', 'cow', 'jumped', 'over the moon.']```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468912,
          "key": "15635d7c-ee7f-43c7-a91c-b35ad8066a6c",
          "title": "Lists and Membership Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "15635d7c-ee7f-43c7-a91c-b35ad8066a6c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 530933,
              "key": "17133d65-9126-46cc-af14-42fd0d131df5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### List and Membership Operators\n\nThere are three videos as a part of this page.  Be sure to check them out along with the additional helpful reminders!",
              "instructor_notes": ""
            },
            {
              "id": 694179,
              "key": "7264fecd-b63f-4003-a2c0-cd0db1bbcf4e",
              "title": "L2 09 Lists And Membership Operators V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rNV_E50wcWM",
                "china_cdn_id": "rNV_E50wcWM.mp4"
              }
            },
            {
              "id": 469159,
              "key": "b15187cd-b334-46fe-aa58-424b3537d4d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lists!\n\n__Data structures__ are containers that organize and group data types together in different ways. A __list__ is one of the most common and basic data structures in Python. \n\nYou saw here that you can create a list with square brackets.  Lists can contain any mix and match of the data types you have seen so far.\n\n\n```\nlist_of_random_things = [1, 3.4, 'a string', True]\n```\n\nThis is a list of 4 elements.  All ordered containers (like lists) are indexed in python using a starting index of 0.  Therefore, to pull the first value from the above list, we can write:\n\n```\n>>> list_of_random_things[0]\n1\n```\n\nIt might seem like you can pull the last element with the following code, but this actually won't work:\n\n```\n>>> list_of_random_things[len(list_of_random_things)] \n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-34-f88b03e5c60e> in <module>()\n----> 1 lst[len(lst)]\n\nIndexError: list index out of range\n```\n\nHowever, you can retrieve the last element by reducing the index by 1.  Therefore, you can do the following:\n\n```\n>>> list_of_random_things[len(list_of_random_things) - 1] \nTrue\n```\nAlternatively, you can index from the end of a list by using negative values, where -1 is the last element, -2 is the second to last element and so on.\n```\n>>> list_of_random_things[-1] \nTrue\n>>> list_of_random_things[-2] \na string\n\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 694180,
              "key": "10c406ac-81a0-49e9-a4e2-1c3656f89c7b",
              "title": "L2 08 Lists And Membership Operators V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "JAbZdZg5_x8",
                "china_cdn_id": "JAbZdZg5_x8.mp4"
              }
            },
            {
              "id": 514178,
              "key": "879491e8-90b2-4e79-9c8d-76ee4feaaa7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Slice and Dice with Lists\n\nYou saw that we can pull more than one value from a list at a time by using **slicing**.  When using slicing, it is important to remember that the `lower` index is `inclusive` and the `upper` index is `exclusive`.\n\nTherefore, this:\n\n```\n>>> list_of_random_things = [1, 3.4, 'a string', True]\n>>> list_of_random_things[1:2]\n[3.4]\n```\n\nwill only return **3.4** in a list.  Notice this is still different than just indexing a single element, because you get a list back with this indexing. The colon tells us to go from the starting value on the left of the colon up to, but not including, the element on the right.\n\nIf you know that you want to start at the beginning, of the list you can also leave out this value.\n\n```\n>>> list_of_random_things[:2]\n[1, 3.4]\n```\nor to return all of the elements to the end of the list, we can leave off a final element.\n\n```\n>>> list_of_random_things[1:]\n[3.4, 'a string', True]\n```\n\nThis type of indexing works exactly the same on strings, where the returned value will be a string.\n\n# Are you `in` OR `not in`?\n\nYou saw that we can also use `in` and `not in` to return a **bool** of whether an element exists within our list, or if one string is a substring of another.\n\n```python\n>>> 'this' in 'this is a string'\nTrue\n>>> 'in' in 'this is a string'\nTrue\n>>> 'isa' in 'this is a string'\nFalse\n>>> 5 not in [1, 2, 3, 4, 6]\nTrue\n>>> 5 in [1, 2, 3, 4, 6]\nFalse\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 694181,
              "key": "6ee62527-5718-419a-b2dd-484253992022",
              "title": "L2 07 Lists And Membership Operators II V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3Nj-b-ZzqH8",
                "china_cdn_id": "3Nj-b-ZzqH8.mp4"
              }
            },
            {
              "id": 469162,
              "key": "4204b33c-27c3-4887-ad7a-a6fbccce76af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Mutability and Order\n\n**Mutability** is about whether or not we can change an object once it has been created.  If an object (like a list or string) can be changed (like a list can), then it is called **mutable**.  However, if an object cannot be changed without creating a completely new object (like strings), then the object is considered **immutable**.\n\n```\n>>> my_lst = [1, 2, 3, 4, 5]\n>>> my_lst[0] = 'one'\n>>> print(my_lst)\n['one', 2, 3, 4, 5]\n```\n\nAs shown above, you are able to replace 1 with 'one' in the above list.  This is because lists are **mutable**.\n\nHowever,  the following does not work:\n\n```\n>>> greeting = \"Hello there\"\n>>> greeting[0] = 'M'\n```\n\nThis is because strings are **immutable**.  This means to change this string, you will need to create a completely new string.\n\nThere are two things to keep in mind for each of the data types you are using:\n\n1. Are they **mutable**?\n2. Are they **ordered**?\n\n** Order** is about whether the position of an element in the object can be used to access the element. ** Both strings and lists are ordered.** We can use the order to access parts of a list and string.\n\nHowever, you will see some data types in the next sections that will be unordered.  For each of the upcoming data structures you see, it is useful to understand how you index, are they mutable, and are they ordered.  Knowing this about the data structure is really useful!  \n\nAdditionally, you will see how these each have different methods, so why you would use one data structure vs. another is largely dependent on these properties, and what you can easily do with it!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468914,
          "key": "2aa94895-d620-4d00-9d91-43771844cdcf",
          "title": "Quiz: Lists and Membership Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2aa94895-d620-4d00-9d91-43771844cdcf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474028,
              "key": "9e95767f-e954-4960-bb43-a7380e3100f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: List Indexing\n\nUse list indexing to determine how many days are in a particular month based on the integer variable `month`, and store that value in the integer variable `num_days`. For example, if `month` is 8, `num_days` should be set to 31, since the eighth month, August, has 31 days.\n\nRemember to account for zero-based indexing!",
              "instructor_notes": ""
            },
            {
              "id": 474029,
              "key": "5fb219a3-c37d-4b1c-84b4-aa88a58a74e8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5fb219a3-c37d-4b1c-84b4-aa88a58a74e8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5332051021135872",
                "initial_code_files": [
                  {
                    "text": "month = 8\ndays_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n\n# use list indexing to determine the number of days in month\n\n\nprint(num_days)",
                    "name": "HowManyDays.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474030,
              "key": "782acf46-c6ee-434b-a892-2a10a3f243a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: Slicing Lists\n\nSelect the three most recent dates from this list using list slicing notation. Hint: negative indexes work in slices!",
              "instructor_notes": ""
            },
            {
              "id": 474032,
              "key": "0bcee82d-4675-41f4-ab01-7089b143cd9c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "0bcee82d-4675-41f4-ab01-7089b143cd9c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6670217070116864",
                "initial_code_files": [
                  {
                    "text": "eclipse_dates = ['June 21, 2001', 'December 4, 2002', 'November 23, 2003',\n                 'March 29, 2006', 'August 1, 2008', 'July 22, 2009',\n                 'July 11, 2010', 'November 13, 2012', 'March 20, 2015',\n                 'March 9, 2016']\n                 \n                 \n# TODO: Modify this line so it prints the last three elements of the list\nprint(eclipse_dates)",
                    "name": "slicing.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474035,
              "key": "8bb64e5e-9326-45eb-83f4-bee95af63d54",
              "title": "Mutability Matching Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8bb64e5e-9326-45eb-83f4-bee95af63d54",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Suppose we have the following two expressions, `sentence1` and `sentence2`:\n```python\nsentence1 = \"I wish to register a complaint.\"\nsentence2 = [\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]\n```\nMatch the Python code below with the value of the modified `sentence1` or `sentence2`. If the code results in an error, match it with “Error”."
                },
                "concepts_label": "Python code",
                "answers_label": "Value of `sentence1` or `sentence2`",
                "concepts": [
                  {
                    "text": "`sentence2[6]=\"!\"`",
                    "correct_answer": {
                      "id": "a1512679606414",
                      "text": "[\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \"!\"]"
                    }
                  },
                  {
                    "text": "`sentence2[0]= \"Our Majesty\"`",
                    "correct_answer": {
                      "id": "a1512679627455",
                      "text": "[\"Our Majesty\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]"
                    }
                  },
                  {
                    "text": "`sentence1[30]=\"!\"`",
                    "correct_answer": {
                      "id": "a1512679628537",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "`sentence2[0:2] = [\"We\", \"want\"]`",
                    "correct_answer": {
                      "id": "a1512679629607",
                      "text": "[\"We\", \"want\", \"to\", \"register\", \"a\", “complaint”, \".\"]"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1512679677178",
                    "text": "\"I wish to register a complaint!\""
                  },
                  {
                    "id": "a1512679629607",
                    "text": "[\"We\", \"want\", \"to\", \"register\", \"a\", “complaint”, \".\"]"
                  },
                  {
                    "id": "a1512679627455",
                    "text": "[\"Our Majesty\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]"
                  },
                  {
                    "id": "a1512679606414",
                    "text": "[\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \"!\"]"
                  },
                  {
                    "id": "a1512679628537",
                    "text": "Error"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 627067,
          "key": "5f422184-b47e-4716-9faa-4242527dffbf",
          "title": "Solution: List and Membership Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5f422184-b47e-4716-9faa-4242527dffbf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 627069,
              "key": "de121a89-9a65-4f2c-b85a-283ceafe3d02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quiz: List Indexing\n\nHere is a good code line to use for this task:\n```\nnum_days = days_in_month[month - 1]```\n\n\n### Quiz: Slicing Lists\nHere is a good code line to use for this task:\n```\nprint(eclipse_dates[-3:])```\n\n### Quiz Question 3\nHere are our explanations for the answers shown below:\n\n`sentence1` is a string, and is therefore an immutable object. That means that while you can refer to individual characters in `sentence1` (e.g., you can write things like `sentence1[5]`) you cannot assign value to them (you cannot write things like `sentence1[5] = 'a'`). Therefore the **third expression** (sentence1[30]=\"!\") will result in an error.\n\n`sentence2` is a list, and lists are mutable, meaning that you can change the value of individual items in `sentence2`:\n- In the **first expression** (sentence2[6]=\"!\") we changed the value of the last item in `sentence2` from \".\" to \"!\".\n- In the **second expression** (sentence2[0]= \"Our Majesty\") we changed the value of the first item in `sentence2` from \"I\" to \"Our Majesty\".\n- In the **last expression** (sentence2[0:2] = [\"We\", \"want\"]) we used slicing to simultaneously change the value of both the first and the second item in `sentence2` from \"I\" and \"wish\" to \"We\" and \"want\".",
              "instructor_notes": ""
            },
            {
              "id": 627070,
              "key": "9026faa4-d1cf-42f3-beea-b802f4218dd4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af5db11_screen-shot-2018-05-11-at-11.03.34-am/screen-shot-2018-05-11-at-11.03.34-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9026faa4-d1cf-42f3-beea-b802f4218dd4",
              "caption": "",
              "alt": "",
              "width": 1728,
              "height": 900,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 468917,
          "key": "b4777f6e-7e26-48da-9fc9-93191829b5ed",
          "title": "List Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b4777f6e-7e26-48da-9fc9-93191829b5ed",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 694188,
              "key": "00aedac9-98a9-4595-b7a8-39f2854ef5b9",
              "title": "L2 06 Lists Methods V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tz2Ja1Eaeqo",
                "china_cdn_id": "tz2Ja1Eaeqo.mp4"
              }
            },
            {
              "id": 663100,
              "key": "81dc1133-63bd-438c-90f7-022f12a466fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*** Correction: *** In the above video, at timestamp 0:42, the  code should read \n\n```print(\"scores: \" + str(scores))```<br>\n```print(\"grades: \" + str(grades))```",
              "instructor_notes": ""
            },
            {
              "id": 469163,
              "key": "aa279a2e-0eed-49a2-8868-9cb6747b41c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Useful Functions for Lists I\n\n1. `len()` returns how many elements are in a list.\n2. `max()` returns the greatest element of the list. How the greatest element is determined depends on what type objects are in the list.  The maximum element in a list of numbers is the largest number. The maximum elements in a list of strings is element that would occur last if the list were sorted alphabetically. This works because the the max function is defined in terms of the greater than comparison operator. The max function is undefined for lists that contain elements from different, incomparable types.\n3. `min()` returns the smallest element in a list. min is the opposite of max, which returns the largest element in a list.\n4. `sorted()` returns a copy of a list in order from smallest to largest, leaving the list unchanged.",
              "instructor_notes": ""
            },
            {
              "id": 694189,
              "key": "61095181-727c-4d00-abbb-a97fa076ff41",
              "title": "L2 05 Lists Methods V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WXkPm4rv6ng",
                "china_cdn_id": "WXkPm4rv6ng.mp4"
              }
            },
            {
              "id": 469164,
              "key": "23c6beff-5235-47b6-a747-b12a5cfe0926",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Useful Functions for Lists II\n\n### `join` method\nJoin is a string method that takes a list of strings as an argument, and returns a string consisting of the list elements joined by a separator string.\n```python\nnew_str = \"\\n\".join([\"fore\", \"aft\", \"starboard\", \"port\"])\nprint(new_str)\n```\nOutput:\n```txt\nfore\naft\nstarboard\nport\n```\nIn this example we use the string `\"\\n\"` as the separator so that there is a newline between each element.\nWe can also use other strings as separators with .join. Here we use a hyphen.\n```python\nname = \"-\".join([\"García\", \"O'Kelly\"])\nprint(name)\n```\nOutput:\n```txt\nGarcía-O'Kelly\n```\nIt is important to remember to separate each of the items in the list you are joining with a comma (,). Forgetting to do so will not trigger an error, but will also give you unexpected results.\n\n### `append` method\nA helpful method called `append` adds an element to the end of a list.\n```python\nletters = ['a', 'b', 'c', 'd']\nletters.append('z')\nprint(letters)\n```\nOutput:\n```txt\n['a', 'b', 'c', 'd', 'z']\n```",
              "instructor_notes": ""
            },
            {
              "id": 531164,
              "key": "856be0f7-3418-4b32-946a-993273d7450e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Try It Out!\nIn the beginning of the first video, you saw how the behaviour of variables containing mutable and immutable objects is very different and might even seem surprising at times! Experiment, use the print functions and double-check your work where you can, to make sure that your programs correctly keep track of their data. While you experiment with lists, try out some of the useful functions above.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468919,
          "key": "9c1c1885-9a78-4108-bbdc-2bfd283f1fb4",
          "title": "Quiz: List Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c1c1885-9a78-4108-bbdc-2bfd283f1fb4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474107,
              "key": "79dfbdec-78b8-43ee-93f0-a62f29cf2e3a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `len`, `max`, `min`, and Lists\n\n",
              "instructor_notes": ""
            },
            {
              "id": 531232,
              "key": "566e2d8a-79b7-461e-8048-d1942a9df825",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There is a Python environment for you to run test code at the bottom of this page related to any of the quizzes on this page!",
              "instructor_notes": ""
            },
            {
              "id": 474295,
              "key": "a290e384-5700-4f69-a4ea-4176ce3e2f01",
              "title": "len, max, and min",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a290e384-5700-4f69-a4ea-4176ce3e2f01",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be? (Treat the comma in the multiple choice answers as newlines.)\n\n```python\na = [1, 5, 8]\nb = [2, 6, 9, 10]\nc = [100, 200]\n\nprint(max([len(a), len(b), len(c)]))\nprint(min([len(a), len(b), len(c)]))\n```",
                "answers": [
                  {
                    "id": "a1512771406715",
                    "text": "200, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512771446108",
                    "text": "4, 2",
                    "is_correct": true
                  },
                  {
                    "id": "a1512771446870",
                    "text": "300, 14",
                    "is_correct": false
                  },
                  {
                    "id": "a1512771447383",
                    "text": "2, 3",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474108,
              "key": "d3befada-35cb-4517-885c-fa7e0ec04251",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `sorted`, `join`, and Lists\n\n",
              "instructor_notes": ""
            },
            {
              "id": 474312,
              "key": "0904a1d7-6e54-487c-a151-da22ad17bbd8",
              "title": "sorted and join",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0904a1d7-6e54-487c-a151-da22ad17bbd8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be? (Treat the comma in the multiple choice answers as newlines.)\n\n```python\nnames = [\"Carol\", \"Albert\", \"Ben\", \"Donna\"]\nprint(\" & \".join(sorted(names)))\n```",
                "answers": [
                  {
                    "id": "a1512772225346",
                    "text": "Albert, Ben, Carol, Donna",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772328231",
                    "text": "Carol & Albert & Ben & Donna",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772328827",
                    "text": " & Albert & Ben & Carol & Donna & ",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772329475",
                    "text": "Albert & Ben & Carol & Donna",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 474109,
              "key": "c96894d5-acc6-4d47-816a-d170f0dd095a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `append` and Lists\n",
              "instructor_notes": ""
            },
            {
              "id": 474314,
              "key": "dd01f54b-41e3-4706-a306-d51330a9c5e5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dd01f54b-41e3-4706-a306-d51330a9c5e5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be? (Treat the commas in the multiple choice answers as newlines.)\n\n```python\nnames = [\"Carol\", \"Albert\", \"Ben\", \"Donna\"]\nnames.append(\"Eugenia\")\nprint(sorted(names))\n```",
                "answers": [
                  {
                    "id": "a1512773974679",
                    "text": "Albert & Ben & Carol & Donna & Eugenia",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774029176",
                    "text": "[\"Carol\", \"Albert\", \"Ben\", \"Donna\"]",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774029663",
                    "text": "['Albert', 'Ben', 'Carol', 'Donna', 'Eugenia']",
                    "is_correct": true
                  },
                  {
                    "id": "a1512774030095",
                    "text": "[\"Eugenia\", \"Carol\", \"Albert\", \"Ben\", \"Donna\"]",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474289,
              "key": "b32c89cc-4ecd-4cf6-b921-a325fc610994",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## List Method Playground",
              "instructor_notes": ""
            },
            {
              "id": 474288,
              "key": "10671926-6940-424d-9209-b34d9b7d7ded",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "10671926-6940-424d-9209-b34d9b7d7ded",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5264629320777728",
                "initial_code_files": [
                  {
                    "text": "# Use this playground to experiment with list methods, using Test Run\n",
                    "name": "list_methods.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 468920,
          "key": "e043295e-2639-4d17-a8c0-c3824811ad13",
          "title": "Tuples",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e043295e-2639-4d17-a8c0-c3824811ad13",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 694192,
              "key": "dc1e4f84-61c6-4827-b043-52ab93c44c7a",
              "title": "L2 04 Tuples V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "33xN-AbTMoc",
                "china_cdn_id": "33xN-AbTMoc.mp4"
              }
            },
            {
              "id": 469165,
              "key": "5bf0ca9e-0e26-40d3-ab23-9dd2f728c248",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Tuples\n\nA tuple is another useful container. It's a data type for immutable ordered sequences of elements. They are often used to store related pieces of information. Consider this example involving latitude and longitude:\n```python\nlocation = (13.4125, 103.866667)\nprint(\"Latitude:\", location[0])\nprint(\"Longitude:\", location[1])\n```\nTuples are similar to lists in that they store an ordered collection of objects which can be accessed by their indices. Unlike lists, however, tuples are immutable - you can't add and remove items from tuples, or sort them in place.\n\nTuples can also be used to assign multiple variables in a compact way.\n```python\ndimensions = 52, 40, 100\nlength, width, height = dimensions\nprint(\"The dimensions are {} x {} x {}\".format(length, width, height))\n```\nThe parentheses are optional when defining tuples, and programmers frequently omit them if parentheses don't clarify the code. \n\nIn the second line, three variables are assigned from the content of the tuple dimensions. This is called __tuple unpacking__. You can use tuple unpacking to assign the information from a tuple into multiple variables without having to access them one by one and make multiple assignment statements.\n\nIf we won't need to use `dimensions` directly, we could shorten those two lines of code into a single line that assigns three variables in one go!\n```python\nlength, width, height = 52, 40, 100\nprint(\"The dimensions are {} x {} x {}\".format(length, width, height))\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468921,
          "key": "7e05f190-288e-476d-b114-5dab6eeabca0",
          "title": "Quiz: Tuples",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e05f190-288e-476d-b114-5dab6eeabca0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474318,
              "key": "a866f228-7644-4c08-9c79-33ee671c42f0",
              "title": "Tuples",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a866f228-7644-4c08-9c79-33ee671c42f0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the following qualities to their data structure."
                },
                "concepts_label": "Data Structure",
                "answers_label": "Quality",
                "concepts": [
                  {
                    "text": "Tuples - are they ordered or unordered?",
                    "correct_answer": {
                      "id": "a1512775162355",
                      "text": "ordered"
                    }
                  },
                  {
                    "text": "Tuples - are they mutable or immutable?",
                    "correct_answer": {
                      "id": "a1512775222470",
                      "text": "immutable"
                    }
                  },
                  {
                    "text": "Lists - are they ordered or unordered?",
                    "correct_answer": {
                      "id": "a1512775223223",
                      "text": "ordered"
                    }
                  },
                  {
                    "text": "Lists - are they mutable or immutable?",
                    "correct_answer": {
                      "id": "a1512775223803",
                      "text": "mutable"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1512775223803",
                    "text": "mutable"
                  },
                  {
                    "id": "a1512775222470",
                    "text": "immutable"
                  },
                  {
                    "id": "a1512775223223",
                    "text": "ordered"
                  },
                  {
                    "id": "a1512775162355",
                    "text": "ordered"
                  },
                  {
                    "id": "a1524772934907",
                    "text": "immutable"
                  },
                  {
                    "id": "a1524764005613",
                    "text": "unordered"
                  }
                ]
              }
            },
            {
              "id": 474315,
              "key": "844820f2-8706-4396-a686-1eddec8d20b8",
              "title": "Tuples",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "844820f2-8706-4396-a686-1eddec8d20b8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be? (Treat the comma in the multiple choice answers as newlines.)\n\n```python\ntuple_a = 1, 2\ntuple_b = (1, 2)\n\nprint(tuple_a == tuple_b)\nprint(tuple_a[1])\n```",
                "answers": [
                  {
                    "id": "a1512774728026",
                    "text": "True, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774788040",
                    "text": "False, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774788701",
                    "text": "True, 2",
                    "is_correct": true
                  },
                  {
                    "id": "a1512774789338",
                    "text": "False, 2",
                    "is_correct": false
                  },
                  {
                    "id": "a1512775648766",
                    "text": "Error",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474333,
              "key": "5b740f21-7c82-4114-861e-855f9ca12207",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Tuples Playground",
              "instructor_notes": ""
            },
            {
              "id": 474316,
              "key": "2cae0dd7-8614-404f-adf8-433a474beb08",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "2cae0dd7-8614-404f-adf8-433a474beb08",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4880871308525568",
                "initial_code_files": [
                  {
                    "text": "## You may test any code out here. Use Test Run to see your output",
                    "name": "tuples.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 468923,
          "key": "38fa80cd-03b6-4003-9f57-b4f055649f6a",
          "title": "Sets",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "38fa80cd-03b6-4003-9f57-b4f055649f6a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 694195,
              "key": "c62b65cf-3e46-4841-9c41-476ea5a6eec5",
              "title": "L2 03 Sets V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "eIHNFgTFfnA",
                "china_cdn_id": "eIHNFgTFfnA.mp4"
              }
            },
            {
              "id": 469167,
              "key": "edebc9cc-6015-4c60-8954-dad6a690347e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Sets\n\nA __set__ is a data type for mutable unordered collections of unique elements. One application of a set is to quickly remove duplicates from a list.\n```python\nnumbers = [1, 2, 6, 3, 1, 1, 6]\nunique_nums = set(numbers)\nprint(unique_nums)\n```\nThis would output:\n```txt\n{1, 2, 3, 6}\n```\nSets support the `in` operator the same as lists do. You can add elements to sets using the `add` method, and remove elements using the `pop` method, similar to lists. Although, when you pop an element from a set, a random element is removed. Remember that sets, unlike lists, are unordered so there is no \"last element\".\n\n```python\nfruit = {\"apple\", \"banana\", \"orange\", \"grapefruit\"}  # define a set\n\nprint(\"watermelon\" in fruit)  # check for element\n\nfruit.add(\"watermelon\")  # add an element\nprint(fruit)\n\nprint(fruit.pop())  # remove a random element\nprint(fruit)\n```\nThis outputs:\n```txt\nFalse\n{'grapefruit', 'orange', 'watermelon', 'banana', 'apple'}\ngrapefruit\n{'orange', 'watermelon', 'banana', 'apple'}\n```\nOther operations you can perform with sets include those of mathematical sets. Methods like union, intersection, and difference are easy to perform with sets, and are much faster than such operators with other containers.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468924,
          "key": "364dcf34-3ad9-4be2-a376-933dd5250805",
          "title": "Quiz: Sets",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "364dcf34-3ad9-4be2-a376-933dd5250805",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474111,
              "key": "4a713ce8-7155-40f2-8010-deeee69deed5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `list` to `set`\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 474328,
              "key": "6eb869da-e8c0-4a14-b6f0-b53d0c3742ba",
              "title": "Sets I",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6eb869da-e8c0-4a14-b6f0-b53d0c3742ba",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be?\n\n```python\na = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nb = set(a)\nprint(len(a) - len(b))\n```",
                "answers": [
                  {
                    "id": "a1512776345045",
                    "text": "10",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776458072",
                    "text": "6",
                    "is_correct": true
                  },
                  {
                    "id": "a1512776458627",
                    "text": "4",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776459144",
                    "text": "Error",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474330,
              "key": "678a1adc-6fcc-482a-a7f0-b98f3d3160f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `add` and `pop`",
              "instructor_notes": ""
            },
            {
              "id": 474329,
              "key": "2d35c8cf-6e83-4f11-87d6-f55938b1e9e0",
              "title": "Sets II",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2d35c8cf-6e83-4f11-87d6-f55938b1e9e0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Consider the following code:\n\n```python\na = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nb = set(a)\nb.add(5)\nb.pop()\n```\nAfter executing this code, will the number 5 be a part of the set `b`?",
                "answers": [
                  {
                    "id": "a1512776640767",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776657470",
                    "text": "No",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776657972",
                    "text": "Maybe",
                    "is_correct": true
                  },
                  {
                    "id": "a1512776658466",
                    "text": "No, an error is generated",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474332,
              "key": "8a385194-8ffe-43da-803c-97f97dce4221",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Set Playground",
              "instructor_notes": ""
            },
            {
              "id": 474327,
              "key": "57044c16-97de-444b-a72e-8ea65829e0f2",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "57044c16-97de-444b-a72e-8ea65829e0f2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5064046672478208",
                "initial_code_files": [
                  {
                    "text": "## You may test any code out here. Use Test Run to see your output",
                    "name": "set.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 468925,
          "key": "3c4e9f14-b09e-4224-ab71-da42753f4340",
          "title": "Dictionaries and Identity Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3c4e9f14-b09e-4224-ab71-da42753f4340",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 694198,
              "key": "34ddee2b-6629-42bb-9558-2f5a7322f40c",
              "title": "L2 02 Dictionaries And Identiy Operators V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QR8HTxCTWi0",
                "china_cdn_id": "QR8HTxCTWi0.mp4"
              }
            },
            {
              "id": 469170,
              "key": "1b139b38-e8cb-4c3e-9c48-e307777a2054",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Dictionaries and Identity Operators\n\n### Dictionaries\nA __dictionary__ is a mutable data type that stores mappings of unique keys to values. Here's a dictionary that stores elements and their atomic numbers.\n```python\nelements = {\"hydrogen\": 1, \"helium\": 2, \"carbon\": 6}\n```\nDictionaries can have keys of any immutable type, like integers or tuples, not just strings. It's not even necessary for every key to have the same type! We can look up values or insert new values in the dictionary using square brackets that enclose the key.\n```python\nprint(elements[\"helium\"])  # print the value mapped to \"helium\"\nelements[\"lithium\"] = 3  # insert \"lithium\" with a value of 3 into the dictionary\n```\nWe can check whether a value is in a dictionary the same way we check whether a value is in a list or set with the `in` keyword. Dicts have a related method that's also useful, `get`. get looks up values in a dictionary, but unlike square brackets, get returns None (or a default value of your choice) if the key isn't found.\n```python\nprint(\"carbon\" in elements)\nprint(elements.get(\"dilithium\"))\n```\nThis would output:\n```txt\nTrue\nNone\n```\nCarbon is in the dictionary, so True is printed. Dilithium isn’t in our dictionary so None is returned by `get` and then printed. If you expect lookups to sometimes fail, `get` might be a better tool than normal square bracket lookups because errors can crash your program.\n\n### Identity Operators\n|Keyword|Operator|\n|--|--|\n|`is`|evaluates if both sides have the same identity|\n|`is not`|evaluates if both sides have different identities|\n\nYou can check if a key returned None with the `is` operator. You can check for the opposite using `is not`.\n```python\nn = elements.get(\"dilithium\")\nprint(n is None)\nprint(n is not None)\n```\nThis would output:\n```txt\nTrue\nFalse\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468926,
          "key": "59aed96b-4ee7-4623-b520-3cd5e6ae82e7",
          "title": "Quiz: Dictionaries and Identity Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59aed96b-4ee7-4623-b520-3cd5e6ae82e7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474112,
              "key": "9a3cecb9-e5d2-4b45-b4b5-dfeeee29f3e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: Define a Dictionary\n\nDefine a dictionary named `population` that contains this data:\n\n|  **Keys** | **Values**  |\n|---|---|\n|  Shanghai | 17.8  |\n|  Istanbul | 13.3  |\n|  Karachi |  13.0 |\n|  Mumbai | 12.5  |",
              "instructor_notes": ""
            },
            {
              "id": 474113,
              "key": "19c8f2bc-efa4-4c3c-86c1-c07ef46e8c32",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "19c8f2bc-efa4-4c3c-86c1-c07ef46e8c32",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4639544478138368",
                "initial_code_files": [
                  {
                    "text": "# Define a Dictionary, population,\n# that provides information\n# on the world's largest cities.\n# The key is the name of a city\n# (a string), and the associated\n# value is its population in\n# millions of people.\n\n#   Key     |   Value\n# Shanghai  |   17.8\n# Istanbul  |   13.3\n# Karachi   |   13.0\n# Mumbai    |   12.5",
                    "name": "popdict.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474250,
              "key": "5a561aad-ea6a-487e-b121-3cb2c4aac33f",
              "title": "Immutable Keys",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5a561aad-ea6a-487e-b121-3cb2c4aac33f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these could be used as the key for a dictionary? (Choose all that apply.) \nHint: Dictionary keys must be immutable, that is, they must be of a type that is not modifiable.",
                "answers": [
                  {
                    "id": "a1512763384298",
                    "text": "`str`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763421020",
                    "text": "`list`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763421545",
                    "text": "`int`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763422063",
                    "text": "`float`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 474252,
              "key": "b5423fdb-5805-42d2-92c9-dc716352432d",
              "title": "Quiz: Looking Up What Isn't There",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b5423fdb-5805-42d2-92c9-dc716352432d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens if we look up a value that isn't in the dictionary? Create a test dictionary and use the square brackets to look up a value that you haven't defined. What happens?",
                "answers": [
                  {
                    "id": "a1512763525117",
                    "text": "The lookup returns `None`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763543169",
                    "text": "The key is added to the dictionary with a default value of None",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763543691",
                    "text": "A `KeyError` occurs",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763544153",
                    "text": "Python searches the Internet for an appropriate value",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474257,
              "key": "a0464643-a85a-4dd8-a029-9cb603353c8e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `get` with a Default Value\n\nDictionaries have a related method that's also useful, `get()`. `get()` looks up values in a dictionary, but unlike looking up values with square brackets, `get()` returns `None` (or a default value of your choice) if the key isn't found. If you expect lookups to sometimes fail, `get()` might be a better tool than normal square bracket lookups.\n\n```python\n>>> elements.get('dilithium')\nNone\n>>> elements['dilithium']\nKeyError: 'dilithium'\n>>> elements.get('kryptonite', 'There\\'s no such element!')\n\"There's no such element!\"\n```\nIn the last example we specified a default value (the string 'There's no such element!') to be returned instead of `None` when the key is not found.\n\n## Checking for Equality vs. Identity: `==` vs. `is`",
              "instructor_notes": ""
            },
            {
              "id": 474259,
              "key": "25d866a4-d465-42d1-a58d-5f888371d94f",
              "title": "Checking for Equality vs. Identity",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25d866a4-d465-42d1-a58d-5f888371d94f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will the output of the following code be? (Treat the commas in the multiple choice answers as newlines.)\n\n```python\na = [1, 2, 3]\nb = a\nc = [1, 2, 3]\n\nprint(a == b)\nprint(a is b)\nprint(a == c)\nprint(a is c)\n```\n\nThere is a playground workspace further down this page that you can use to try it out.",
                "answers": [
                  {
                    "id": "a1512764280834",
                    "text": "True, True, True, True",
                    "is_correct": false
                  },
                  {
                    "id": "a1512764503835",
                    "text": "True, False, True, False",
                    "is_correct": false
                  },
                  {
                    "id": "a1512764504391",
                    "text": "True, True, True, False",
                    "is_correct": true
                  },
                  {
                    "id": "a1512764504903",
                    "text": "True, True, False, False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474261,
              "key": "e6bc23fe-2bf6-4870-b1b7-7e3b9c1690f5",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e6bc23fe-2bf6-4870-b1b7-7e3b9c1690f5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4563386923352064",
                "initial_code_files": [
                  {
                    "text": "# Test the code here if you'd like\na = [1, 2, 3]\nb = a\nc = [1, 2, 3]",
                    "name": "equality_identity.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 474114,
          "key": "4814a6a9-cd30-48b2-be9b-47fe711cf295",
          "title": "Solution: Dictionaries and Identity Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4814a6a9-cd30-48b2-be9b-47fe711cf295",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474115,
              "key": "3fb4724a-2901-43e9-ba2b-ee8b2d9cc6a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Define a Dictionary\n\nWe can define the dictionary like this:\n```python\n>>> population = {'Shanghai': 17.8,\n              'Istanbul': 13.3,\n              'Karachi': 13.0,\n              'Mumbai': 12.5}\n```\nI chose to put each key-value pair on its own line to make this dictionary definition easier to read, but where and whether you use line breaks is simply a stylistic choice. This code works just as well:\n\n```python\n>>> population = {'Shanghai': 17.8, 'Istanbul': 13.3, 'Karachi': 13.0, 'Mumbai': 12.5}\n``` ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 568649,
          "key": "91b88086-928d-42fa-8741-236c6e892a40",
          "title": "Quiz: More With Dictionaries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "91b88086-928d-42fa-8741-236c6e892a40",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 568677,
              "key": "6de518d1-0789-4870-97c3-0baefa0a219c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Context\n\nUse the dictionary below to answer **ALL** of the questions regarding dictionaries.  Consider you have a dictionary named `animals` that looks like this:\n\n```\nanimals = {'dogs': [20, 10, 15, 8, 32, 15], 'cats': [3,4,2,8,2,4], 'rabbits': [2, 3, 3], 'fish': [0.3, 0.5, 0.8, 0.3, 1]}\n```\nLet's try a few ideas with this dictionary!  If you want to try any of the code yourself, you can test it in the environment at the bottom of the page.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 568697,
              "key": "f82e03b6-b281-4695-8abe-07449a0da53a",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f82e03b6-b281-4695-8abe-07449a0da53a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "### Question 1\n\nMatch each description to the value it describes."
                },
                "concepts_label": "Description",
                "answers_label": "Value",
                "concepts": [
                  {
                    "text": "The data type of the keys in the dictionary.",
                    "correct_answer": {
                      "id": "a1521497721942",
                      "text": "string"
                    }
                  },
                  {
                    "text": "The data type of the values in the dictionary.",
                    "correct_answer": {
                      "id": "a1521498261488",
                      "text": "list"
                    }
                  },
                  {
                    "text": "The result of `animals['dogs']`.",
                    "correct_answer": {
                      "id": "a1521498417556",
                      "text": "[20, 10, 15, 8, 32, 15]"
                    }
                  },
                  {
                    "text": "The result of `animals['dogs'][3]`.",
                    "correct_answer": {
                      "id": "a1521498469953",
                      "text": "8"
                    }
                  },
                  {
                    "text": "The result of `animals[3]`",
                    "correct_answer": {
                      "id": "a1521499097492",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "The result of `animals['fish']`",
                    "correct_answer": {
                      "id": "a1521499119725",
                      "text": "[0.3, 0.5, 0.8, 0.3, 1]"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1521498523190",
                    "text": "Error"
                  },
                  {
                    "id": "a1521498530787",
                    "text": "None"
                  },
                  {
                    "id": "a1521498469953",
                    "text": "8"
                  },
                  {
                    "id": "a1521498527078",
                    "text": "Error"
                  },
                  {
                    "id": "a1521499097492",
                    "text": "Error"
                  },
                  {
                    "id": "a1521498417556",
                    "text": "[20, 10, 15, 8, 32, 15]"
                  },
                  {
                    "id": "a1521497721942",
                    "text": "string"
                  },
                  {
                    "id": "a1521498261488",
                    "text": "list"
                  },
                  {
                    "id": "a1521499119725",
                    "text": "[0.3, 0.5, 0.8, 0.3, 1]"
                  },
                  {
                    "id": "a1521498534510",
                    "text": "15"
                  }
                ]
              }
            },
            {
              "id": 568711,
              "key": "66e0b416-4633-4bb7-a88d-c4ac85b52f95",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "66e0b416-4633-4bb7-a88d-c4ac85b52f95",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4744123211448320",
                "initial_code_files": [
                  {
                    "text": "animals = {'dogs': [20, 10, 15, 8, 32, 15], \n 'cats': [3,4,2,8,2,4], \n 'rabbits': [2, 3, 3], \n 'fish': [0.3, 0.5, 0.8, 0.3, 1]}",
                    "name": "dictionary_practice.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 468927,
          "key": "082fc35c-f44e-48e8-9d34-be49e591293f",
          "title": "Compound Data Structures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "082fc35c-f44e-48e8-9d34-be49e591293f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 694201,
              "key": "9cb5443a-84b5-437a-b5ab-40225dd3edac",
              "title": "L2 01 Compound Data Structures V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jmQ8IKvQgBU",
                "china_cdn_id": "jmQ8IKvQgBU.mp4"
              }
            },
            {
              "id": 469172,
              "key": "c6235cf4-eb52-44bf-a4c8-8380cfaac917",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Compound Data Structures\n\nWe can include containers in other containers to create compound data structures. For example, this dictionary maps keys to values that are also dictionaries!\n```python\nelements = {\"hydrogen\": {\"number\": 1,\n                         \"weight\": 1.00794,\n                         \"symbol\": \"H\"},\n              \"helium\": {\"number\": 2,\n                         \"weight\": 4.002602,\n                         \"symbol\": \"He\"}}\n```\nWe can access elements in this nested dictionary like this.\n```python\nhelium = elements[\"helium\"]  # get the helium dictionary\nhydrogen_weight = elements[\"hydrogen\"][\"weight\"]  # get hydrogen's weight\n```\n\nYou can also add a new key to the element dictionary.\n```\noxygen = {\"number\":8,\"weight\":15.999,\"symbol\":\"O\"}  # create a new oxygen dictionary \nelements[\"oxygen\"] = oxygen  # assign 'oxygen' as a key to the elements dictionary\nprint('elements = ', elements)\n```\n\nOutput is:\n```\nelements =  {\"hydrogen\": {\"number\": 1,\n                          \"weight\": 1.00794,\n                          \"symbol\": 'H'},\n               \"helium\": {\"number\": 2,\n                          \"weight\": 4.002602,\n                          \"symbol\": \"He\"}, \n               \"oxygen\": {\"number\": 8, \n                          \"weight\": 15.999, \n                          \"symbol\": \"O\"}}```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468928,
          "key": "788a3fa5-e1be-41ba-aab4-afad0a60b23b",
          "title": "Quiz: Compound Data Structures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "788a3fa5-e1be-41ba-aab4-afad0a60b23b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474262,
              "key": "3968e635-9ebb-4eab-91b4-07d588706966",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: Adding Values to Nested Dictionaries\n\nTry your hand at working with nested dictionaries. Add another entry, 'is_noble_gas,' to each dictionary in the `elements` dictionary. After inserting the new entries you should be able to perform these lookups:\n\n```python\n>>> print(elements['hydrogen']['is_noble_gas'])\nFalse\n>>> print(elements['helium']['is_noble_gas'])\nTrue\n```",
              "instructor_notes": ""
            },
            {
              "id": 474263,
              "key": "97273d22-5719-44a0-adf1-7dcbb9d58bd0",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "97273d22-5719-44a0-adf1-7dcbb9d58bd0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4571559172374528",
                "initial_code_files": [
                  {
                    "text": "elements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},\n            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}\n\n# todo: Add an 'is_noble_gas' entry to the hydrogen and helium dictionaries\n# hint: helium is a noble gas, hydrogen isn't",
                    "name": "elements.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474265,
              "key": "b9fd4890-7688-4b3d-b30a-269aa0d05e51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Collections\n\nWhen we have a group of data we can think about it as a collection (of data elements). In this lesson, we have seen many different data structures that Python provides for storing, accessing and manipulating collections of data. In particular, we have seen lists, sets, and dictionaries.\n\nIn the next few quizzes, you will have a chance to practice and review the properties of lists, sets, and dictionaries.",
              "instructor_notes": ""
            },
            {
              "id": 474267,
              "key": "4ca9a91b-70b7-45b6-8090-d4a49fcfa8c7",
              "title": "Comparing Collections, Lists",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4ca9a91b-70b7-45b6-8090-d4a49fcfa8c7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check the attributes of a collection for which using a Python list would be appropriate. ",
                "answers": [
                  {
                    "id": "a1512765683306",
                    "text": "The order in which you add items doesn't matter",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765694532",
                    "text": "Items are always indexed with numbers starting at 0",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765695030",
                    "text": "Sortable",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765695502",
                    "text": "Add items with `.append`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765696547",
                    "text": "Add items with `.add`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474269,
              "key": "a97f63aa-9635-4b14-a38f-e54fcde1ce9f",
              "title": "Comparing Collections, Sets",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a97f63aa-9635-4b14-a38f-e54fcde1ce9f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check the attributes of a collection for which using a Python set would be appropriate. ",
                "answers": [
                  {
                    "id": "a1512765753638",
                    "text": "Order in which items appear can be inconsistent",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765763859",
                    "text": "You can have the same entry multiple times",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765764321",
                    "text": "Mutable (you can change it)",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765764801",
                    "text": "Add items with `.add`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765765253",
                    "text": "Sortable",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474270,
              "key": "3e5a275f-37cb-4ed7-9caa-d7fccd472780",
              "title": "Comparing Collections, Dictionaries",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e5a275f-37cb-4ed7-9caa-d7fccd472780",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check the attributes of a collection for which using a Python dictionary would be appropriate.",
                "answers": [
                  {
                    "id": "a1512765827376",
                    "text": "Each item contains two parts",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765838813",
                    "text": "Add items with `.append`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765839334",
                    "text": "Order in which items appear can be inconsistent",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765839792",
                    "text": "Sortable",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765840495",
                    "text": "Can be nested",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 542696,
          "key": "39fce3b2-dd8f-40cd-accf-5eebda17592e",
          "title": "Solution: Compound Data Structions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "39fce3b2-dd8f-40cd-accf-5eebda17592e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 542697,
              "key": "64aaa8ea-1848-4cdb-bbb5-022ee28308c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Adding Values to Nested Dictionaries\nHere's my solution!\n```python\nelements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},\n            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}\n\nelements['hydrogen']['is_noble_gas'] = False\nelements['helium']['is_noble_gas'] = True\n```\n\nNotice the last two lines are the solution necessary to add the `is_noble_gas` key to each of the dictionaries, so the final result would be correct after running these two lines.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468930,
          "key": "f9b20ab0-042e-4e86-9287-03436866ba2c",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f9b20ab0-042e-4e86-9287-03436866ba2c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 514189,
              "key": "ade8f8b3-0af0-4253-83e6-7ff4fb1be6f7",
              "title": "Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LLEZadlXM8A",
                "china_cdn_id": "LLEZadlXM8A.mp4"
              }
            }
          ]
        },
        {
          "id": 543122,
          "key": "6aac0108-8a85-415e-a4f6-e097b7581fb6",
          "title": "Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6aac0108-8a85-415e-a4f6-e097b7581fb6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 543124,
              "key": "9b0aed6a-c354-4b07-b42a-8902052c7d80",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### [You will need to practice! Use this FREE site to practice the skills you see in this course.](https://www.hackerrank.com/domains/python)\n\nBelow is a review of the things you learned in this lesson. I know when I was getting started, I always wanted more practice. This course will move pretty fast from this point forward, so if you feel like you just want more practice problems on a topic, there are a number of free courses on the web. Two that you should definitely take advantage of (for the benefit of this program, but also for finding a job afterward) are [HackerRank](https://www.hackerrank.com/domains/python) and [Codewars](https://www.codewars.com/dashboard).  Within each of these, you should create a profile and work on mastering Python! I was obsessed with these websites for getting all the practice I needed when I first started programming. As you get better, you can advance to harder problems and sites with even greater challenges. Happy coding!\n\n\n### Lesson Summary\n\nYou learned a ton in this lesson - here are a few of the big ideas to make sure you take them with you!\n\n#### Data Structures\n\nThere are a number of built in python data structures that you will use all the time when programming.  You can find a table of them available below:\n\n| **Data Structure**  | **Ordered**   | **Mutable**  | **Constructor**  | **Example**   |\n|---|---|---|---|---|\n|  int | NA  | NA  | `int()`  | 5  |\n| float  | NA   | NA  | `float()`   | 6.5   |\n| string   | Yes  | No  | `' '` or `\" \"` or `str()`   | \"this is a string\"  |\n| bool  | NA  | NA | NA   | `True` or `False` |\n| list | Yes | Yes  | `[ ]` or `list()`  | [5, 'yes', 5.7]  |\n| tuple | Yes  | No  | `( )` or `tuple()`  | (5, 'yes', 5.7)   |\n| set  | No  | Yes  | `{ }` or `set()`  | {5, 'yes', 5.7}   |\n| dictionary   | No  | Keys: No | `{ }` or `dict()`   | {'Jun':75, 'Jul':89} |\n\n\n### Mathematical, Comparison, and Logical Operators\n\nYou also learned about mathematical operators, as shown in the table below and logical operators shown in the table below that!  Awesome job!\n\n#### Mathematical Operators",
              "instructor_notes": ""
            },
            {
              "id": 543126,
              "key": "b3b36b27-df57-498d-9693-c9b9c32c4a94",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/February/5a7fce74_screen-shot-2018-02-10-at-8.59.39-pm/screen-shot-2018-02-10-at-8.59.39-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b3b36b27-df57-498d-9693-c9b9c32c4a94",
              "caption": "",
              "alt": "",
              "width": 400,
              "height": 400,
              "instructor_notes": null
            },
            {
              "id": 543127,
              "key": "3da118ad-f90f-4db1-9beb-51b8a880e14b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Comparison and Logical Operators",
              "instructor_notes": ""
            },
            {
              "id": 543128,
              "key": "40355d0e-99b1-453a-8b6d-6ef7aee50fb9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/February/5a7fceb6_screen-shot-2018-02-10-at-9.00.30-pm/screen-shot-2018-02-10-at-9.00.30-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/40355d0e-99b1-453a-8b6d-6ef7aee50fb9",
              "caption": "",
              "alt": "",
              "width": 400,
              "height": 400,
              "instructor_notes": null
            },
            {
              "id": 543129,
              "key": "141f0138-0b15-4d54-a559-bbb451ca45b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Booleans, Comparison Operators, and Logical Operators\n\nThe bool data type holds one of the values `True` or `False`, which are often encoded as `1` or `0`, respectively.  \n\nThere are 6 comparison operators that are common to see in order to obtain a `bool` value:\n\n### Comparison Operators\n\n| **Symbol Use Case**  | **Bool**  | **Operation** |\n|---|---|---|\n| 5  <  3  |  False  | Less Than\n| 5 > 3  | True  | Greater Than\n|  3 <= 3 | True   |  Less Than or Equal To\n|  3 >= 5 | False   | Greater Than or Equal To\n|  3 == 5 | False   | Equal To\n|  3 != 5 | True  | Not Equal To\n\nAnd there are three logical operators you need to be familiar with:\n\n| **Logical Use**  | **Bool**  | **Operation** |\n|---|---|---|\n| 5  <  3 `and` 5 == 5  |  False  | `and` - Evaluates if all provided statements are True\n| 5  <  3 `or` 5 == 5  | True  | `or` - Evaluates if at least one of many statements is True\n| `not` 5  <  3  | True   |  `not` - Flips the Bool Value\n\n[Here](https://www.irishtimes.com/news/science/how-george-boole-s-zeroes-and-ones-changed-the-world-1.2014673) is more information on how George Boole changed the world!\n\nAt this point, you have learned a lot of skills to build on.  The next lessons move pretty quickly to help you understand a number of coding practices that you will see in a job, as well as help you get prepared for the project.  ",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}