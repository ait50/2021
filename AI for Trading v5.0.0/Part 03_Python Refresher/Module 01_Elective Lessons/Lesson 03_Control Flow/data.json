{
  "data": {
    "lesson": {
      "id": 476132,
      "key": "e91dc8c3-aed0-4c0c-9a43-438c36df7b0f",
      "title": "Control Flow",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Build logic into your code with control flow tools! Learn about conditional statements, repeating code with loops and useful built-in functions, and list comprehensions.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/e91dc8c3-aed0-4c0c-9a43-438c36df7b0f/476132/1518744969887/Control%20Flow%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/e91dc8c3-aed0-4c0c-9a43-438c36df7b0f/476132/1518744930879/Control%20Flow%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 476133,
          "key": "01fe69bf-0fa1-4afe-860a-d3932485c91c",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "01fe69bf-0fa1-4afe-860a-d3932485c91c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527708,
              "key": "a9982d3b-ef65-441e-a8d1-9491dbe07e3f",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "eUrvACMMJ5w",
                "china_cdn_id": "eUrvACMMJ5w.mp4"
              }
            },
            {
              "id": 506226,
              "key": "930d34bd-3d1a-4bee-b019-25457afbe3ef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Control Flow\nWelcome to this lesson on Control Flow! Control flow is the sequence in which your code is run. Here, we'll learn about several tools in Python we can use to affect our code's control flow:\n\n-  Conditional Statements\n- Boolean Expressions\n- For and While Loops\n- Break and Continue\n- Zip and Enumerate\n- List Comprehensions",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486360,
          "key": "c2a30770-e445-40c8-bce6-45bb55140544",
          "title": "Conditional Statements",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c2a30770-e445-40c8-bce6-45bb55140544",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527709,
              "key": "1382ce60-08e1-4480-b53c-aa8118cf3562",
              "title": "If Statements",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jWiIUMrwPqA",
                "china_cdn_id": "jWiIUMrwPqA.mp4"
              }
            },
            {
              "id": 506228,
              "key": "566c4532-5d99-49b0-b6c1-09fd75a29747",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# If Statement\nAn `if` statement is a conditional statement that runs or skips code based on whether a condition is true or false. Here's a simple example.\n```python\nif phone_balance < 5:\n    phone_balance += 10\n    bank_balance -= 10\n```\nLet's break this down.\n1. An `if` statement starts with the `if` keyword, followed by the condition to be checked, in this case `phone_balance < 5`, and then a colon. The condition is specified in a boolean expression that evaluates to either True or False.<br><br>\n2. After this line is an indented block of code to be executed if that condition is true. Here, the lines that increment `phone_balance` and decrement `bank_balance` only execute if it is true that `phone_balance` is less than 5. If not, the code in this `if` block is simply skipped.\n\n### Use Comparison Operators in Conditional Statements\nYou have learned about Python's comparison operators (e.g. `==` and `!=`) and how they are different from assignment operators (e.g. `=`). In conditional statements, you want to use comparison operators. For example, you'd want to use `if x == 5` rather than `if x = 5`. If your conditional statement is causing a syntax error or doing something unexpected, check whether you have written `==` or `=`! \n\n",
              "instructor_notes": ""
            },
            {
              "id": 527710,
              "key": "5a25307e-f33a-45b8-b48c-766cc700b122",
              "title": "If Elif and Else",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KZubH5XT0eU",
                "china_cdn_id": "KZubH5XT0eU.mp4"
              }
            },
            {
              "id": 506231,
              "key": "9bbd4704-9524-45dc-8f40-3b240ea1f94a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# If, Elif, Else\nIn addition to the `if` clause, there are two other optional clauses often used with an `if` statement. For example:\n```python\nif season == 'spring':\n    print('plant the garden!')\nelif season == 'summer':\n    print('water the garden!')\nelif season == 'fall':\n    print('harvest the garden!')\nelif season == 'winter':\n    print('stay indoors!')\nelse:\n    print('unrecognized season')\n```\n1. `if`: An `if` statement must always start with an `if` clause, which contains the first condition that is checked. If this evaluates to True, Python runs the code indented in this `if` block and then skips to the rest of the code after the `if` statement.<br><br>\n2. `elif`: `elif` is short for \"else if.\" An `elif` clause is used to check for an additional condition if the conditions in the previous clauses in the `if` statement evaluate to False. As you can see in the example, you can have multiple `elif` blocks to handle different situations.<br><br>\n3. `else`: Last is the `else` clause, which must come at the end of an `if` statement if used. This clause doesn't require a condition. The code in an `else` block is run if all conditions above that in the `if` statement evaluate to False.",
              "instructor_notes": ""
            },
            {
              "id": 527712,
              "key": "d0be8807-cabb-439c-889e-20d9ef93c633",
              "title": "Indentation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "G8qUNOTHtrM",
                "china_cdn_id": "G8qUNOTHtrM.mp4"
              }
            },
            {
              "id": 506234,
              "key": "30f13b45-8963-4e45-954f-25efafc560f4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Indentation\nSome other languages use braces to show where blocks of code begin and end. In Python we use indentation to enclose blocks of code. For example, `if` statements use indentation to tell Python what code is inside and outside of different clauses.\n\nIn Python, indents conventionally come in multiples of four spaces. Be strict about following this convention, because changing the indentation can completely change the meaning of the code. If you are working on a team of Python programmers, it's important that everyone follows the same indentation convention!\n\n#### Spaces or Tabs?\nThe [Python Style Guide](https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces) recommends using 4 spaces to indent, rather than using a tab. Whichever you use, be aware that \"Python 3 disallows mixing the use of tabs and spaces for indentation.\" \n\n______\n",
              "instructor_notes": ""
            },
            {
              "id": 521318,
              "key": "4481ae35-4ec5-492c-95ff-58e875d80c51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Try It Out!\nUse Test Run to execute the following code, which includes several examples of `if` statements. Experiment with different inputs and see what is printed out. Can you follow the flow of logic to figure out which code lines will get run? If you're not sure, you can insert additional `print` statements to help you figure out how it works.",
              "instructor_notes": ""
            },
            {
              "id": 521314,
              "key": "8901cb1a-77d7-4b68-bd29-e838859baefa",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "8901cb1a-77d7-4b68-bd29-e838859baefa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4894651157446656",
                "initial_code_files": [
                  {
                    "text": "#First Example - try changing the value of phone_balance\nphone_balance = 10\nbank_balance = 50\n\nif phone_balance < 10:\n    phone_balance += 10\n    bank_balance -= 10\n\nprint(phone_balance)\nprint(bank_balance)\n\n#Second Example - try changing the value of number\n\nnumber = 145\nif number % 2 == 0:\n    print(\"Number \" + str(number) + \" is even.\")\nelse:\n    print(\"Number \" + str(number) + \" is odd.\")\n\n#Third Example - try to change the value of age\nage = 35\n\n# Here are the age limits for bus fares\nfree_up_to_age = 4\nchild_up_to_age = 18\nsenior_from_age = 65\n\n# These lines determine the bus fare prices\nconcession_ticket = 1.25\nadult_ticket = 2.50\n\n# Here is the logic for bus fare prices\nif age <= free_up_to_age:\n    ticket_price = 0\nelif age <= child_up_to_age:\n    ticket_price = concession_ticket\nelif age >= senior_from_age:\n    ticket_price = concession_ticket\nelse:\n    ticket_price = adult_ticket\n\nmessage = \"Somebody who is {} years old will pay ${} to ride the bus.\".format(age, ticket_price)\nprint(message)",
                    "name": "conditional_statements_playground.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 486361,
          "key": "5a45f230-6087-4d0e-9e1a-3ddd4fc664e3",
          "title": "Practice: Conditional Statements",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5a45f230-6087-4d0e-9e1a-3ddd4fc664e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527947,
              "key": "7dea1655-af52-4f3b-bc39-d6a167a4876e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice: Which Prize\nWrite an `if` statement that lets a competitor know which of these prizes they won based on the number of points they scored, which is stored in the integer variable `points`.\n\n| __Points__ | __Prize__ |\n| --- | --- |\n| 1 - 50 | wooden rabbit|\n| 51 - 150 | no prize |\n| 151 - 180 | wafer-thin mint |\n| 181 - 200| penguin |\nAll of the lower and upper bounds here are inclusive, and `points` can only take on positive integer values up to 200. \n\nIn your `if` statement, assign the `result` variable to a string holding the appropriate message based on the value of `points`.  If they've won a prize, the message should state `\"Congratulations! You won a [prize name]!\"` with the prize name. If there's no prize, the message should state `\"Oh dear, no prize this time.\"`\n\n__Note:__ Feel free to test run your code with other inputs, but when you submit your answer, only use the original input of `points = 174`. You can hide your other inputs by commenting them out.",
              "instructor_notes": ""
            },
            {
              "id": 527946,
              "key": "e9939999-c2b6-410d-8e3a-edf247e66411",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e9939999-c2b6-410d-8e3a-edf247e66411",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6396300719947776",
                "initial_code_files": [
                  {
                    "text": "points = 174  # use this input to make your submission\n\n# write your if statement here\n\n\nprint(result)",
                    "name": "which_prize.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 513896,
          "key": "8be1fc4b-a32b-4d4d-a57b-b4c6b2e34cc1",
          "title": "Solution: Conditional Statements",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8be1fc4b-a32b-4d4d-a57b-b4c6b2e34cc1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 513897,
              "key": "3ec5fd99-c9b3-4711-9ece-eff96c951c80",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Which Prize\nHere's my solution for this quiz!\n```python\npoints = 174\n\nif points <= 50:\n    result = \"Congratulations! You won a wooden rabbit!\"\nelif points <= 150:\n    result = \"Oh dear, no prize this time.\"\nelif points <= 180:\n    result = \"Congratulations! You won a wafer-thin mint!\"\nelse:\n    result = \"Congratulations! You won a penguin!\"\n\nprint(result)\n```\n### Output:\n```txt\nCongratulations! You won a wafer-thin mint!\n```\nWe use `<=` instead of the `<` operator, since it was stated that the upper bound is inclusive. Notice that in each condition, we check if `points` is in a prize bracket by checking if `points` is less than or equal to the upper bound; we didn't have to check if it was greater than the lower bound. Let's see why this is the case.\n\n- When `points = 174`, it first checks if `points <= 50`, which evaluates to False. We don't have to check if it is also greater than 0, since it is stated in the problem that `points` will always be a positive integer up to 200. \n\n- Since the first condition evaluates to False,  it moves on to check the next condition, `points <= 150`. __We don't need to check if it is also greater than 50 here!__ We already know this is the case because the first condition has to have evaluated to False in order to get to this point. If we know `points <= 50` is False, then `points > 50` must be True!\n\n- Finally, we check if `points <= 180`, which evaluates to True. We now know that `points` is in the 151 - 180 bracket.\n\n- The last prize bracket, 181-200, is caught in the `else` clause, since there is no other possible value of the prize after checking the previous conditions.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 562442,
          "key": "44a22f87-f7ce-4a9a-a1f5-86024edb0f29",
          "title": "Quiz: Conditional Statements",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "44a22f87-f7ce-4a9a-a1f5-86024edb0f29",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 562488,
              "key": "e7a02696-78c3-4b47-9992-6858379daa05",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Guess My Number\n\nYou decide you want to play a game where you are hiding a number from someone.  Store this number in a variable called 'answer'.  Another user provides a number called 'guess'.  By comparing guess to answer, you inform the user if their guess is too high or too low.\n\nFill in the conditionals below to inform the user about how their guess compares to the answer.",
              "instructor_notes": ""
            },
            {
              "id": 562454,
              "key": "9f02a78f-cd62-4730-a27e-d2e18219148f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "9f02a78f-cd62-4730-a27e-d2e18219148f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4838947667181568",
                "initial_code_files": [
                  {
                    "text": "# '''\n# You decide you want to play a game where you are hiding \n# a number from someone.  Store this number in a variable \n# called 'answer'.  Another user provides a number called\n# 'guess'.  By comparing guess to answer, you inform the user\n# if their guess is too high or too low.\n\n# Fill in the conditionals below to inform the user about how\n# their guess compares to the answer.\n# '''\nanswer = #provide answer\nguess = #provide guess\n\nif #provide conditional\n    result = \"Oops!  Your guess was too low.\"\nelif #provide conditional\n    result = \"Oops!  Your guess was too high.\"\nelif #provide conditional\n    result = \"Nice!  Your guess matched the answer!\"\n\nprint(result)",
                    "name": "test_file.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 562486,
              "key": "63e7a62a-92bf-4985-a957-06efbef01bd0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Tax Purchase\n\n Depending on where an individual is from we need to tax them appropriately.  The states of CA, MN, and NY have taxes of 7.5%, 9.5%, and 8.9% respectively. Use this information to take the amount of a purchase and the corresponding state to assure that they are taxed by the right amount.",
              "instructor_notes": ""
            },
            {
              "id": 562479,
              "key": "5be5eae3-cbae-4055-ad9b-fdec5f2d87fd",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5be5eae3-cbae-4055-ad9b-fdec5f2d87fd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6315133966614528",
                "initial_code_files": [
                  {
                    "text": "# '''\n# Depending on where an individual is from we need to tax them \n# appropriately.  The states of CA, MN, and \n# NY have taxes of 7.5%, 9.5%, and 8.9% respectively.\n# Use this information to take the amount of a purchase and \n# the corresponding state to assure that they are taxed by the right\n# amount.\n# '''\nstate = #Either CA, MN, or NY\npurchase_amount = #amount of purchase\n\nif #provide conditional for checking state is CA\n    tax_amount = .075\n    total_cost = purchase_amount*(1+tax_amount)\n    result = \"Since you're from {}, your total cost is {}.\".format(state, total_cost)\n\nelif #provide conditional for checking state is MN\n    tax_amount = .095\n    total_cost = purchase_amount*(1+tax_amount)\n    result = \"Since you're from {}, your total cost is {}.\".format(state, total_cost)\n\nelif #provide conditional for checking state is NY\n    tax_amount = .089\n    total_cost = purchase_amount*(1+tax_amount)\n    result = \"Since you're from {}, your total cost is {}.\".format(state, total_cost)\n\nprint(result)",
                    "name": "test_file.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 562456,
          "key": "4649d5bb-4116-472c-81e1-77c1ed637c3d",
          "title": "Solution: Conditional Statements",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4649d5bb-4116-472c-81e1-77c1ed637c3d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 562457,
              "key": "0ef2c555-c6e9-46f6-aff2-13e59f3fd8b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Guess My Number\n\n```python\nanswer = 35\nguess = 30   # this is just a sample answer and guess\n\nif guess < answer:\n    result = \"Oops!  Your guess was too low.\"\nelif guess > answer:\n   result = \"Oops!  Your guess was too high.\"\nelif guess==answer:\n    result = \"Nice!  Your guess matched the answer!\"\nprint(result)\n```\n### Output\n```txt\nOops! Your guess was too low.\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 565301,
              "key": "1fe7294e-0266-49dc-81e6-d7ceacec7ee6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "______",
              "instructor_notes": ""
            },
            {
              "id": 562483,
              "key": "1a78909d-0d3f-40b0-acec-eeb8e10844db",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Tax Purchase\n\n```python\nstate = 'CA'\npurchase_amount = 20.00    # a sample state and purchase amount\n\nif state == 'CA':\n    tax_amount = .075\n    total_cost = purchase_amount*(1+tax_amount)\n    result = \"Since you're from {}, your total cost is {}.\".format(state, total_cost)\n\nelif state == 'MN':\n    tax_amount = .095\n    total_cost = purchase_amount*(1+tax_amount)\n    result = \"Since you're from {}, your total cost is {}.\".format(state, total_cost)\n\nelif state == 'NY':\n    tax_amount = .089\n    total_cost = purchase_amount*(1+tax_amount)\n    result = \"Since you're from {}, your total cost is {}.\".format(state, total_cost)\n\nprint(result)\n```\n### Output\n```txt\nSince you're from CA, your total cost is 21.5.\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486362,
          "key": "1f50b981-fa99-4737-adc8-fc01bf7a4b01",
          "title": "Boolean Expressions for Conditions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f50b981-fa99-4737-adc8-fc01bf7a4b01",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527714,
              "key": "e517a179-fd82-4b0a-95e8-d9b63977d129",
              "title": "Complex Boolean Expressions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gWmIKWgzFqI",
                "china_cdn_id": "gWmIKWgzFqI.mp4"
              }
            },
            {
              "id": 506238,
              "key": "3a6fe7a7-8ce8-4408-ba1b-3af99d037342",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Complex Boolean Expressions\n`If` statements sometimes use more complicated boolean expressions for their conditions. They may contain multiple comparisons operators, logical operators, and even calculations. Examples:\n```python\nif 18.5 <= weight / height**2 < 25:\n    print(\"BMI is considered 'normal'\")\n\nif is_raining and is_sunny:\n    print(\"Is there a rainbow?\")\n\nif (not unsubscribed) and (location == \"USA\" or location == \"CAN\"):\n    print(\"send email\")\n```\nFor really complicated conditions you might need to combine some `and`s, `or`s and `not`s together. Use parentheses if you need to make the combinations clear.\n\nHowever simple or complex, the condition in an `if` statement must be a boolean expression that evaluates to either True or False and it is this value that decides whether the indented block in an `if` statement executes or not.",
              "instructor_notes": ""
            },
            {
              "id": 527715,
              "key": "62d66ef5-885b-4fe7-8453-740d896108ed",
              "title": "Good And Bad Examples",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "95oLh3WtdhY",
                "china_cdn_id": "95oLh3WtdhY.mp4"
              }
            },
            {
              "id": 506240,
              "key": "deab233d-6355-4a1a-9327-43a721d9ab61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Good and Bad Examples\nHere are some things to keep in mind while writing boolean expressions for your `if` statements.\n\n### 1. Don't use `True` or `False` as conditions\n```python\n# Bad example\nif True:\n    print(\"This indented code will always get run.\")\n```\nWhile \"True\" is a valid boolean expression, it's not useful as a condition since it always evaluates to True, so the indented code will always get run. Similarly, `if False` is not a condition you should use either - the statement following this `if` statement would never be executed. \n```python\n# Another bad example\nif is_cold or not is_cold:\n    print(\"This indented code will always get run.\")\n```\nSimilarly, it's useless to use any condition that you know will always evaluate to True, like this example above. A boolean variable can only be True or False, so either `is_cold` or `not is_cold` is always True, and the indented code will always be run.\n\n### 2. Be careful writing expressions that use logical operators\nLogical operators `and`, `or` and `not` have specific meanings that aren't quite the same as their meanings in plain English. Make sure your boolean expressions are being evaluated the way you expect them to. \n```python\n# Bad example\nif weather == \"snow\" or \"rain\":\n    print(\"Wear boots!\")\n```\nThis code is valid in Python, but it is not a boolean expression, although it reads like one. The reason is that the expression to the right of the `or` operator, `\"rain\"`, is not a boolean expression - it's a string! Later we'll discuss what happens when you use non-boolean-type objects in place of booleans.\n\n### 3. Don't compare a boolean variable with `== True` or `== False`\nThis comparison isn’t necessary, since the boolean variable itself is a boolean expression.\n```python\n# Bad example\nif is_cold == True:\n    print(\"The weather is cold!\")\n```\nThis is a valid condition, but we can make the code more readable by using the variable itself as the condition instead, as below.\n```python\n# Good example\nif is_cold:\n    print(\"The weather is cold!\")\n```\nIf you want to check whether a boolean is False, you can use the `not` operator.",
              "instructor_notes": ""
            },
            {
              "id": 533880,
              "key": "81d50475-7990-4cdd-a721-3e9ccea4df0a",
              "title": "Truth Value Testing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "e52uw7ejV8k",
                "china_cdn_id": "e52uw7ejV8k.mp4"
              }
            },
            {
              "id": 506242,
              "key": "e729aa79-48ab-4231-b820-973efca3f182",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Truth Value Testing\nIf we use a non-boolean object as a condition in an `if` statement in place of the boolean expression, Python will check for its truth value and use that to decide whether or not to run the indented code. By default, the truth value of an object in Python is considered True unless specified as False in the documentation.\n\nHere are most of the built-in objects that are considered False in Python:\n- constants defined to be false: `None` and `False`\n- zero of any numeric type: `0`, `0.0`, `0j`, `Decimal(0)`, `Fraction(0, 1)`\n- empty sequences and collections: `'\"\"`, `()`, `[]`, `{}`, `set()`, `range(0)`\n\nExample:\n```python\nerrors = 3\nif errors:\n    print(\"You have {} errors to fix!\".format(errors))\nelse:\n    print(\"No errors to fix!\")\n```\nIn this code, `errors` has the truth value True because it's a non-zero number, so the error message is printed. This is a nice, succinct way of writing an `if` statement.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486364,
          "key": "69bfbde2-3f63-41ed-8793-aabf0f6a4bab",
          "title": "Quiz: Boolean Expressions for Conditions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "69bfbde2-3f63-41ed-8793-aabf0f6a4bab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 513898,
              "key": "9d12631e-4f3c-4f57-b52f-1ded1d36a355",
              "title": "Quiz: Evaluate composed boolean expressions",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9d12631e-4f3c-4f57-b52f-1ded1d36a355",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": " Imagine an air traffic control program that tracks three variables, `altitude`, `speed`, and `propulsion` which for a particular airplane have the values specified below.\n\n```python\naltitude = 10000\nspeed = 250\npropulsion = \"Propeller\"\n```\nFor each of the following boolean expressions, work out whether it evaluates to True or False and match the correct value.\n"
                },
                "concepts_label": "Expression",
                "answers_label": "`True` or `False`",
                "concepts": [
                  {
                    "text": "`altitude < 1000 and speed > 100`",
                    "correct_answer": {
                      "id": "a1516598636120",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "`(propulsion == \"Jet\" or propulsion == \"Turboprop\") and speed < 300 and altitude > 20000`",
                    "correct_answer": {
                      "id": "a1516598663031",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "`not (speed > 400 and propulsion == \"Propeller\")`",
                    "correct_answer": {
                      "id": "a1516598663753",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "`(altitude > 500 and speed > 100) or not propulsion == \"Propeller\"`",
                    "correct_answer": {
                      "id": "a1516598664464",
                      "text": "`True`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1516598663031",
                    "text": "`False`"
                  },
                  {
                    "id": "a1516598690856",
                    "text": "`False`"
                  },
                  {
                    "id": "a1516598636120",
                    "text": "`False`"
                  },
                  {
                    "id": "a1516598664464",
                    "text": "`True`"
                  },
                  {
                    "id": "a1516598663753",
                    "text": "`True`"
                  },
                  {
                    "id": "a1516598690171",
                    "text": "`False`"
                  },
                  {
                    "id": "a1516598692021",
                    "text": "`True`"
                  },
                  {
                    "id": "a1516598691506",
                    "text": "`True`"
                  }
                ]
              }
            },
            {
              "id": 513901,
              "key": "e3545482-ca8b-4fe1-bceb-880e73ebb19a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Using Truth Values of Objects\nThe code below is the solution to the _Which Prize_ quiz you've seen previously. You're going to rewrite this based on what you've learned about truth values.\n```python\npoints = 174\n\nif points <= 50:\n    result = \"Congratulations! You won a wooden rabbit!\"\nelif points <= 150:\n    result = \"Oh dear, no prize this time.\"\nelif points <= 180:\n    result = \"Congratulations! You won a wafer-thin mint!\"\nelse:\n    result = \"Congratulations! You won a penguin!\"\n\nprint(result)\n```\nYou will use a new variable `prize` to store a prize name if one was won, and then use the truth value of this variable to compose the `result` message. This will involve two `if` statements.\n\n__1st conditional statement:__ update `prize` to the correct prize name based on `points`.  \n__2nd conditional statement:__ set result to the correct phrase based on whether prize is evaluated as True or False.\n\n  - If `prize` is None, `result` should be set to  `\"Oh dear, no prize this time.\"`\n  - If `prize` contains a prize name, `result` should be set to `\"Congratulations! You won a {}!\".format(prize)`. This will avoid having the multiple result assignments for different prizes.\n\nAt the beginning of your code, set prize to None, as the default value.",
              "instructor_notes": ""
            },
            {
              "id": 513902,
              "key": "5d16b85b-c7b6-47ad-8b08-db99ade92c6d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5d16b85b-c7b6-47ad-8b08-db99ade92c6d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4904222961827840",
                "initial_code_files": [
                  {
                    "text": "points = 174  # use this as input for your submission\n\n# establish the default prize value to None\n\n\n# use the points value to assign prizes to the correct prize names\n\n\n# use the truth value of prize to assign result to the correct prize\n\n\nprint(result)",
                    "name": "which_prize2.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 513899,
          "key": "0dc5b22c-4b87-4ce4-b23f-b35b0d5fa996",
          "title": "Solution: Boolean Expressions for Conditions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0dc5b22c-4b87-4ce4-b23f-b35b0d5fa996",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 513900,
              "key": "9123482a-fc43-4446-90b9-6aba26287a3b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Evaluate composed boolean expressions\n```python\naltitude < 1000 and speed > 100\n```\n`altitude < 1000` is `False`, so we don't even need to check the second condition - the whole expression is `False`.\n\n```python\n(propulsion == \"Jet\" or propulsion == \"Turboprop\") and speed < 300 and altitude > 20000\n```\n`propulsion == \"Jet\"` is `False`, and `propulsion == \"Turboprop\"` is `False`, so the whole expression inside the parentheses is `False`. It is combined with the other expressions with `and`, so we don't even need to check these - the whole expression must be `False` because the first part is `False`.\n\n```python\nnot (speed > 400 and propulsion == \"Propeller\")\n```\nTo work this one out, we need to look at the inside of the parentheses first, then apply `not` to that. `speed > 400` is False, and because we are using `and` this makes the whole of the expression inside the parentheses `False`. Applying `not` reverses this, so this expression is `True`.\n\n```python\n(altitude > 500 and speed > 100) or not propulsion == \"Propeller\"\n```\nLet's start by looking inside the parentheses. `altitude > 500` is `True`, and `speed`  is greater than `100`, so the expression inside the parenthesis is `True`. Whatever the value of the other expression, because they are connected by `or`, the whole expression will evaluate to `True`.\n",
              "instructor_notes": ""
            },
            {
              "id": 513903,
              "key": "122c6e5e-2a49-4454-a028-6d3c0d275259",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Using Truth Values of Objects\n```python\npoints = 174\n\npoints = 174  # use this input when submitting your answer\n\n# set prize to default value of None\nprize = None\n\n# use the value of points to assign prize to the correct prize name\nif points <= 50:\n    prize = \"wooden rabbit\"\nelif 151 <= points <= 180:\n    prize = \"wafer-thin mint\"\nelif points >= 181:\n    prize = \"penguin\"\n\n# use the truth value of prize to assign result to the correct message\nif prize:\n    result = \"Congratulations! You won a {}!\".format(prize)\nelse:\n    result = \"Oh dear, no prize this time.\"\n\nprint(result)\n```\n### Output\n```txt\nCongratulations! You won a wafer-thin mint!\n```\nWe first set `prize` to `None` and then update it only if falls into a bracket that results in winning a prize. This is accomplished in the first `if` statement. We then use the truth value of `prize` to assign `result` to a message based on whether a prize was won.\n\nRemember when `prize = \"penguin\"`, or any other non-empty string, then the `if prize` condition is True!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486365,
          "key": "5c057e68-4556-4f47-885b-1c964003df27",
          "title": "For Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5c057e68-4556-4f47-885b-1c964003df27",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527719,
              "key": "cd52fe8f-1beb-4c8d-a363-046288b95012",
              "title": "For Loops",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UtX0PXSUCdY",
                "china_cdn_id": "UtX0PXSUCdY.mp4"
              }
            },
            {
              "id": 506244,
              "key": "870200a7-a722-42b0-a648-8ac74cccea24",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# For Loops\nPython has two kinds of loops - `for` loops and `while` loops. A `for` loop is used to \"iterate\", or do something repeatedly, over an **iterable**. \n\nAn __iterable__ is an object that can return one of its elements at a time. This can include sequence types, such as strings, lists, and tuples, as well as non-sequence types, such as dictionaries and files.\n\n### Example\nLet's break down the components of a `for` loop, using this example with the list `cities`:\n```python\ncities = ['new york city', 'mountain view', 'chicago', 'los angeles']\nfor city in cities:\n    print(city)\nprint(\"Done!\")\n```\n\n#### Components of a `for` Loop\n1. The first line of the loop starts with the `for` keyword, which signals that this is a `for` loop\n2. Following that is `city in cities`, indicating `city` is the iteration variable, and `cities` is the iterable being looped over. In the first iteration of the loop, `city` gets the value of the first element in `cities`, which is “new york city”.\n3. The `for` loop heading line always ends with a colon `:`\n4. Following the `for` loop heading is an indented block of code, the body of the loop, to be executed in each iteration of this loop. There is only one line in the body of this loop - `print(city)`.\n5. After the body of the loop has executed, we don't move on to the next line yet; we go back to the `for` heading line, where the iteration variable takes the value of the next element of the iterable. In the second iteration of the loop above, `city` takes the value of the next element in `cities`, which is \"mountain view\". \n6. This process repeats until the loop has iterated through all the elements of the iterable. Then, we move on to the line that follows the body of the loop - in this case, `print(\"Done!\")`. We can tell what the next line after the body of the loop is because it is unindented. Here is another reason why paying attention to your indentation is very important in Python!\n\nExecuting the code in the example above produces this output:\n```txt\nnew york city\nmountain view\nchicago\nlos angeles\nDone!\n```\n\nYou can name iteration variables however you like. A common pattern is to give the iteration variable and iterable the same names, except the singular and plural versions respectively (e.g., 'city' and 'cities').\n\n### Using the `range()` Function with `for` Loops\n`range()` is a built-in function used to create an iterable sequence of numbers. You will frequently use `range()` with a `for` loop to repeat an action a certain number of times. Any variable can be used to iterate through the numbers, but Python programmers conventionally use `i`, as in this example: \n\n```python\nfor i in range(3):\n    print(\"Hello!\")\n```\nOutput:\n```txt\nHello!\nHello!\nHello!\n```\n\n#### `range(start=0, stop, step=1)`\nThe `range()` function takes three integer arguments, the first and third of which are optional:\n- The 'start' argument is the first number of the sequence. If unspecified, 'start' defaults to 0.\n- The 'stop' argument is 1 more than the last number of the sequence. This argument must be specified.\n- The 'step' argument is the difference between each number in the sequence. If unspecified, 'step' defaults to 1.\n\nNotes on using `range()`:\n- If you specify one integer inside the parentheses with`range()`, it's used as the value for 'stop,' and the defaults are used for the other two.  \n__e.g. -__ `range(4)` returns `0, 1, 2, 3`\n- If you specify two integers inside the parentheses with`range()`, they're used for 'start' and 'stop,' and the default is used for 'step.'  \n__e.g. -__ `range(2, 6)` returns `2, 3, 4, 5`\n- Or you can specify all three integers for 'start', 'stop', and 'step.'  \n__e.g. -__ `range(1, 10, 2)` returns `1, 3, 5, 7, 9`\n\n### Creating and Modifying Lists\nIn addition to extracting information from lists, as we did in the first example above, you can also create and modify lists with `for` loops. You can **create** a list by appending to a new list at each iteration of the `for` loop like this:\n```python\n# Creating a new list\ncities = ['new york city', 'mountain view', 'chicago', 'los angeles']\ncapitalized_cities = []\n\nfor city in cities:\n    capitalized_cities.append(city.title())\n```\n**Modifying** a list is a bit more involved, and requires the use of the `range()` function. \n\nWe can use the `range()` function to generate the indices for each value in the `cities` list. This lets us access the elements of the list with `cities[index]` so that we can modify the values in the `cities` list in place.\n```python\ncities = ['new york city', 'mountain view', 'chicago', 'los angeles']\n\nfor index in range(len(cities)):\n    cities[index] = cities[index].title()\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 626494,
          "key": "69128dbd-66d0-42bc-902a-28739a45c349",
          "title": "Practice: For Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "69128dbd-66d0-42bc-902a-28739a45c349",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 626667,
              "key": "5a8576bc-1eba-4ffb-b5a2-17a1a70baf77",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice: Quick Brown Fox\n\nUse a `for loop` to take a list and print each element of the list in its own line. \n\n**Example:**\n```python\nsentence = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n```\n**Output:**\n```txt\nthe\nquick\nbrown\nfox\njumped\nover\nthe\nlazy\ndog\n```",
              "instructor_notes": ""
            },
            {
              "id": 626668,
              "key": "91777e89-ec04-4c26-917d-29590b741cd3",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "91777e89-ec04-4c26-917d-29590b741cd3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4894383336456192",
                "initial_code_files": [
                  {
                    "text": "sentence = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n\n# Write a for loop to print out each word in the sentence list, one word per line\n\n",
                    "name": "for_loop_practice.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 626761,
              "key": "115e8002-a9cf-4993-af0e-a173fec08840",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice: Multiples of 5\n\nWrite a `for` loop below that will print out every whole number that is a multiple of 5 and less than or equal to 30.\n\nThis should output:\n```txt\n5\n10\n15\n20\n25\n30\n```",
              "instructor_notes": ""
            },
            {
              "id": 627243,
              "key": "b219edc2-16bc-4b51-9485-25d8b829cac6",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "b219edc2-16bc-4b51-9485-25d8b829cac6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5468096209485824",
                "initial_code_files": [
                  {
                    "text": "# Write a for loop using range() to print out multiples of 5 up to 30 inclusive\n\n\n",
                    "name": "for_loop_range.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 627246,
          "key": "bf2fb79a-6486-444b-ab59-9ebb1d100fc0",
          "title": "Solution: For Loops Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bf2fb79a-6486-444b-ab59-9ebb1d100fc0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 627248,
              "key": "ae65a40c-bd82-47c4-a065-8abc6eca6754",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Quick Brown Fox\n\nHere is an efficient two lines of code, with the desired output. You could of course give your variable any name, it doesn't need to be `word`. But `word` makes sense here!\n```python\nsentence = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]\n\nfor word in sentence:\n    print(word)```\n\n### Output:\n```txt\nthe\nquick\nbrown\nfox\njumped\nover\nthe\nlazy\ndog\n```",
              "instructor_notes": ""
            },
            {
              "id": 627255,
              "key": "0d04ba57-8de5-4152-81a7-e50350c84665",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Multiples of 5\n\nHere is our solution for this one:\n```\nfor i in range(5, 35, 5):\n    print(i)```\n\n### Output:\n```txt\n5\n10\n15\n20\n25\n30\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486366,
          "key": "90abdb2f-ca75-4290-a5db-8942822f9d48",
          "title": "Quiz: For Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "90abdb2f-ca75-4290-a5db-8942822f9d48",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 528024,
              "key": "79b60a4d-fe49-4252-9848-3c922fd8687b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Create Usernames\nWrite a `for` loop that iterates over the `names` list to create a `usernames` list. To create a username for each name, make everything lowercase and replace spaces with underscores. Running your `for` loop over the list: \n\n`names = [\"Joey Tribbiani\", \"Monica Geller\", \"Chandler Bing\", \"Phoebe Buffay\"]` \n\nshould create the list: \n\n`usernames = [\"joey_tribbiani\", \"monica_geller\", \"chandler_bing\", \"phoebe_buffay\"]`\n\n__HINT:__ Use the [`.replace()`](https://docs.python.org/3/library/stdtypes.html#str.replace) method to replace the spaces with underscores. Check out how to use this method in this [Stack Overflow answer](https://stackoverflow.com/a/12723785).",
              "instructor_notes": ""
            },
            {
              "id": 528025,
              "key": "32841013-ac5a-48e5-9bb0-7a0ada7e6d00",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "32841013-ac5a-48e5-9bb0-7a0ada7e6d00",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4775915859607552",
                "initial_code_files": [
                  {
                    "text": "names = [\"Joey Tribbiani\", \"Monica Geller\", \"Chandler Bing\", \"Phoebe Buffay\"]\nusernames = []\n\n# write your for loop here\n\n\nprint(usernames)",
                    "name": "usernames.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 513908,
              "key": "89c89700-90fd-4c13-a127-8a2d603fafd9",
              "title": "Why `range`?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "89c89700-90fd-4c13-a127-8a2d603fafd9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Let's say instead of creating a new list, we want to modify the `names` list itself with the changes and write the following code. What would this do?\n\n```python\nnames = [\"Joey Tribbiani\", \"Monica Geller\", \"Chandler Bing\", \"Phoebe Buffay\"]\n\nfor name in names:\n    name = name.lower().replace(\" \", \"_\")\n\nprint(names)\n```",
                "answers": [
                  {
                    "id": "a1516599455045",
                    "text": "Modifies the `names` list so that each name is lowercase and separated by underscores",
                    "is_correct": false
                  },
                  {
                    "id": "a1516599470763",
                    "text": "Causes a runtime error",
                    "is_correct": false
                  },
                  {
                    "id": "a1516599471265",
                    "text": "The printed output for the `names` list will look exactly like it did in the first line",
                    "is_correct": true
                  },
                  {
                    "id": "a1516599471869",
                    "text": "Deletes the list",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 528064,
              "key": "7b148d40-872f-4a1e-b0a1-3a9255fbdc31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Modify Usernames with Range\nWrite a `for` loop that uses `range()` to iterate over the positions in `usernames` to modify the list. Like you did in the previous quiz, change each name to be lowercase and replace spaces with underscores. After running your loop, this list\n\n`usernames = [\"Joey Tribbiani\", \"Monica Geller\", \"Chandler Bing\", \"Phoebe Buffay\"]` \n\nshould change to this: \n\n`usernames = [\"joey_tribbiani\", \"monica_geller\", \"chandler_bing\", \"phoebe_buffay\"]`",
              "instructor_notes": ""
            },
            {
              "id": 528065,
              "key": "a6fa7c39-1ac0-4783-a66a-4e095df8c354",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a6fa7c39-1ac0-4783-a66a-4e095df8c354",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4933889588592640",
                "initial_code_files": [
                  {
                    "text": "usernames = [\"Joey Tribbiani\", \"Monica Geller\", \"Chandler Bing\", \"Phoebe Buffay\"]\n\n# write your for loop here\n\n\nprint(usernames)",
                    "name": "usernames_range.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 513906,
              "key": "621d8252-cc74-405f-b078-4a0263aad26d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Tag Counter\nWrite a `for` loop that iterates over a list of strings, `tokens`, and counts how many of them are [XML tags](https://en.wikipedia.org/wiki/XML). XML is a data language similar to HTML. You can tell if a string is an XML tag if it begins with a left angle bracket \"<\" and ends with a right angle bracket \">\". Keep track of the number of tags using the variable `count`.\n\nYou can assume that the list of strings will not contain empty strings.",
              "instructor_notes": ""
            },
            {
              "id": 528058,
              "key": "b34ef347-f30b-4440-a39b-642824b1116e",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "b34ef347-f30b-4440-a39b-642824b1116e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5001739871322112",
                "initial_code_files": [
                  {
                    "text": "tokens = ['<greeting>', 'Hello World!', '</greeting>']\ncount = 0\n\n# write your for loop here\n\n\nprint(count)",
                    "name": "xml_tag_counter.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 513909,
              "key": "0ef31bb9-0058-4565-94e5-438e018b80a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Create an HTML List\nWrite some code, including a `for` loop, that iterates over a list of strings and creates a single string, `html_str`, which is an HTML list. For example, if the list is `items = ['first string', 'second string']`, printing  `html_str` should output:\n```txt\n<ul>\n<li>first string</li>\n<li>second string</li>\n</ul>\n```\nThat is, the string's first line should be the opening tag `<ul>`. Following that is one line per element in the source list, surrounded by `<li>` and `</li>` tags. The final line of the string should be the closing tag `</ul> `.",
              "instructor_notes": ""
            },
            {
              "id": 513910,
              "key": "e946c005-cdb0-4b10-add2-f837181cb67e",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e946c005-cdb0-4b10-add2-f837181cb67e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4971793266376704",
                "initial_code_files": [
                  {
                    "text": "items = ['first string', 'second string']\nhtml_str = \"<ul>\\n\"  # \"\\ n\" is the character that marks the end of the line, it does\n                     # the characters that are after it in html_str are on the next line\n\n# write your code here\n\n\nprint(html_str)",
                    "name": "htmllist.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 513913,
          "key": "c9176070-5c31-445e-b6f6-56343c51a9e8",
          "title": "Solution: For Loops Quiz",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c9176070-5c31-445e-b6f6-56343c51a9e8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 528026,
              "key": "fb3e7c64-9506-47d2-9639-3ed8b9135b43",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Create Usernames\n```python\nnames = [\"Joey Tribbiani\", \"Monica Geller\", \"Chandler Bing\", \"Phoebe Buffay\"]\nusernames = []\n\nfor name in names:\n    usernames.append(name.lower().replace(\" \", \"_\"))\n\nprint(usernames)\n```\n### Output:\n```txt\n['joey_tribbiani', 'monica_geller', 'chandler_bing', 'phoebe_buffay']\n```",
              "instructor_notes": ""
            },
            {
              "id": 528067,
              "key": "f1b814fe-1f57-4634-904a-256483b9935d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Modify Usernames with Range\n```python\nusernames = [\"Joey Tribbiani\", \"Monica Geller\", \"Chandler Bing\", \"Phoebe Buffay\"]\n\nfor i in range(len(usernames)):\n    usernames[i] = usernames[i].lower().replace(\" \", \"_\")\n\nprint(usernames)\n```\n### Output:\n```txt\n['joey_tribbiani', 'monica_geller', 'chandler_bing', 'phoebe_buffay']\n```",
              "instructor_notes": ""
            },
            {
              "id": 528030,
              "key": "2bd09bff-6878-4f54-b928-7c7ab00d11a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Tag Counter\nYou can use string indexing to find out if each token begins and ends with angle brackets.\n```python\ntokens = ['<greeting>', 'Hello World!', '</greeting>']\n\ncount = 0\nfor token in tokens:\n    if token[0] == '<' and token[-1] == '>':\n        count += 1\n\nprint(count)\n```\n### Output:\n```txt\n2\n```",
              "instructor_notes": ""
            },
            {
              "id": 528033,
              "key": "5d6a314d-5b90-446b-b6d2-6135851e33b4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Create an HTML List\n```python\nitems = ['first string', 'second string']\nhtml_str = \"<ul>\\n\"          # The \"\\n\" here is the end-of-line char, causing\n                             # chars after this in html_str to be on next line\n\nfor item in items:\n    html_str += \"<li>{}</li>\\n\".format(item)\nhtml_str += \"</ul>\"\n\nprint(html_str)\n```\n### Output:\n```txt\n<ul>\n<li>first string</li>\n<li>second string</li>\n</ul>\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 562547,
          "key": "9fbe67b9-f91c-4429-bbda-dcff2bf6d864",
          "title": "Quiz: Match Inputs To Outputs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9fbe67b9-f91c-4429-bbda-dcff2bf6d864",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 562553,
              "key": "2089ad28-5d95-451b-a933-2bad4e002c08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Test Your Loop Knowledge\n\nIn case you want to test any code for the quizzes that follow, there is a code editor at the bottom of this page where you can experiment.",
              "instructor_notes": ""
            },
            {
              "id": 562548,
              "key": "872df7b6-b433-4b77-acc5-dce945200c55",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "872df7b6-b433-4b77-acc5-dce945200c55",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "### Practice with range\n\nFor each below, match the input code to the appropriate output."
                },
                "concepts_label": "Input",
                "answers_label": "Output",
                "concepts": [
                  {
                    "text": "print(list(range(4)))",
                    "correct_answer": {
                      "id": "a1521001336641",
                      "text": "[0,1,2,3]"
                    }
                  },
                  {
                    "text": "print(list(range(4,8)))",
                    "correct_answer": {
                      "id": "a1521001428352",
                      "text": "[4,5,6,7]"
                    }
                  },
                  {
                    "text": "print(list(range(4,10,2)))",
                    "correct_answer": {
                      "id": "a1521001506279",
                      "text": "[4,6,8]"
                    }
                  },
                  {
                    "text": "print(list(range(0,-5)))",
                    "correct_answer": {
                      "id": "a1521003018268",
                      "text": "[ ]"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1521001643748",
                    "text": "[4,6,8,10]"
                  },
                  {
                    "id": "a1521003060638",
                    "text": "Error"
                  },
                  {
                    "id": "a1521001428352",
                    "text": "[4,5,6,7]"
                  },
                  {
                    "id": "a1521001336641",
                    "text": "[0,1,2,3]"
                  },
                  {
                    "id": "a1521003018268",
                    "text": "[ ]"
                  },
                  {
                    "id": "a1521001689285",
                    "text": "[1,2,3,4]"
                  },
                  {
                    "id": "a1521001683245",
                    "text": "[0,1,2,3,4]"
                  },
                  {
                    "id": "a1521001695054",
                    "text": "[1,2,3]"
                  },
                  {
                    "id": "a1521001506279",
                    "text": "[4,6,8]"
                  },
                  {
                    "id": "a1521001701805",
                    "text": "[4,5,6,7,8]"
                  }
                ]
              }
            },
            {
              "id": 562551,
              "key": "08c2926b-0d4f-4cd1-b515-700167a107a4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Use the code below to complete the next quiz.\n\n```\ncolors = ['Red', 'Blue', 'Green', 'Purple']\nlower_colors = [ ]\n\nfor color in colors:\n    #finish this part\n```",
              "instructor_notes": ""
            },
            {
              "id": 562550,
              "key": "171645bf-faa8-4851-bbca-404467d9b5ab",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "171645bf-faa8-4851-bbca-404467d9b5ab",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you want to create a new list called `lower_colors`, where each color in `colors` is lower cased, which code line should be inserted into the code block above?",
                "answers": [
                  {
                    "id": "a1521001801452",
                    "text": "lower_colors[color.lower()]",
                    "is_correct": false
                  },
                  {
                    "id": "a1521001909623",
                    "text": "lower_colors.append(lower(color))",
                    "is_correct": false
                  },
                  {
                    "id": "a1521001912831",
                    "text": "lower_colors.add(color.lower())",
                    "is_correct": false
                  },
                  {
                    "id": "a1521001916164",
                    "text": "lower_colors.append(color.lower())",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 562552,
              "key": "4bcae962-be9e-4a6f-95b8-4155b74c4e49",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "4bcae962-be9e-4a6f-95b8-4155b74c4e49",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5367206834208768",
                "initial_code_files": [
                  {
                    "text": "# Use the space here to practice whatever you would like pertaining to\n# the above quizzes.",
                    "name": "test_file.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 670955,
          "key": "11bb51b2-75ff-4e82-8f8b-6a2c028899cf",
          "title": "Building Dictionaries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "11bb51b2-75ff-4e82-8f8b-6a2c028899cf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 670959,
              "key": "1f3909c4-a0b6-42f0-b17e-9abf2706d45a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Building Dictionaries\nBy now you are familiar with two important concepts: 1) counting with `for` loops and 2) the dictionary `get` method. These two can actually be combined to create a useful counter dictionary, something you will likely come across again. For example, we can create a dictionary, `word_counter`, that keeps track of the total count of each word in a string.\n\nThe following are a couple of ways to do it:\n### Method 1: Using a `for` loop to create a set of counters\n\nLet's start with a list containing the words in a series of book titles:\n```\nbook_title =  ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']\n```\n**Step 1: ** Create an empty dictionary.\n```\nword_counter = {}```\n**Step 2.** Iterate through each element in the list. If an element is already included in the dictionary, add 1 to its value. If not, add the element to the dictionary and set its value to 1.\n```\nfor word in book_title:\n    if word not in word_counter:\n        word_counter[word] = 1\n    else:\n        word_counter[word] += 1```\n\n#####  What's happening here?\n- The `for` loop iterates through each element in the list. For the first iteration, `word` takes the value 'great'.\n- Next, the if statement checks if `word` is in the `word_counter` dictionary.\n- Since it doesn't yet, the statement  `word_counter[word] = 1` adds *great* as a key to the dictionary with a value of 1.\n- Then, it leaves the if else statement and moves on to the next iteration of the for loop. `word` now takes the value *expectations* and repeats the process.\n- When the if condition is not met, it is because that`word` already exists in the `word_counter` dictionary, and the statement `word_counter[word] = word_counter[word] + 1` increases the count of that word by 1.\n- Once the `for` loop finishes iterating through the list, the `for` loop is complete. \n\nWe can see the output by printing out the dictionary. Printing `word_counter` results in the following output.\n```\n{'great': 2, 'expectations': 1, 'the': 2, 'adventures': 2, 'of': 2, 'sherlock': 1, 'holmes': 1, 'gasby': 1, 'hamlet': 1, 'huckleberry': 1, 'fin': 1}\n```\nFeel free to try this out yourself in the code editor at the bottom of this page.",
              "instructor_notes": ""
            },
            {
              "id": 689092,
              "key": "7e6ca92c-a737-43c5-8bdf-c6a32cf42f95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Method 2: Using the `get` method\n\nWe will use the same list for this example:\n```\nbook_title =  ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']```\n\n##### **Step 1: ** Create an empty dictionary.\n```\nword_counter = {}```\n\n##### **Step 2.** Iterate through each element, `get()` its value in the dictionary, and add 1.\nRecall that the dictionary `get` method is another way to retrieve the value of a key in a dictionary. Except unlike indexing, this will return a default value if the key is not found. If unspecified, this default value is set to None. We can use `get` with a default value of 0 to simplify the code from the first method above.\n```\nfor word in book_title:\n    word_counter[word] = word_counter.get(word, 0) + 1```\n\n#####  What's happening here?\n- The `for` loop iterates through the list as we saw earlier. The `for` loop feeds 'great' to the next statement in the body of the `for` loop.\n-   In this line: ` word_counter[word] = word_counter.get(word,0) + 1`, since the key *'great'* doesn't yet exist in the dictionary, `get()` will return the value 0 and `word_counter[word]` will be set to 1.\n- Once it encounters a word that already exists in `word_counter` (e.g. the second appearance of *'the'*),  the  value for that key is incremented by 1. On the second appearance of 'the', the key's value would add 1 again, resulting in 2.\n- Once the `for` loop finishes iterating through the list, the `for` loop is complete.\n\nPrinting `word_counter` shows us we get the same result as we did in method 1.\n```\n{'great': 2, 'expectations': 1, 'the': 2, 'adventures': 2, 'of': 2, 'sherlock': 1, 'holmes': 1, 'gasby': 1, 'hamlet': 1, 'huckleberry': 1, 'fin': 1}\n```\nAgain, feel free to try this out yourself in the code editor below.",
              "instructor_notes": ""
            },
            {
              "id": 689091,
              "key": "7ae260bc-9db3-4deb-826e-33725f710884",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "7ae260bc-9db3-4deb-826e-33725f710884",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5468280045830144",
                "initial_code_files": [
                  {
                    "text": "",
                    "name": "building_dictionaries.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 542300,
          "key": "f232c568-331c-42c3-8553-6d3c83b800ce",
          "title": "Iterating Through Dictionaries with For Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f232c568-331c-42c3-8553-6d3c83b800ce",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 542301,
              "key": "619882b0-e637-4556-8125-0a9fcc7af038",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Iterating Through Dictionaries with `For` Loops\nWhen you iterate through a dictionary using a `for` loop, doing it the normal way (`for n in some_dict`) will only give you access to the __keys__ in the dictionary - which is what you'd want in some situations. In other cases, you'd want to iterate through both the __keys__ and __values__ in the dictionary. Let's see how this is done in an example. Consider this dictionary that uses names of actors as keys and their characters as values.\n```python\ncast = {\n           \"Jerry Seinfeld\": \"Jerry Seinfeld\",\n           \"Julia Louis-Dreyfus\": \"Elaine Benes\",\n           \"Jason Alexander\": \"George Costanza\",\n           \"Michael Richards\": \"Cosmo Kramer\"\n       }\n```\nIterating through it in the usual way with a `for` loop would give you just the keys, as shown below:\n```python\nfor key in cast:\n    print(key)\n```\nThis outputs:\n```txt\nJerry Seinfeld\nJulia Louis-Dreyfus\nJason Alexander\nMichael Richards\n```\nIf you wish to iterate through both keys and values, you can use the built-in method `items` like this:\n```python\nfor key, value in cast.items():\n    print(\"Actor: {}    Role: {}\".format(key, value))\n```\nThis outputs:\n```txt\nActor: Jerry Seinfeld    Role: Jerry Seinfeld\nActor: Julia Louis-Dreyfus    Role: Elaine Benes\nActor: Jason Alexander    Role: George Costanza\nActor: Michael Richards    Role: Cosmo Kramer\n```\n`items` is an awesome method that returns tuples of key, value pairs, which you can use to iterate over dictionaries in `for` loops.",
              "instructor_notes": ""
            },
            {
              "id": 542323,
              "key": "b4ac91ec-bdef-4667-9a7b-f07b27866f8f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Try It Out!\nTest run and experiment with this example in the code editor below!",
              "instructor_notes": ""
            },
            {
              "id": 542328,
              "key": "95d24203-b9d8-451f-b82a-74cc2999e096",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "95d24203-b9d8-451f-b82a-74cc2999e096",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5281095415889920",
                "initial_code_files": [
                  {
                    "text": "cast = {\n           \"Jerry Seinfeld\": \"Jerry Seinfeld\",\n           \"Julia Louis-Dreyfus\": \"Elaine Benes\",\n           \"Jason Alexander\": \"George Costanza\",\n           \"Michael Richards\": \"Cosmo Kramer\"\n       }\n\nprint(\"Iterating through keys:\")\nfor key in cast:\n    print(key)\n\nprint(\"\\nIterating through keys and values:\")\nfor key, value in cast.items():\n    print(\"Actor: {}    Role: {}\".format(key, value))",
                    "name": "dict_items.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 562556,
          "key": "cdf7d89f-d9a4-4e3b-ac64-cfca225d37fb",
          "title": "Quiz: Iterating Through Dictionaries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cdf7d89f-d9a4-4e3b-ac64-cfca225d37fb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 565090,
              "key": "ede32041-9035-4520-81f1-bef0b64aeab2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Fruit Basket - Task 1\n\nYou would like to count the number of fruits in your basket.  In order to do this, you have the following dictionary and list of fruits.  Use the dictionary and list to count the total number of fruits, but you do not want to count the other items in your basket.\n",
              "instructor_notes": ""
            },
            {
              "id": 565159,
              "key": "3c9cb071-df87-459b-a7ca-82180f6567ca",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3c9cb071-df87-459b-a7ca-82180f6567ca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5178455168253952",
                "initial_code_files": [
                  {
                    "text": "# You would like to count the number of fruits in your basket. \n# In order to do this, you have the following dictionary and list of\n# fruits.  Use the dictionary and list to count the total number\n# of fruits, but you do not want to count the other items in your basket.\n\nresult = 0\nbasket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}\nfruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']\n\n#Iterate through the dictionary\n\n#if the key is in the list of fruits, add the value (number of fruits) to result\n\n\nprint(result)",
                    "name": "dictionary_stuff.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 565163,
              "key": "b667853e-72db-4b44-bdcd-02da04338727",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Fruit Basket - Task 2\n\nIf your solution is robust, you should be able to use it with any dictionary of items to count the number of fruits in the basket.  Try the loop for each of the dictionaries below to make sure it always works.",
              "instructor_notes": ""
            },
            {
              "id": 565180,
              "key": "952e9fbc-f78f-4286-8f07-6fc0b5b79619",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "952e9fbc-f78f-4286-8f07-6fc0b5b79619",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4755017832202240",
                "initial_code_files": [
                  {
                    "text": "#Example 1\n\nresult = 0\nbasket_items = {'pears': 5, 'grapes': 19, 'kites': 3, 'sandwiches': 8, 'bananas': 4}\nfruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']\n\n# Your previous solution here\n\nprint(result)\n\n#Example 2\n\nresult = 0\nbasket_items = {'peaches': 5, 'lettuce': 2, 'kites': 3, 'sandwiches': 8, 'pears': 4}\nfruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']\n\n# Your previous solution here\n\nprint(result)\n\n\n#Example 3\n\nresult = 0\nbasket_items = {'lettuce': 2, 'kites': 3, 'sandwiches': 8, 'pears': 4, 'bears': 10}\nfruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']\n\n# Your previous solution here\n\nprint(result)\n",
                    "name": "dictionary_stuff.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 565189,
              "key": "5ef9e71f-39c9-4981-a1ee-6f6e2ba7ffd1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Fruit Basket - Task 3\n\nSo, a couple of things about the above examples:\n\n1. It is a bit annoying having to copy and paste all the code to each spot - wouldn't it be nice to have a way to repeat the process without copying all the code?  Don't worry! You will learn how to do this in the next lesson!<br><br>\n\n2. It would be nice to keep track of both the number of fruits and other items in the basket.\n\nUse the environment below to try out this second part.  ",
              "instructor_notes": ""
            },
            {
              "id": 565192,
              "key": "c8a47a3c-242d-4b85-b25f-45114dafb26f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "c8a47a3c-242d-4b85-b25f-45114dafb26f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6734256068493312",
                "initial_code_files": [
                  {
                    "text": "# You would like to count the number of fruits in your basket. \n# In order to do this, you have the following dictionary and list of\n# fruits.  Use the dictionary and list to count the total number\n# of fruits and not_fruits.\n\nfruit_count, not_fruit_count = 0, 0\nbasket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}\nfruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']\n\n#Iterate through the dictionary\n\n#if the key is in the list of fruits, add to fruit_count.\n\n#if the key is not in the list, then add to the not_fruit_count\n\n\nprint(fruit_count, not_fruit_count)",
                    "name": "dictionary_stuff.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 565195,
          "key": "7c41c12b-f147-4fa4-b3d7-e617868a5784",
          "title": "Solution: Iterating Through Dictionaries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c41c12b-f147-4fa4-b3d7-e617868a5784",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 565198,
              "key": "7777e772-be40-4ae0-a1ca-69aa924c35c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Fruit Basket - Tasks 1 & 2\n\n```python\nresult = 0\nbasket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}\nfruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']\n\nfor object, count in basket_items.items():\n   if object in fruits:\n       result += count\n\nprint(\"There are {} fruits in the basket.\".format(result))\n```\n\n#### Output:\n\n```txt\nThere are 23 fruits in the basket.\n```\n\n# Solution: Fruit Basket - Task 3\n\n```python\nfruit_count, not_fruit_count = 0, 0\nbasket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}\nfruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']\n\n#Iterate through the dictionary\nfor object, count in basket_items.items():\n    if object in fruits:\n       fruit_count += count\n    else:\n        not_fruit_count += count\n\nprint(\"The number of fruits is {}.  There are {} objects that are not fruits.\".format(fruit_count, not_fruit_count))\n```\n\n#### Output:\n\n```txt\nThe number of fruits is 23.  There are 11 objects that are not fruits.\n```\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486367,
          "key": "dd92659f-e3d1-4997-b865-d61416a30f9c",
          "title": "While Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dd92659f-e3d1-4997-b865-d61416a30f9c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 549399,
              "key": "b4d99a8c-9212-497c-b2d6-994cdef96b18",
              "title": "L3 08 While Loops V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7Sf5tcPlKQw",
                "china_cdn_id": "7Sf5tcPlKQw.mp4"
              }
            },
            {
              "id": 506245,
              "key": "f06ec8de-f7bd-45d6-a203-9ca37a0a463c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# `While` Loops\n`For` loops are an example of \"definite iteration\" meaning that the loop's body is run a predefined number of times. This differs from \"indefinite iteration\" which is when a loop repeats an unknown number of times and ends when some condition is met, which is what happens in a `while` loop. Here's an example of a `while` loop.\n```python\ncard_deck = [4, 11, 8, 5, 13, 2, 8, 10]\nhand = []\n\n# adds the last element of the card_deck list to the hand list\n# until the values in hand add up to 17 or more\nwhile sum(hand)  < 17:\n    hand.append(card_deck.pop())\n```\nThis example features two new functions. `sum` returns the sum of the elements in a list, and `pop` is a list method that removes the last element from a list and returns it.\n\n### Components of a `While` Loop\n1. The first line starts with the `while` keyword, indicating this is a `while` loop.\n2. Following that is a condition to be checked. In this example, that's `sum(hand) <= 17`.\n3. The `while` loop heading always ends with a colon `:`.\n4. Indented after this heading is the body of the `while` loop. If the condition for the `while` loop is true, the code lines in the loop's body will be executed. \n5. We then go back to the `while` heading line, and the condition is evaluated again. This process of checking the condition and then executing the loop repeats until the condition becomes false. \n6. When the condition becomes false, we move on to the line following the body of the loop, which will be unindented.\n\nThe indented body of the loop should modify at least one variable in the test condition. If the value of the test condition never changes, the result is an infinite loop!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 619735,
          "key": "f9030dc6-d2f3-4076-bb80-a0ed9697ecad",
          "title": "Practice: While Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f9030dc6-d2f3-4076-bb80-a0ed9697ecad",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 628454,
              "key": "ef5a0eb4-662a-49bc-9f8a-40a26ad6a93f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you already have programming experience, feel free to skip any exercises that you don't feel are necessary for you.",
              "instructor_notes": ""
            },
            {
              "id": 627258,
              "key": "05637ee7-9ba6-437b-a7dc-e3abf339209a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice: Factorials with While Loops\n\nFind the factorial of a number using a `while` loop.\n\nA **factorial** of a whole number is that number multiplied by every whole number between itself and 1. For example, 6 factorial (written \"6!\") equals 6 x 5 x 4 x 3 x 2 x 1 = 720. So 6! = 720.\n\nWe can write a `while` loop to take any given number and figure out what its factorial is.\n\nExample: If `number ` is 6, your code should compute and print the `product`, 720.",
              "instructor_notes": ""
            },
            {
              "id": 627260,
              "key": "591d6cc4-3594-4969-b2c1-1ecbf7ebc661",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "591d6cc4-3594-4969-b2c1-1ecbf7ebc661",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5866177803452416",
                "initial_code_files": [
                  {
                    "text": "# number to find the factorial of\nnumber = 6   \n\n# start with our product equal to one\nproduct = 1\n\n# track the current number being multiplied\ncurrent = 1\n\n# write your while loop here\n\n    # multiply the product so far by the current number\n    \n    \n    # increment current with each iteration until it reaches number\n\n\n\n# print the factorial of number\nprint(product)",
                    "name": "factorial.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 627277,
              "key": "3d067025-6f3f-4947-bede-4b1ede3fab0a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice: Factorials with For Loops\n\nNow use a `for` loop to find the factorial!\n\nIt will now be great practice for you to try to revise the code you wrote above to find the factorial of a number, but this time, using a `for` loop. Try it in the code editor below!",
              "instructor_notes": ""
            },
            {
              "id": 627280,
              "key": "681a6072-6224-4118-8d40-b87a6260eb0c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "681a6072-6224-4118-8d40-b87a6260eb0c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5990335778521088",
                "initial_code_files": [
                  {
                    "text": "# number to find the factorial of\nnumber = 6   \n\n# start with our product equal to one\nproduct = 1\n\n# write your for loop here\n\n\n\n# print the factorial of number\nprint(product)",
                    "name": "factorial_for_loop.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 627262,
          "key": "5d8ca6dd-f2b1-43a2-af2c-4f04594a844f",
          "title": "Solution: While Loops Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5d8ca6dd-f2b1-43a2-af2c-4f04594a844f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 627263,
              "key": "31dca2c3-21d4-443c-9bce-168cd6d1ecf1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Factorials with While Loops\nHere is our solution for this one:\n```python\n\n# number to find the factorial of\nnumber = 6\n# start with our product equal to one\nproduct = 1\n# track the current number being multiplied\ncurrent = 1\n\nwhile  current <= number:\n    # multiply the product so far by the current number\n    product *= current\n    # increment current with each iteration until it reaches number\n    current += 1\n\n\n# print the factorial of number\nprint(product)\n```",
              "instructor_notes": ""
            },
            {
              "id": 627582,
              "key": "75e27f7d-b6da-4935-a77a-48962f87280e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Factorials with For Loops\nHere is our solution for this one, using a `for` loop to find the factorial of a number:\n\n```python\n\n# number we'll find the factorial of\nnumber = 6\n# start with our product equal to one\nproduct = 1\n\n# calculate factorial of number with a for loop\nfor num in range(2, number + 1):\n    product *= num\n\n# print the factorial of number\nprint(product)\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486368,
          "key": "6305f6e8-d28d-4120-856b-a6cb612f110e",
          "title": "Quiz: While Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6305f6e8-d28d-4120-856b-a6cb612f110e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 628599,
              "key": "a6aed5f9-dcfe-48dd-97ac-ea646402ca7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Count By\n\nSuppose you want to count from some number `start_num` by another number `count_by` until you hit a final number `end_num`. Use `break_num` as the variable that you'll change each time through the loop.  For simplicity, assume that `end_num` is always larger than `start_num` and `count_by` is always positive.  \n\nBefore the loop, what do you want to set `break_num` equal to? How do you want to change  `break_num` each time through the loop? What condition will you use to see when it's time to stop looping?\n\nAfter the loop is done, print out `break_num`, showing the value that indicated it was time to stop looping. It is the case that `break_num` should be a number that is the first number larger than `end_num`.",
              "instructor_notes": ""
            },
            {
              "id": 628600,
              "key": "2e758c07-7a26-4d32-b7a4-ca344630fabd",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "2e758c07-7a26-4d32-b7a4-ca344630fabd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6421064324874240",
                "initial_code_files": [
                  {
                    "text": "start_num = #provide some start number\nend_num = #provide some end number that you stop when you hit\ncount_by = #provide some number to count by \n\n# write a while loop that uses break_num as the ongoing number to \n#   check against end_num\n\n\nprint(break_num)",
                    "name": "while_example.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 628601,
              "key": "bb4c7199-b47e-4322-83a2-58754b80c239",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Count By Check\n\nSuppose you want to count from some number `start_num` by another number `count_by` until you hit a final number `end_num`, and calculate `break_num` the way you did in the last quiz.\n\nNow in addition, address what would happen if someone gives a `start_num` that is greater than `end_num`. If this is the case, set `result` to `\"Oops!  Looks like your start value is greater than the end value.  Please try again.\"` Otherwise, set `result` to the value of `break_num`.\n",
              "instructor_notes": ""
            },
            {
              "id": 628602,
              "key": "f220b6aa-c3c5-42c8-a5c4-41f80b213960",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "f220b6aa-c3c5-42c8-a5c4-41f80b213960",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6249119604146176",
                "initial_code_files": [
                  {
                    "text": "start_num = #provide some start number\nend_num = #provide some end number that you stop when you hit\ncount_by = #provide some number to count by \n\n# write a condition to check that end_num is larger than start_num before looping\n# write a while loop that uses break_num as the ongoing number to \n#   check against end_num\n\n\nprint(result)",
                    "name": "while_example.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 513916,
              "key": "83a1b8aa-a35b-4249-a3a0-d38c4f0d07ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Nearest Square\nWrite a `while` loop that finds the largest square number less than an integer`limit` and stores it in a variable `nearest_square`. A square number is the product of an integer multiplied by itself, for example 36 is a square number because it equals 6*6.\n\nFor example, if `limit` is 40, your code should set the `nearest_square` to 36.",
              "instructor_notes": ""
            },
            {
              "id": 513919,
              "key": "2883cc0e-4036-432f-bab0-57d6b95ce211",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "2883cc0e-4036-432f-bab0-57d6b95ce211",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5455964661219328",
                "initial_code_files": [
                  {
                    "text": "limit = 40\n\n# write your while loop here\n\n\nprint(nearest_square)",
                    "name": "nearestsquare.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 528103,
          "key": "ac07f48e-590a-4da0-995b-9b8eb6eceaef",
          "title": "Solution: While Loops Quiz",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ac07f48e-590a-4da0-995b-9b8eb6eceaef",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 628603,
              "key": "f0d7d7e2-da72-412c-8c6e-8802cf091c1e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Count By\n\n```python\nstart_num = 5\nend_num = 100\ncount_by = 2\n\nbreak_num = start_num\nwhile break_num < end_num:\n    break_num += count_by\n\nprint(break_num)\n```\n\n### Output:\n\n```txt\n101\n```\n\n### Another Example Output:\nIf we used the same code above, except with these starting values:\n\n```python\nstart_num = 300\nend_num = 548\ncount_by = 23\n```\n\nThis would output:\n```txt\n553\n```",
              "instructor_notes": ""
            },
            {
              "id": 628604,
              "key": "ab594a9d-78da-4d78-ad34-2a85af71e44c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Count By Check\n\n```python\nstart_num = 5\nend_num = 100\ncount_by = 2\n\nif start_num > end_num:\n    result = \"Oops! Looks like your start value is greater than the end value. Please try again.\"\n\nelse:\n    break_num = start_num\n    while break_num < end_num:\n        break_num += count_by\n\n    result = break_num\n\nprint(result)\n```\n\n### Output:\n\n```txt\n101\n```\n\n### Another Example Output:\nIf we used the same code above, except with these starting values:\n\n```python\nstart_num = 199\nend_num = 4\ncount_by = 10\n```\nThis would output:\n```txt\nOops!  Looks like your start value is greater than the end value.  Please try again.\n```",
              "instructor_notes": ""
            },
            {
              "id": 528104,
              "key": "c1c3d9b8-e20f-4d78-9731-b6244970349a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Nearest Square\n```python\nlimit = 40\n\nnum = 0\nwhile (num+1)**2 < limit:\n    num += 1\nnearest_square = num**2\n\nprint(nearest_square)\n```\n### Output:\n```txt\n36\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486369,
          "key": "27cafe73-8971-45d2-a950-48ed8e2c8d38",
          "title": "Break, Continue",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "27cafe73-8971-45d2-a950-48ed8e2c8d38",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 542299,
              "key": "8da36ecd-e5b3-4063-bec4-e3f9b98a05ca",
              "title": "Break and Continue",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F6qJAv9ts9Y",
                "china_cdn_id": "F6qJAv9ts9Y.mp4"
              }
            },
            {
              "id": 506246,
              "key": "a7f9a7a5-3756-454b-b5b4-9c1bdd1a2125",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Break, Continue\nSometimes we need more control over when a loop should end, or skip an iteration. In these cases, we use the `break` and `continue` keywords, which can be used in both `for` and `while` loops.\n\n- `break` terminates a loop\n- `continue` skips one iteration of a loop\n\nWatch the video and experiment with the examples below to see how these can be helpful.",
              "instructor_notes": ""
            },
            {
              "id": 528118,
              "key": "2ebb42cd-4b37-482b-9f18-cdb2f84da53e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Try It Out!\nBelow, you'll find two methods to solve the cargo loading program from the video. The first one is simply the one found in the video, which breaks from the loop when the weight reaches the limit. However, we found several problems with this. The second method addresses these issues by modifying the conditional statement and adding `continue`. Run the code below to see the results and feel free to experiment!",
              "instructor_notes": ""
            },
            {
              "id": 528116,
              "key": "5305da54-ce09-4b3c-923c-2f11b5bcd56a",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5305da54-ce09-4b3c-923c-2f11b5bcd56a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6454598726975488",
                "initial_code_files": [
                  {
                    "text": "manifest = [(\"bananas\", 15), (\"mattresses\", 24), (\"dog kennels\", 42), (\"machine\", 120), (\"cheeses\", 5)]\n\n# the code breaks the loop when weight exceeds or reaches the limit\nprint(\"METHOD 1\")\nweight = 0\nitems = []\nfor cargo_name, cargo_weight in manifest:\n    print(\"current weight: {}\".format(weight))\n    if weight >= 100:\n        print(\"  breaking loop now!\")\n        break\n    else:\n        print(\"  adding {} ({})\".format(cargo_name, cargo_weight))\n        items.append(cargo_name)\n        weight += cargo_weight\n\nprint(\"\\nFinal Weight: {}\".format(weight))\nprint(\"Final Items: {}\".format(items))\n\n# skips an iteration when adding an item would exceed the limit\n# breaks the loop if weight is exactly the value of the limit\nprint(\"\\nMETHOD 2\")\nweight = 0\nitems = []\nfor cargo_name, cargo_weight in manifest:\n    print(\"current weight: {}\".format(weight))\n    if weight >= 100:\n        print(\"  breaking from the loop now!\")\n        break\n    elif weight + cargo_weight > 100:\n        print(\"  skipping {} ({})\".format(cargo_name, cargo_weight))\n        continue\n    else:\n        print(\"  adding {} ({})\".format(cargo_name, cargo_weight))\n        items.append(cargo_name)\n        weight += cargo_weight\n\nprint(\"\\nFinal Weight: {}\".format(weight))\nprint(\"Final Items: {}\".format(items))",
                    "name": "manifest.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 486370,
          "key": "be60eb0d-24ff-4c74-b9bf-1246e1c05a50",
          "title": "Quiz: Break, Continue",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "be60eb0d-24ff-4c74-b9bf-1246e1c05a50",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 513921,
              "key": "108f66a1-19d2-435a-b63d-40b98f10c487",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Break the String\nWrite a loop with a `break` statement to create a string, `news_ticker`, that is exactly 140 characters long. You should create the news ticker by adding headlines from the `headlines` list, inserting a space in between each headline. If necessary, truncate the last headline in the middle so that `news_ticker` is exactly 140 characters long.\n\nRemember that `break` works in both `for` and `while` loops. Use whichever loop seems most appropriate. Consider adding `print` statements to your code to help you resolve bugs.\n",
              "instructor_notes": ""
            },
            {
              "id": 513922,
              "key": "fe463d21-af09-4b38-8a45-53aadd33c274",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "fe463d21-af09-4b38-8a45-53aadd33c274",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5484009086386176",
                "initial_code_files": [
                  {
                    "text": "# HINT: modify the headlines list to verify your loop works with different inputs\nheadlines = [\"Local Bear Eaten by Man\",\n             \"Legislature Announces New Laws\",\n             \"Peasant Discovers Violence Inherent in System\",\n             \"Cat Rescues Fireman Stuck in Tree\",\n             \"Brave Knight Runs Away\",\n             \"Papperbok Review: Totally Triffic\"]\n\nnews_ticker = \"\"\n# write your loop here\n\n\nprint(news_ticker)",
                    "name": "ticker.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 528107,
          "key": "a2540c7c-4412-4099-944d-575deb4a88b8",
          "title": "Solution: Break, Continue",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a2540c7c-4412-4099-944d-575deb4a88b8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 528108,
              "key": "395de9dd-f530-4f12-bec2-8fcaee8d9818",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Break the String\nHere's one way you could do this.\n```python\nheadlines = [\"Local Bear Eaten by Man\",\n             \"Legislature Announces New Laws\",\n             \"Peasant Discovers Violence Inherent in System\",\n             \"Cat Rescues Fireman Stuck in Tree\",\n             \"Brave Knight Runs Away\",\n             \"Papperbok Review: Totally Triffic\"]\n\nnews_ticker = \"\"\nfor headline in headlines:\n    news_ticker += headline + \" \"\n    if len(news_ticker) >= 140:\n        news_ticker = news_ticker[:140]\n        break\n\nprint(news_ticker)\n```\n### Output:\n```txt\nLocal Bear Eaten by Man Legislature Announces New Laws Peasant Discovers Violence Inherent in System Cat Rescues Fireman Stuck in Tree Brave\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486371,
          "key": "a95d285d-fd94-4a29-ad95-68bf3d13b253",
          "title": "Zip and Enumerate",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a95d285d-fd94-4a29-ad95-68bf3d13b253",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 534679,
              "key": "fed3a45a-810d-4fdb-9d51-07221379bf1c",
              "title": "Zip and Enumerate",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bSJPzVArE7M",
                "china_cdn_id": "bSJPzVArE7M.mp4"
              }
            },
            {
              "id": 665243,
              "key": "ae58dee6-efe2-4ea2-a6bc-1b9c6abc4ddf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the video above, at the 0:55 mark, the instructor says \"... you can separate it into an items and weights list, like this,\" but she should instead say, \"... you can separate it into an items *tuple* and a weights *tuple*, like this.\"",
              "instructor_notes": ""
            },
            {
              "id": 506247,
              "key": "835b776f-d5a7-4b6c-aee7-04239612ea06",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Zip and Enumerate\n`zip` and `enumerate` are useful built-in functions that can come in handy when dealing with loops.\n\n### Zip\n`zip` returns an iterator that combines multiple iterables into one sequence of tuples. Each tuple contains the elements in that position from all the iterables. For example, printing \n\n`list(zip(['a', 'b', 'c'], [1, 2, 3]))` would output `[('a', 1), ('b', 2), ('c', 3)]`.\n\nLike we did for `range()` we need to convert it to a list or iterate through it with a loop to see the elements.\n\nYou could unpack each tuple in a `for` loop like this.\n```python\nletters = ['a', 'b', 'c']\nnums = [1, 2, 3]\n\nfor letter, num in zip(letters, nums):\n    print(\"{}: {}\".format(letter, num))\n```\nIn addition to zipping two lists together, you can also unzip a list into tuples using an asterisk.\n```python\nsome_list = [('a', 1), ('b', 2), ('c', 3)]\nletters, nums = zip(*some_list)\n```\nThis would create the same `letters` and `nums` tuples we saw earlier.\n\n### Enumerate\n`enumerate` is a built in function that returns an iterator of tuples containing indices and values of a list. You'll often use this when you want the index along with each element of an iterable in a loop.\n```python\nletters = ['a', 'b', 'c', 'd', 'e']\nfor i, letter in enumerate(letters):\n    print(i, letter)\n```\nThis code would output:\n```txt\n0 a\n1 b\n2 c\n3 d\n4 e\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486372,
          "key": "f04a1bda-b2cd-420c-a25d-6e719a268c32",
          "title": "Quiz: Zip and Enumerate",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f04a1bda-b2cd-420c-a25d-6e719a268c32",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527549,
              "key": "ea2d4b1e-f141-4e5c-8454-a2498ca68fe3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Zip Coordinates\nUse `zip` to write a `for` loop that creates a string specifying the label and coordinates of each point and appends it to the list `points`. Each string should be formatted as `label: x, y, z`. For example, the string for the first coordinate should be `F: 23, 677, 4`.",
              "instructor_notes": ""
            },
            {
              "id": 527542,
              "key": "fbc89d2d-2d07-4a81-b9f9-0e3c49b060a9",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "fbc89d2d-2d07-4a81-b9f9-0e3c49b060a9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5674381947305984",
                "initial_code_files": [
                  {
                    "text": "x_coord = [23, 53, 2, -12, 95, 103, 14, -5]\ny_coord = [677, 233, 405, 433, 905, 376, 432, 445]\nz_coord = [4, 16, -6, -42, 3, -6, 23, -1]\nlabels = [\"F\", \"J\", \"A\", \"Q\", \"Y\", \"B\", \"W\", \"X\"]\n\npoints = []\n# write your for loop here\n\n\nfor point in points:\n    print(point)",
                    "name": "zip_coordinates.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 527797,
              "key": "717931f3-4c44-4a18-9ce9-436b8a6b11d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Zip Lists to a Dictionary\nUse `zip` to create a dictionary `cast` that uses `names` as keys and `heights` as values.",
              "instructor_notes": ""
            },
            {
              "id": 527747,
              "key": "9ce56bb1-d056-4314-8192-9b44c2cd718b",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "9ce56bb1-d056-4314-8192-9b44c2cd718b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5501478643564544",
                "initial_code_files": [
                  {
                    "text": "cast_names = [\"Barney\", \"Robin\", \"Ted\", \"Lily\", \"Marshall\"]\ncast_heights = [72, 68, 72, 66, 76]\n\ncast = # replace with your code\nprint(cast)",
                    "name": "zip_dict.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 527798,
              "key": "5c1bbba2-b521-47c8-a862-dd2e24092d85",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Unzip Tuples\nUnzip the `cast` tuple into two `names` and `heights` tuples.",
              "instructor_notes": ""
            },
            {
              "id": 527736,
              "key": "38a16fd6-9f4e-4f88-a7c0-7ae43b0ff3a4",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "38a16fd6-9f4e-4f88-a7c0-7ae43b0ff3a4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5593265584340992",
                "initial_code_files": [
                  {
                    "text": "cast = ((\"Barney\", 72), (\"Robin\", 68), (\"Ted\", 72), (\"Lily\", 66), (\"Marshall\", 76))\n\n# define names and heights here\n\n\nprint(names)\nprint(heights)",
                    "name": "unzip.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 527799,
              "key": "755d2b8d-bdeb-464e-bf12-1e7fcbcdeff5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Transpose with Zip\nUse `zip` to transpose `data` from a 4-by-3 matrix to a 3-by-4 matrix. There's actually a cool trick for this! Feel free to look at the solutions if you can't figure it out.",
              "instructor_notes": ""
            },
            {
              "id": 527739,
              "key": "1a656d83-ceb7-45d4-9729-aabc509102db",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "1a656d83-ceb7-45d4-9729-aabc509102db",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6207814054313984",
                "initial_code_files": [
                  {
                    "text": "data = ((0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11))\n\ndata_transpose = # replace with your code\nprint(data_transpose)",
                    "name": "transpose.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 527748,
              "key": "7f4095a2-7768-431a-b509-d5cc5ef046b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Enumerate\nUse `enumerate` to modify the `cast` list so that each element contains the name followed by the character's corresponding height. For example, the first element of `cast` should change from `\"Barney Stinson\"` to `\"Barney Stinson 72\"`.",
              "instructor_notes": ""
            },
            {
              "id": 527793,
              "key": "2fa59f80-5058-4865-b6d2-eee079ef006c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "2fa59f80-5058-4865-b6d2-eee079ef006c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5500523013341184",
                "initial_code_files": [
                  {
                    "text": "cast = [\"Barney Stinson\", \"Robin Scherbatsky\", \"Ted Mosby\", \"Lily Aldrin\", \"Marshall Eriksen\"]\nheights = [72, 68, 72, 66, 76]\n\n# write your for loop here\n\n\nprint(cast)",
                    "name": "enumerate_cast.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 527837,
          "key": "115ad3cf-995f-4e48-b032-86ba683c9113",
          "title": "Solution: Zip and Enumerate",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "115ad3cf-995f-4e48-b032-86ba683c9113",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527846,
              "key": "bb60407c-2dfe-4e4b-acd0-978ab22355a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Zip Coordinates\n```python\nx_coord = [23, 53, 2, -12, 95, 103, 14, -5]\ny_coord = [677, 233, 405, 433, 905, 376, 432, 445]\nz_coord = [4, 16, -6, -42, 3, -6, 23, -1]\nlabels = [\"F\", \"J\", \"A\", \"Q\", \"Y\", \"B\", \"W\", \"X\"]\n\npoints = []\nfor point in zip(labels, x_coord, y_coord, z_coord):\n    points.append(\"{}: {}, {}, {}\".format(*point))\n\nfor point in points:\n    print(point)\n```\n### Output:\n```txt\nF: 23, 677, 4\nJ: 53, 233, 16\nA: 2, 405, -6\nQ: -12, 433, -42\nY: 95, 905, 3\nB: 103, 376, -6\nW: 14, 432, 23\nX: -5, 445, -1\n```\nNotice here, the tuple was unpacked using `*` in the `format` method. This can help make your code cleaner!",
              "instructor_notes": ""
            },
            {
              "id": 527847,
              "key": "085ee18f-7492-4e13-9adc-cdd0e767be94",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Zip Lists to a Dictionary\n```python\ncast_names = [\"Barney\", \"Robin\", \"Ted\", \"Lily\", \"Marshall\"]\ncast_heights = [72, 68, 72, 66, 76]\n\ncast = dict(zip(cast_names, cast_heights))\nprint(cast)\n```\n### Output:\nThe order of elements in this output may vary since dictionaries are unordered.\n```txt\n{'Lily': 66, 'Barney': 72, 'Marshall': 76, 'Ted': 72, 'Robin': 68}\n```",
              "instructor_notes": ""
            },
            {
              "id": 527848,
              "key": "14ee97aa-2a3b-49c7-8f17-34376be924ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Unzip Tuples\n```python\ncast = ((\"Barney\", 72), (\"Robin\", 68), (\"Ted\", 72), (\"Lily\", 66), (\"Marshall\", 76))\n\nnames, heights = zip(*cast)\nprint(names)\nprint(heights)\n```\n### Output:\n```txt\n('Barney', 'Robin', 'Ted', 'Lily', 'Marshall')\n(72, 68, 72, 66, 76)\n```",
              "instructor_notes": ""
            },
            {
              "id": 527849,
              "key": "88aefe96-231d-4d2c-a6af-1f37de43e176",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Transpose with Zip\n```python\ndata = ((0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11))\n\ndata_transpose = tuple(zip(*data))\nprint(data_transpose)\n```\n### Output:\n```txt\n((0, 3, 6, 9), (1, 4, 7, 10), (2, 5, 8, 11))\n```\nThis is a useful trick to know!",
              "instructor_notes": ""
            },
            {
              "id": 527851,
              "key": "d777c198-a111-453c-ba3f-2f0957bcc60e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Enumerate\n```python\ncast = [\"Barney Stinson\", \"Robin Scherbatsky\", \"Ted Mosby\", \"Lily Aldrin\", \"Marshall Eriksen\"]\nheights = [72, 68, 72, 66, 76]\n\nfor i, character in enumerate(cast):\n    cast[i] = character + \" \" + str(heights[i])\n\nprint(cast)\n```\n### Output:\n```txt\n['Barney Stinson 72', 'Robin Scherbatsky 68', 'Ted Mosby 72', 'Lily Aldrin 66', 'Marshall Eriksen 76']\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486373,
          "key": "41c9267a-c9bd-42c8-9897-78e49b376471",
          "title": "List Comprehensions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "41c9267a-c9bd-42c8-9897-78e49b376471",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527723,
              "key": "c061ef5a-3f7a-452e-80c3-8bbf3fee8c81",
              "title": "List Comprehensions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6qxo-NV9v_s",
                "china_cdn_id": "6qxo-NV9v_s.mp4"
              }
            },
            {
              "id": 506248,
              "key": "af893985-a0d8-4de3-96ea-f143c487942b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# List Comprehensions\nIn Python, you can create lists really quickly and concisely with list comprehensions. This example from earlier:\n```python\ncapitalized_cities = []\nfor city in cities:\n    capitalized_cities.append(city.title())\n```\ncan be reduced to:\n```python\ncapitalized_cities = [city.title() for city in cities]\n```\nList comprehensions allow us to create a list using a `for` loop in one step.\n\n\nYou create a list comprehension with brackets `[]`, including an expression to evaluate for each element in an iterable. This list comprehension above calls `city.title()` for each element `city` in `cities`, to create each element in the new list, `capitalized_cities`. \n\n### Conditionals in List Comprehensions\nYou can also add conditionals to list comprehensions (listcomps). After the iterable, you can use the `if` keyword to check a condition in each iteration.\n```python\nsquares = [x**2 for x in range(9) if x % 2 == 0]\n```\nThe code above sets `squares` equal to the list [0, 4, 16, 36, 64], as x to the power of 2 is only evaluated if x is even. If you want to add an `else`, you will get a syntax error doing this. \n```python\nsquares = [x**2 for x in range(9) if x % 2 == 0 else x + 3]\n```\nIf you would like to add `else`, you have to move the conditionals to the beginning of the listcomp, right after the expression, like this. \n```python\nsquares = [x**2 if x % 2 == 0 else x + 3 for x in range(9)]\n```\nList comprehensions are not found in other languages, but are very common in Python.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486374,
          "key": "be839dbf-f02a-4a51-b708-8e54f4b4f7e6",
          "title": "Quiz: List Comprehensions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "be839dbf-f02a-4a51-b708-8e54f4b4f7e6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527814,
              "key": "0bcd0159-bcef-49d4-84a6-c27d1689ab05",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Extract First Names\nUse a list comprehension to create a new list `first_names` containing just the first names in `names` in lowercase.",
              "instructor_notes": ""
            },
            {
              "id": 527819,
              "key": "38240c7a-5291-48fb-939b-ae8e832945af",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "38240c7a-5291-48fb-939b-ae8e832945af",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5004408388190208",
                "initial_code_files": [
                  {
                    "text": "names = [\"Rick Sanchez\", \"Morty Smith\", \"Summer Smith\", \"Jerry Smith\", \"Beth Smith\"]\n\nfirst_names = # write your list comprehension here\nprint(first_names)",
                    "name": "extract_first.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 527821,
              "key": "d6e5c488-3639-4cdd-956b-fa9df0c68585",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Multiples of Three\nUse a list comprehension to create a list `multiples_3` containing the first 20 multiples of 3.",
              "instructor_notes": ""
            },
            {
              "id": 527824,
              "key": "45308c60-ee96-4951-86f2-4436f211f401",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "45308c60-ee96-4951-86f2-4436f211f401",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4549938290229248",
                "initial_code_files": [
                  {
                    "text": "multiples_3 = # write your list comprehension here\nprint(multiples_3)",
                    "name": "multiples_3.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 527831,
              "key": "4ea4c48e-0e6d-43a0-ba68-5769f28230b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Filter Names by Scores\nUse a list comprehension to create a list of names `passed` that only include those that scored at least 65.",
              "instructor_notes": ""
            },
            {
              "id": 527835,
              "key": "ecebc8ce-05c1-46b4-ae0a-5bafb4614807",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "ecebc8ce-05c1-46b4-ae0a-5bafb4614807",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5524058897252352",
                "initial_code_files": [
                  {
                    "text": "scores = {\n             \"Rick Sanchez\": 70,\n             \"Morty Smith\": 35,\n             \"Summer Smith\": 82,\n             \"Jerry Smith\": 23,\n             \"Beth Smith\": 98\n          }\n\npassed = # write your list comprehension here\nprint(passed)",
                    "name": "filter_scores.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 527836,
          "key": "05416928-6a1e-425f-b967-2eeb87a78c64",
          "title": "Solution: List Comprehensions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "05416928-6a1e-425f-b967-2eeb87a78c64",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527838,
              "key": "9ae529a5-3694-4010-b0c2-2cd15199926d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Extract First Names\n```python\nnames = [\"Rick Sanchez\", \"Morty Smith\", \"Summer Smith\", \"Jerry Smith\", \"Beth Smith\"]\n\nfirst_names = [name.split()[0].lower() for name in names]\nprint(first_names)\n```\n### Output:\n```txt\n['rick', 'morty', 'summer', 'jerry', 'beth']\n```",
              "instructor_notes": ""
            },
            {
              "id": 527843,
              "key": "cf90743f-d585-48a9-8e1a-af9f1a5cb8d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Multiples of Three\n```python\nmultiples_3 = [x * 3 for x in range(1, 21)]\nprint(multiples_3)\n```\n### Output:\n```txt\n[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]\n```",
              "instructor_notes": ""
            },
            {
              "id": 527844,
              "key": "68e4bf43-bcdf-4644-b699-92204b1b13af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Filter Names by Scores\n```python\nscores = {\n             \"Rick Sanchez\": 70,\n             \"Morty Smith\": 35,\n             \"Summer Smith\": 82,\n             \"Jerry Smith\": 23,\n             \"Beth Smith\": 98\n          }\n\npassed = [name for name, score in scores.items() if score >= 65]\nprint(passed)\n```\n### Output:\nThe order of elements in this output may vary since dictionaries are unordered.\n```txt\n['Beth Smith', 'Summer Smith', 'Rick Sanchez']\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486380,
          "key": "59f33be8-d583-49de-a1bc-4f5d723f253f",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59f33be8-d583-49de-a1bc-4f5d723f253f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527724,
              "key": "fe54e277-6d09-4ef9-8d3f-471a9e768677",
              "title": "Congrats!",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vDoqpwCHxs4",
                "china_cdn_id": "vDoqpwCHxs4.mp4"
              }
            }
          ]
        }
      ]
    }
  }
}